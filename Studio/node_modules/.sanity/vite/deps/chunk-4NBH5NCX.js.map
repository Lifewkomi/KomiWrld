{
  "version": 3,
  "sources": ["../../../lodash/camelCase.js", "../../../lodash/kebabCase.js", "../../../toggle-selection/index.js", "../../../copy-to-clipboard/index.js", "../../../react-copy-to-clipboard/lib/Component.js", "../../../react-copy-to-clipboard/lib/index.js", "../../../lodash/isNumber.js", "../../../@tanstack/table-core/src/columnHelper.ts", "../../../@tanstack/table-core/src/utils.ts", "../../../@tanstack/table-core/src/core/cell.ts", "../../../@tanstack/table-core/src/core/column.ts", "../../../@tanstack/table-core/src/core/headers.ts", "../../../@tanstack/table-core/src/core/row.ts", "../../../@tanstack/table-core/src/features/ColumnFaceting.ts", "../../../@tanstack/table-core/src/filterFns.ts", "../../../@tanstack/table-core/src/features/ColumnFiltering.ts", "../../../@tanstack/table-core/src/aggregationFns.ts", "../../../@tanstack/table-core/src/features/ColumnGrouping.ts", "../../../@tanstack/table-core/src/features/ColumnOrdering.ts", "../../../@tanstack/table-core/src/features/ColumnPinning.ts", "../../../@tanstack/table-core/src/features/ColumnSizing.ts", "../../../@tanstack/table-core/src/features/ColumnVisibility.ts", "../../../@tanstack/table-core/src/features/GlobalFaceting.ts", "../../../@tanstack/table-core/src/features/GlobalFiltering.ts", "../../../@tanstack/table-core/src/features/RowExpanding.ts", "../../../@tanstack/table-core/src/features/RowPagination.ts", "../../../@tanstack/table-core/src/features/RowPinning.ts", "../../../@tanstack/table-core/src/features/RowSelection.ts", "../../../@tanstack/table-core/src/sortingFns.ts", "../../../@tanstack/table-core/src/features/RowSorting.ts", "../../../@tanstack/table-core/src/core/table.ts", "../../../@tanstack/table-core/src/utils/getCoreRowModel.ts", "../../../@tanstack/table-core/src/utils/getExpandedRowModel.ts", "../../../@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts", "../../../@tanstack/table-core/src/utils/filterRowsUtils.ts", "../../../@tanstack/table-core/src/utils/getFacetedRowModel.ts", "../../../@tanstack/table-core/src/utils/getFacetedUniqueValues.ts", "../../../@tanstack/table-core/src/utils/getFilteredRowModel.ts", "../../../@tanstack/table-core/src/utils/getGroupedRowModel.ts", "../../../@tanstack/table-core/src/utils/getPaginationRowModel.ts", "../../../@tanstack/table-core/src/utils/getSortedRowModel.ts", "../../../@tanstack/react-table/src/index.tsx", "../../../sanity/src/structure/i18n/index.ts", "../../../sanity/src/structure/components/DocTitle.tsx", "../../../sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.styles.tsx", "../../../sanity/src/structure/components/paneItem/PaneItemPreview.tsx", "../../../sanity/src/structure/components/paneRouter/BackLink.tsx", "../../../sanity/src/structure/components/pane/usePaneLayout.ts", "../../../sanity/src/structure/components/paneRouter/ChildLink.tsx", "../../../sanity/src/structure/components/paneRouter/ParameterizedLink.tsx", "../../../sanity/src/structure/components/paneRouter/ReferenceChildLink.tsx", "../../../sanity/src/structure/components/paneRouter/usePaneRouter.ts", "../../../sanity/src/structure/components/confirmDeleteDialog/ReferencePreviewLink.tsx", "../../../sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.tsx", "../../../sanity/src/structure/components/confirmDeleteDialog/useReferringDocuments.ts", "../../../sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialog.tsx", "../../../sanity/src/structure/components/confirmDeleteDialog/index.tsx", "../../../sanity/src/structure/components/Delay.tsx", "../../../sanity/src/structure/components/pane/constants.ts", "../../../sanity/src/structure/components/pane/PaneDivider.tsx", "../../../sanity/src/structure/components/pane/Pane.tsx", "../../../sanity/src/structure/components/pane/PaneContent.styles.tsx", "../../../sanity/src/structure/components/pane/usePane.ts", "../../../sanity/src/structure/components/pane/PaneContent.tsx", "../../../sanity/src/structure/components/pane/PaneMenuButtonItem.tsx", "../../../sanity/src/structure/components/pane/PaneContextMenuButton.tsx", "../../../sanity/src/structure/components/pane/PaneFooter.styles.tsx", "../../../sanity/src/structure/components/pane/PaneFooter.tsx", "../../../sanity/src/structure/components/pane/PaneHeader.styles.tsx", "../../../sanity/src/structure/components/pane/PaneHeader.tsx", "../../../sanity/src/structure/components/pane/PaneHeaderActionButton.tsx", "../../../sanity/src/structure/components/pane/PaneLayout.styles.tsx", "../../../sanity/src/structure/components/pane/helpers/_calcPaneResize.ts", "../../../sanity/src/structure/components/pane/helpers/_getDOMPath.ts", "../../../sanity/src/structure/components/pane/helpers/_sortElements.ts", "../../../sanity/src/structure/components/pane/paneLayoutController.ts", "../../../sanity/src/structure/components/pane/PaneLayout.tsx", "../../../sanity/src/structure/menuNodes.ts", "../../../sanity/src/structure/components/IntentButton.tsx", "../../../sanity/src/structure/components/paneHeaderActions/InsufficientPermissionsMessageTooltip.tsx", "../../../sanity/src/structure/components/paneHeaderActions/PaneHeaderCreateButton.tsx", "../../../sanity/src/structure/components/paneHeaderActions/PaneHeaderActions.tsx", "../../../sanity/src/structure/components/MissingSchemaType.tsx", "../../../sanity/src/structure/components/paneItem/PaneItem.tsx", "../../../sanity/src/structure/components/RenderActionCollectionState.tsx", "../../../sanity/src/structure/components/RenderBadgeCollectionState.tsx", "../../../sanity/src/structure/panes/error/ErrorPane.tsx", "../../../sanity/src/structure/panes/loading/getWaitMessages.ts", "../../../sanity/src/structure/panes/loading/LoadingPane.tsx", "../../../sanity/src/structure/panes/document/useDocumentPane.tsx", "../../../sanity/src/structure/panes/document/comments/CommentsWrapper.tsx", "../../../sanity/src/structure/constants.ts", "../../../sanity/src/structure/useStructureTool.ts", "../../../sanity/src/structure/panes/document/constants.ts", "../../../sanity/src/structure/panes/document/DocumentInspectorMenuItemsResolver.tsx", "../../../sanity/src/structure/panes/document/useDocumentTitle.ts", "../../../sanity/src/structure/panes/document/DocumentOperationResults.tsx", "../../../sanity/src/structure/panes/document/documentInspector/DocumentInspectorHeader.tsx", "../../../sanity/src/structure/panes/document/documentInspector/Resizer.tsx", "../../../sanity/src/structure/panes/document/documentInspector/Resizable.tsx", "../../../sanity/src/structure/panes/document/documentInspector/DocumentInspectorPanel.tsx", "../../../sanity/src/structure/useStructureToolSetting.ts", "../../../sanity/src/structure/panes/document/inspectDialog/constants.ts", "../../../sanity/src/structure/panes/document/inspectDialog/helpers.ts", "../../../sanity/src/structure/panes/document/inspectDialog/InspectDialog.styles.tsx", "../../../sanity/src/structure/panes/document/inspectDialog/Search.tsx", "../../../sanity/src/structure/panes/document/inspectDialog/InspectDialog.tsx", "../../../sanity/src/structure/components/spacerButton/SpacerButton.tsx", "../../../sanity/src/structure/panes/document/documentPanel/banners/Banner.tsx", "../../../sanity/src/structure/panes/document/documentPanel/banners/DeletedDocumentBanner.tsx", "../../../sanity/src/structure/panes/document/documentPanel/banners/DeprecatedDocumentTypeBanner.tsx", "../../../sanity/src/structure/panes/document/documentPanel/banners/PermissionCheckBanner.tsx", "../../../sanity/src/structure/panes/document/documentPanel/banners/ReferenceChangedBanner.tsx", "../../../sanity/src/structure/panes/document/documentPanel/documentViews/FormHeader.tsx", "../../../sanity/src/structure/panes/document/documentPanel/documentViews/useConditionalToast.ts", "../../../sanity/src/structure/panes/document/documentPanel/documentViews/FormView.tsx", "../../../sanity/src/structure/panes/document/documentPanel/DocumentPanel.tsx", "../../../sanity/src/structure/panes/document/statusBar/dialogs/constants.ts", "../../../sanity/src/structure/panes/document/statusBar/dialogs/ConfirmDialog.tsx", "../../../sanity/src/structure/panes/document/statusBar/dialogs/ModalDialog.tsx", "../../../sanity/src/structure/panes/document/statusBar/dialogs/PopoverDialog.tsx", "../../../sanity/src/structure/panes/document/statusBar/ActionStateDialog.tsx", "../../../sanity/src/structure/panes/document/statusBar/ActionMenuButton.tsx", "../../../sanity/src/structure/documentActions/DeleteAction.tsx", "../../../sanity/src/structure/documentActions/DiscardChangesAction.tsx", "../../../sanity/src/structure/documentActions/DuplicateAction.tsx", "../../../sanity/src/structure/documentActions/HistoryRestoreAction.tsx", "../../../sanity/src/structure/documentActions/__telemetry__/documentActions.telemetry.ts", "../../../sanity/src/structure/documentActions/PublishAction.tsx", "../../../sanity/src/structure/documentActions/UnpublishAction.tsx", "../../../sanity/src/structure/panes/document/statusBar/DocumentStatusBarActions.tsx", "../../../sanity/src/structure/panes/document/timeline/constants.ts", "../../../sanity/src/structure/panes/document/timeline/helpers.ts", "../../../sanity/src/structure/panes/document/timeline/timeline.styled.tsx", "../../../sanity/src/structure/panes/document/timeline/timelineI18n.ts", "../../../sanity/src/structure/panes/document/timeline/timelineItem.styled.tsx", "../../../sanity/src/structure/panes/document/timeline/userAvatarStack.tsx", "../../../sanity/src/structure/panes/document/timeline/timelineItem.tsx", "../../../sanity/src/structure/panes/document/timeline/timeline.tsx", "../../../sanity/src/structure/panes/document/timeline/TimelineError.tsx", "../../../sanity/src/structure/panes/document/timeline/timelineMenu.tsx", "../../../sanity/src/structure/panes/document/documentPanel/header/DocumentHeaderTabs.tsx", "../../../sanity/src/structure/panes/document/documentPanel/header/DocumentHeaderTitle.tsx", "../../../sanity/src/structure/panes/document/documentPanel/header/DocumentPanelHeader.tsx", "../../../sanity/src/structure/panes/document/statusBar/DocumentBadges.tsx", "../../../sanity/src/structure/panes/document/statusBar/DocumentStatusPulse/AnimatedStatusIcon.tsx", "../../../sanity/src/structure/panes/document/statusBar/DocumentStatusPulse/DocumentStatusPulse.tsx", "../../../sanity/src/structure/panes/document/statusBar/DocumentStatusLine.tsx", "../../../sanity/src/structure/panes/document/statusBar/useResizeObserver.ts", "../../../sanity/src/structure/panes/document/statusBar/DocumentStatusBar.tsx", "../../../sanity/src/structure/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx", "../../../sanity/src/structure/panes/document/menuItems.ts", "../../../sanity/src/structure/panes/document/usePreviewUrl.ts", "../../../sanity/src/structure/panes/document/document-layout/DocumentLayoutError.tsx", "../../../sanity/src/structure/panes/document/document-layout/DocumentLayout.tsx", "../../../sanity/src/structure/panes/document/document-layout/useDocumentLayoutComponent.ts", "../../../sanity/src/structure/panes/document/getInitialValueTemplateOpts.ts", "../../../sanity/src/structure/panes/document/DocumentPaneProvider.tsx", "../../../sanity/src/structure/panes/document/DocumentPane.tsx", "../../../sanity/src/structure/panes/documentList/constants.ts", "../../../sanity/src/structure/panes/documentList/DocumentListPaneContent.tsx", "../../../sanity/src/structure/panes/documentList/helpers.ts", "../../../sanity/src/structure/structureBuilder/util/getExtendedProjection.ts", "../../../sanity/src/structure/panes/documentList/listenSearchQuery.ts", "../../../sanity/src/structure/panes/documentList/useDocumentList.ts", "../../../sanity/src/structure/panes/documentList/DocumentListPane.tsx", "../../../sanity/src/structure/panes/documentList/PaneHeader.tsx", "../../../sanity/src/structure/panes/documentList/sheetList/DocumentSheetListSelect.tsx", "../../../sanity/src/structure/panes/documentList/sheetList/DocumentSheetListProvider.tsx", "../../../sanity/src/structure/panes/documentList/sheetList/SheetListCell.tsx", "../../../sanity/src/structure/panes/documentList/sheetList/useDocumentSheetColumns.tsx", "../../../sanity/src/structure/panes/documentList/sheetList/ColumnsControl.tsx", "../../../sanity/src/structure/panes/documentList/sheetList/DocumentSheetListFilter.tsx", "../../../sanity/src/structure/panes/documentList/sheetList/DocumentSheetListHeader.tsx", "../../../sanity/src/structure/panes/documentList/sheetList/DocumentSheetListPaginator.tsx", "../../../sanity/src/structure/panes/documentList/sheetList/useDocumentSheetListStore.ts", "../../../sanity/src/structure/panes/documentList/sheetList/useDocumentSheetList.ts", "../../../sanity/src/structure/panes/documentList/sheetList/DocumentSheetListPane.tsx", "../../../sanity/src/structure/panes/documentList/PaneContainer.tsx", "../../../sanity/src/structure/structureBuilder/SerializeError.ts", "../../../sanity/src/structure/structureBuilder/Sort.ts", "../../../sanity/src/structure/structureBuilder/MenuItem.ts", "../../../sanity/src/structure/structureBuilder/MenuItemGroup.ts", "../../../sanity/src/structure/structureBuilder/util/validateId.ts", "../../../sanity/src/structure/structureBuilder/util/getStructureNodeId.ts", "../../../sanity/src/structure/structureBuilder/Component.ts", "../../../sanity/src/structure/structureBuilder/util/resolveTypeForDocument.ts", "../../../sanity/src/structure/structureBuilder/views/View.ts", "../../../sanity/src/structure/structureBuilder/views/ComponentView.ts", "../../../sanity/src/structure/structureBuilder/views/FormView.ts", "../../../sanity/src/structure/structureBuilder/views/index.ts", "../../../sanity/src/structure/structureBuilder/Document.ts", "../../../sanity/src/structure/structureBuilder/InitialValueTemplateItem.ts", "../../../sanity/src/structure/structureBuilder/Intent.ts", "../../../sanity/src/structure/structureBuilder/Layout.ts", "../../../sanity/src/structure/structureBuilder/GenericList.ts", "../../../sanity/src/structure/structureBuilder/DocumentList.ts", "../../../sanity/src/structure/structureBuilder/List.ts", "../../../sanity/src/structure/structureBuilder/ListItem.ts", "../../../sanity/src/structure/structureBuilder/DocumentListItem.ts", "../../../sanity/src/structure/structureBuilder/DocumentTypeList.ts", "../../../sanity/src/structure/structureBuilder/documentTypeListItems.ts", "../../../sanity/src/structure/structureBuilder/createStructureBuilder.ts", "../../../sanity/src/structure/documentBadges/LiveEditBadge.ts", "../../../sanity/src/structure/getIntentState.ts", "../../../sanity/src/structure/panes/document/inspectors/changes/helpers.ts", "../../../sanity/src/structure/panes/document/inspectors/changes/ChangesInspector.tsx", "../../../sanity/src/structure/panes/document/inspectors/changes/index.ts", "../../../sanity/src/structure/panes/document/inspectors/validation/getPathTitles.ts", "../../../sanity/src/structure/panes/document/inspectors/validation/ValidationInspector.tsx", "../../../sanity/src/structure/panes/document/inspectors/validation/index.ts", "../../../sanity/src/structure/router.ts", "../../../sanity/src/structure/structureTool.ts", "../../../sanity/src/structure/StructureToolProvider.tsx"],
  "sourcesContent": ["var capitalize = require('./capitalize'),\n    createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the camel cased string.\n * @example\n *\n * _.camelCase('Foo Bar');\n * // => 'fooBar'\n *\n * _.camelCase('--foo-bar--');\n * // => 'fooBar'\n *\n * _.camelCase('__FOO_BAR__');\n * // => 'fooBar'\n */\nvar camelCase = createCompounder(function(result, word, index) {\n  word = word.toLowerCase();\n  return result + (index ? capitalize(word) : word);\n});\n\nmodule.exports = camelCase;\n", "var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n", "\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n", "\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar clipboardToIE11Formatting = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // avoid screen readers from reading out loud the text\n    mark.ariaHidden = \"true\"\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        if (typeof e.clipboardData === \"undefined\") { // IE 11\n          debug && console.warn(\"unable to use e.clipboardData\");\n          debug && console.warn(\"trying IE specific stuff\");\n          window.clipboardData.clearData();\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"]\n          window.clipboardData.setData(format, text);\n        } else { // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CopyToClipboard = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _copyToClipboard = _interopRequireDefault(require(\"copy-to-clipboard\"));\n\nvar _excluded = [\"text\", \"onCopy\", \"options\", \"children\"];\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar CopyToClipboard = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(CopyToClipboard, _React$PureComponent);\n\n  var _super = _createSuper(CopyToClipboard);\n\n  function CopyToClipboard() {\n    var _this;\n\n    _classCallCheck(this, CopyToClipboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (event) {\n      var _this$props = _this.props,\n          text = _this$props.text,\n          onCopy = _this$props.onCopy,\n          children = _this$props.children,\n          options = _this$props.options;\n\n      var elem = _react[\"default\"].Children.only(children);\n\n      var result = (0, _copyToClipboard[\"default\"])(text, options);\n\n      if (onCopy) {\n        onCopy(text, result);\n      } // Bypass onClick if it was present\n\n\n      if (elem && elem.props && typeof elem.props.onClick === 'function') {\n        elem.props.onClick(event);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CopyToClipboard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          _text = _this$props2.text,\n          _onCopy = _this$props2.onCopy,\n          _options = _this$props2.options,\n          children = _this$props2.children,\n          props = _objectWithoutProperties(_this$props2, _excluded);\n\n      var elem = _react[\"default\"].Children.only(children);\n\n      return /*#__PURE__*/_react[\"default\"].cloneElement(elem, _objectSpread(_objectSpread({}, props), {}, {\n        onClick: this.onClick\n      }));\n    }\n  }]);\n\n  return CopyToClipboard;\n}(_react[\"default\"].PureComponent);\n\nexports.CopyToClipboard = CopyToClipboard;\n\n_defineProperty(CopyToClipboard, \"defaultProps\", {\n  onCopy: undefined,\n  options: undefined\n});", "\"use strict\";\n\nvar _require = require('./Component'),\n    CopyToClipboard = _require.CopyToClipboard;\n\nCopyToClipboard.CopyToClipboard = CopyToClipboard;\nmodule.exports = CopyToClipboard;", "var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n", "import {\n  AccessorFn,\n  AccessorFnColumnDef,\n  AccessorKeyColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n        ? DeepValue<TData, TAccessor>\n        : never,\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => TAccessor extends AccessorFn<TData>\n    ? AccessorFnColumnDef<TData, TValue>\n    : AccessorKeyColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => DisplayColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => GroupColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData,\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column,\n    group: column => column,\n  }\n}\n", "import { TableOptionsResolved, TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = [],\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never,\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n    ? AllowedIndexes<Tail, Keys | Tail['length']>\n    : Keys\n\nexport type DeepKeys<T, TDepth extends any[] = []> = TDepth['length'] extends 5\n  ? never\n  : unknown extends T\n    ? string\n    : T extends readonly any[] & IsTuple<T>\n      ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>, TDepth>\n      : T extends any[]\n        ? DeepKeys<T[number], [...TDepth, any]>\n        : T extends Date\n          ? never\n          : T extends object\n            ? (keyof T & string) | DeepKeysPrefix<T, keyof T, TDepth>\n            : never\n\ntype DeepKeysPrefix<\n  T,\n  TPrefix,\n  TDepth extends any[],\n> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix], [...TDepth, any]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TDepArgs, TResult>(\n  getDeps: (depArgs?: TDepArgs) => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): (depArgs?: TDepArgs) => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return depArgs => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps(depArgs)\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n\nexport function getMemoOptions(\n  tableOptions: Partial<TableOptionsResolved<any>>,\n  debugLevel:\n    | 'debugAll'\n    | 'debugCells'\n    | 'debugTable'\n    | 'debugColumns'\n    | 'debugRows'\n    | 'debugHeaders',\n  key: string,\n  onChange?: (result: any) => void\n) {\n  return {\n    debug: () => tableOptions?.debugAll ?? tableOptions[debugLevel],\n    key: process.env.NODE_ENV === 'development' && key,\n    onChange,\n  }\n}\n", "import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, getMemoOptions, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  cell: Cell<TData, TValue>\n  column: Column<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n  row: Row<TData>\n  table: Table<TData>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  /**\n   * The associated Column object for the cell.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#column)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  column: Column<TData, TValue>\n  /**\n   * Returns the rendering context (or props) for cell-based components like cells and aggregated cells. Use these props with your framework's `flexRender` utility to render these using the template of your choice:\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#getcontext)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  getContext: () => CellContext<TData, TValue>\n  /**\n   * Returns the value for the cell, accessed via the associated column's accessor key or accessor function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#getvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  getValue: CellContext<TData, TValue>['getValue']\n  /**\n   * The unique ID for the cell across the entire table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  id: string\n  /**\n   * Renders the value for a cell the same as `getValue`, but will return the `renderFallbackValue` if no value is found.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#rendervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  renderValue: CellContext<TData, TValue>['renderValue']\n  /**\n   * The associated Row object for the cell.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#row)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  row: Row<TData>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      getMemoOptions(table.options, 'debugCells', 'cell.getContext')\n    ),\n  }\n\n  table._features.forEach(feature => {\n    feature.createCell?.(\n      cell as Cell<TData, TValue>,\n      column,\n      row as Row<TData>,\n      table\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n", "import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  /**\n   * The resolved accessor function to use when extracting the value for the column from each row. Will only be defined if the column def has a valid accessor key or function defined.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#accessorfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  accessorFn?: AccessorFn<TData, TValue>\n  /**\n   * The original column def used to create the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#columndef)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  columnDef: ColumnDef<TData, TValue>\n  /**\n   * The child column (if the column is a group column). Will be an empty array if the column is not a group column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#columns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  columns: Column<TData, TValue>[]\n  /**\n   * The depth of the column (if grouped) relative to the root column def array.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#depth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  depth: number\n  /**\n   * Returns the flattened array of this column and all child/grand-child columns for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#getflatcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  getFlatColumns: () => Column<TData, TValue>[]\n  /**\n   * Returns an array of all leaf-node columns for this column. If a column has no children, it is considered the only leaf-node column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#getleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  getLeafColumns: () => Column<TData, TValue>[]\n  /**\n   * The resolved unique identifier for the column resolved in this priority:\n      - A manual `id` property from the column def\n      - The accessor key from the column def\n      - The header string from the column def\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  id: string\n  /**\n   * The parent column for this column. Will be undefined if this is a root column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#parent)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  parent?: Column<TData, TValue>\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      getMemoOptions(table.options, 'debugColumns', 'column.getFlatColumns')\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      getMemoOptions(table.options, 'debugColumns', 'column.getLeafColumns')\n    ),\n  }\n\n  for (const feature of table._features) {\n    feature.createColumn?.(column as Column<TData, TValue>, table)\n  }\n\n  // Yes, we have to convert table to unknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n", "import {\n  RowData,\n  Column,\n  Header,\n  HeaderGroup,\n  Table,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nconst debug = 'debugHeaders'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  depth: number\n  headers: Header<TData, unknown>[]\n  id: string\n}\n\nexport interface HeaderContext<TData, TValue> {\n  /**\n   * An instance of a column.\n   */\n  column: Column<TData, TValue>\n  /**\n   * An instance of a header.\n   */\n  header: Header<TData, TValue>\n  /**\n   * The table instance.\n   */\n  table: Table<TData>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  /**\n   * The col-span for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#colspan)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  colSpan: number\n  /**\n   * The header's associated column object.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#column)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  column: Column<TData, TValue>\n  /**\n   * The depth of the header, zero-indexed based.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#depth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  depth: number\n  /**\n   * Returns the rendering context (or props) for column-based components like headers, footers and filters.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#getcontext)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getContext: () => HeaderContext<TData, TValue>\n  /**\n   * Returns the leaf headers hierarchically nested under this header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#getleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * The header's associated header group object.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#headergroup)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  headerGroup: HeaderGroup<TData>\n  /**\n   * The unique identifier for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  id: string\n  /**\n   * The index for the header within the header group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#index)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  index: number\n  /**\n   * A boolean denoting if the header is a placeholder header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#isplaceholder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  isPlaceholder: boolean\n  /**\n   * If the header is a placeholder header, this will be a unique header ID that does not conflict with any other headers across the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#placeholderid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  placeholderId?: string\n  /**\n   * The row-span for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#rowspan)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  rowSpan: number\n  /**\n   * The header's hierarchical sub/child headers. Will be empty if the header's associated column is a leaf-column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#subheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  subHeaders: Header<TData, TValue>[]\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  /**\n   * Returns all header groups for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for the left pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for columns that are not pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for the right pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  /**\n   * Returns the footer groups for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for the left pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for columns that are not pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for the right pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  /**\n   * Returns headers for all columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all left pinned columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all columns that are not pinned, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all right pinned columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  /**\n   * Returns headers for all leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all left pinned leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all columns that are not pinned, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all right pinned leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    feature.createHeader?.(header as Header<TData, TValue>, table)\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        const leftColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const rightColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const centerColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n\n        const headerGroups = buildHeaderGroups(\n          allColumns,\n          [...leftColumns, ...centerColumns, ...rightColumns],\n          table\n        )\n\n        return headerGroups\n      },\n      getMemoOptions(table.options, debug, 'getHeaderGroups')\n    )\n\n    table.getCenterHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n      },\n      getMemoOptions(table.options, debug, 'getCenterHeaderGroups')\n    )\n\n    table.getLeftHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n      ],\n      (allColumns, leafColumns, left) => {\n        const orderedLeafColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left')\n      },\n      getMemoOptions(table.options, debug, 'getLeftHeaderGroups')\n    )\n\n    table.getRightHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, right) => {\n        const orderedLeafColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right')\n      },\n      getMemoOptions(table.options, debug, 'getRightHeaderGroups')\n    )\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getFooterGroups')\n    )\n\n    table.getLeftFooterGroups = memo(\n      () => [table.getLeftHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getLeftFooterGroups')\n    )\n\n    table.getCenterFooterGroups = memo(\n      () => [table.getCenterHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getCenterFooterGroups')\n    )\n\n    table.getRightFooterGroups = memo(\n      () => [table.getRightHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getRightFooterGroups')\n    )\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return headerGroups\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getFlatHeaders')\n    )\n\n    table.getLeftFlatHeaders = memo(\n      () => [table.getLeftHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getLeftFlatHeaders')\n    )\n\n    table.getCenterFlatHeaders = memo(\n      () => [table.getCenterHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getCenterFlatHeaders')\n    )\n\n    table.getRightFlatHeaders = memo(\n      () => [table.getRightHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getRightFlatHeaders')\n    )\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(\n      () => [table.getCenterFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      getMemoOptions(table.options, debug, 'getCenterLeafHeaders')\n    )\n\n    table.getLeftLeafHeaders = memo(\n      () => [table.getLeftFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      getMemoOptions(table.options, debug, 'getLeftLeafHeaders')\n    )\n\n    table.getRightLeafHeaders = memo(\n      () => [table.getRightFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      getMemoOptions(table.options, debug, 'getRightLeafHeaders')\n    )\n\n    table.getLeafHeaders = memo(\n      () => [\n        table.getLeftHeaderGroups(),\n        table.getCenterHeaderGroups(),\n        table.getRightHeaderGroups(),\n      ],\n      (left, center, right) => {\n        return [\n          ...(left[0]?.headers ?? []),\n          ...(center[0]?.headers ?? []),\n          ...(right[0]?.headers ?? []),\n        ]\n          .map(header => {\n            return header.getLeafHeaders()\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getLeafHeaders')\n    )\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n", "import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, getMemoOptions, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  _uniqueValuesCache: Record<string, unknown>\n  _valuesCache: Record<string, unknown>\n  /**\n   * The depth of the row (if nested or grouped) relative to the root row array.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#depth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  depth: number\n  /**\n   * Returns all of the cells for the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getallcells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getAllCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns the leaf rows for the row, not including any parent rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getleafrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getLeafRows: () => Row<TData>[]\n  /**\n   * Returns the parent row for the row, if it exists.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getparentrow)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getParentRow: () => Row<TData> | undefined\n  /**\n   * Returns the parent rows for the row, all the way up to a root row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getparentrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getParentRows: () => Row<TData>[]\n  /**\n   * Returns a unique array of values from the row for a given columnId.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getuniquevalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  /**\n   * Returns the value from the row for a given columnId.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getValue: <TValue>(columnId: string) => TValue\n  /**\n   * The resolved unique identifier for the row resolved via the `options.getRowId` option. Defaults to the row's index (or relative index if it is a subRow).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  id: string\n  /**\n   * The index of the row within its parent array (or the root data array).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#index)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  index: number\n  /**\n   * The original row object provided to the table. If the row is a grouped row, the original row object will be the first original in the group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#original)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  original: TData\n  /**\n   * An array of the original subRows as returned by the `options.getSubRows` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#originalsubrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  originalSubRows?: TData[]\n  /**\n   * If nested, this row's parent row id.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#parentid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  parentId?: string\n  /**\n   * Renders the value for the row in a given columnId the same as `getValue`, but will return the `renderFallbackValue` if no value is found.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#rendervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  renderValue: <TValue>(columnId: string) => TValue\n  /**\n   * An array of subRows for the row as returned and created by the `options.getSubRows` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#subrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  subRows: Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () =>\n      row.parentId ? table.getRow(row.parentId, true) : undefined,\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      getMemoOptions(table.options, 'debugRows', 'getAllCells')\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce(\n          (acc, cell) => {\n            acc[cell.column.id] = cell\n            return acc\n          },\n          {} as Record<string, Cell<TData, unknown>>\n        )\n      },\n      getMemoOptions(table.options, 'debugRows', 'getAllCellsByColumnId')\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    feature?.createRow?.(row as Row<TData>, table)\n  }\n\n  return row as Row<TData>\n}\n", "import { RowModel } from '..'\nimport { Column, RowData, Table, TableFeature } from '../types'\n\nexport interface FacetedColumn<TData extends RowData> {\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n  _getFacetedRowModel?: () => RowModel<TData>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  /**\n   * A function that **computes and returns** a min/max tuple derived from `column.getFacetedRowModel`. Useful for displaying faceted result values.\n   * > ⚠️ Requires that you pass a valid `getFacetedMinMaxValues` function to `options.getFacetedMinMaxValues`. A default implementation is provided via the exported `getFacetedMinMaxValues` function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-faceting#getfacetedminmaxvalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-faceting)\n   */\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  /**\n   * Returns the row model with all other column filters applied, excluding its own filter. Useful for displaying faceted result counts.\n   * > ⚠️ Requires that you pass a valid `getFacetedRowModel` function to `options.facetedRowModel`. A default implementation is provided via the exported `getFacetedRowModel` function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-faceting#getfacetedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-faceting)\n   */\n  getFacetedRowModel: () => RowModel<TData>\n  /**\n   * A function that **computes and returns** a `Map` of unique values and their occurrences derived from `column.getFacetedRowModel`. Useful for displaying faceted result values.\n   * > ⚠️ Requires that you pass a valid `getFacetedUniqueValues` function to `options.getFacetedUniqueValues`. A default implementation is provided via the exported `getFacetedUniqueValues` function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-faceting#getfaceteduniquevalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-faceting)\n   */\n  getFacetedUniqueValues: () => Map<any, number>\n}\n\nexport interface FacetedOptions<TData extends RowData> {\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n}\n\n//\n\nexport const ColumnFaceting: TableFeature = {\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column._getFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, column.id)\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return column._getFacetedRowModel()\n    }\n    column._getFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, column.id)\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return column._getFacetedUniqueValues()\n    }\n    column._getFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, column.id)\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined\n      }\n\n      return column._getFacetedMinMaxValues()\n    }\n  },\n}\n", "import { FilterFn } from './features/ColumnFiltering'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(\n    val => row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n", "import { RowModel } from '..'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  FilterFns,\n  FilterMeta,\n  OnChangeFn,\n  Row,\n  RowData,\n  Table,\n  TableFeature,\n  Updater,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface ColumnFiltersTableState {\n  columnFilters: ColumnFiltersState\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  filterFn: FilterFn<TData>\n  id: string\n  resolvedValue: unknown\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n  resolveFilterValue?: TransformFilterValueFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface ColumnFiltersColumnDef<TData extends RowData> {\n  /**\n   * Enables/disables the **column** filter for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#enablecolumnfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  enableColumnFilter?: boolean\n  /**\n   * The filter function to use with this column. Can be the name of a built-in filter function or a custom filter function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#filterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  filterFn?: FilterFnOption<TData>\n}\n\nexport interface ColumnFiltersColumn<TData extends RowData> {\n  /**\n   * Returns an automatically calculated filter function for the column based off of the columns first known value.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getautofilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Returns whether or not the column can be **column** filtered.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getcanfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getCanFilter: () => boolean\n  /**\n   * Returns the filter function (either user-defined or automatic, depending on configuration) for the columnId specified.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Returns the index (including `-1`) of the column filter in the table's `state.columnFilters` array.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilterindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilterIndex: () => number\n  /**\n   * Returns the current filter value for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfiltervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilterValue: () => unknown\n  /**\n   * Returns whether or not the column is currently filtered.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getisfiltered)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getIsFiltered: () => boolean\n  /**\n   * A function that sets the current filter value for the column. You can pass it a value or an updater function for immutability-safe operations on existing values.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#setfiltervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  setFilterValue: (updater: Updater<any>) => void\n}\n\nexport interface ColumnFiltersRow<TData extends RowData> {\n  /**\n   * The column filters map for the row. This object tracks whether a row is passing/failing specific filters by their column ID.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#columnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  columnFilters: Record<string, boolean>\n  /**\n   * The column filters meta map for the row. This object tracks any filter meta for a row as optionally provided during the filtering process.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#columnfiltersmeta)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface ColumnFiltersOptionsBase<TData extends RowData> {\n  /**\n   * Enables/disables **column** filtering for all columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#enablecolumnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  enableColumnFilters?: boolean\n  /**\n   * Enables/disables all filtering for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#enablefilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  enableFilters?: boolean\n  /**\n   * By default, filtering is done from parent rows down (so if a parent row is filtered out, all of its children will be filtered out as well). Setting this option to `true` will cause filtering to be done from leaf rows up (which means parent rows will be included so long as one of their child or grand-child rows is also included).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#filterfromleafrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  filterFromLeafRows?: boolean\n  /**\n   * If provided, this function is called **once** per table and should return a **new function** which will calculate and return the row model for the table when it's filtered.\n   * - For server-side filtering, this function is unnecessary and can be ignored since the server should already return the filtered row model.\n   * - For client-side filtering, this function is required. A default implementation is provided via any table adapter's `{ getFilteredRowModel }` export.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilteredrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Disables the `getFilteredRowModel` from being used to filter data. This may be useful if your table needs to dynamically support both client-side and server-side filtering.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#manualfiltering)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  manualFiltering?: boolean\n  /**\n   * By default, filtering is done for all rows (max depth of 100), no matter if they are root level parent rows or the child leaf rows of a parent row. Setting this option to `0` will cause filtering to only be applied to the root level parent rows, with all sub-rows remaining unfiltered. Similarly, setting this option to `1` will cause filtering to only be applied to child leaf rows 1 level deep, and so on.\n\n   * This is useful for situations where you want a row's entire child hierarchy to be visible regardless of the applied filter.\n    * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#maxleafrowfilterdepth)\n    * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  maxLeafRowFilterDepth?: number\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnFilters` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#oncolumnfilterschange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface ColumnFiltersOptions<TData extends RowData>\n  extends ColumnFiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface ColumnFiltersInstance<TData extends RowData> {\n  _getFilteredRowModel?: () => RowModel<TData>\n  /**\n   * Returns the row model for the table after **column** filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilteredrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilteredRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any **column** filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getprefilteredrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getPreFilteredRowModel: () => RowModel<TData>\n  /**\n   * Resets the **columnFilters** state to `initialState.columnFilters`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#resetcolumnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  resetColumnFilters: (defaultState?: boolean) => void\n  /**\n   * Resets the **globalFilter** state to `initialState.globalFilter`, or `true` can be passed to force a default blank state reset to `undefined`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#resetglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  resetGlobalFilter: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnFilters` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#setcolumnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n  /**\n   * Sets or updates the `state.globalFilter` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#setglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  setGlobalFilter: (updater: Updater<any>) => void\n}\n\n//\n\nexport const ColumnFiltering: TableFeature = {\n  getDefaultColumnDef: <\n    TData extends RowData,\n  >(): ColumnFiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): ColumnFiltersTableState => {\n    return {\n      columnFilters: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnFiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n    } as ColumnFiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return filterFns.includesString\n      }\n\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange\n      }\n\n      if (typeof value === 'boolean') {\n        return filterFns.equals\n      }\n\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals\n      }\n\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes\n      }\n\n      return filterFns.weakEquals\n    }\n    column.getFilterFn = () => {\n      return isFunction(column.columnDef.filterFn)\n        ? column.columnDef.filterFn\n        : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : // @ts-ignore\n            table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n    }\n    column.getCanFilter = () => {\n      return (\n        (column.columnDef.enableColumnFilter ?? true) &&\n        (table.options.enableColumnFilters ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsFiltered = () => column.getFilterIndex() > -1\n\n    column.getFilterValue = () =>\n      table.getState().columnFilters?.find(d => d.id === column.id)?.value\n\n    column.getFilterIndex = () =>\n      table.getState().columnFilters?.findIndex(d => d.id === column.id) ?? -1\n\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn()\n        const previousFilter = old?.find(d => d.id === column.id)\n\n        const newFilter = functionalUpdate(\n          value,\n          previousFilter ? previousFilter.value : undefined\n        )\n\n        //\n        if (\n          shouldAutoRemoveFilter(filterFn as FilterFn<TData>, newFilter, column)\n        ) {\n          return old?.filter(d => d.id !== column.id) ?? []\n        }\n\n        const newFilterObj = { id: column.id, value: newFilter }\n\n        if (previousFilter) {\n          return (\n            old?.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj\n              }\n              return d\n            }) ?? []\n          )\n        }\n\n        if (old?.length) {\n          return [...old, newFilterObj]\n        }\n\n        return [newFilterObj]\n      })\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    _table: Table<TData>\n  ): void => {\n    row.columnFilters = {}\n    row.columnFiltersMeta = {}\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnFilters = (updater: Updater<ColumnFiltersState>) => {\n      const leafColumns = table.getAllLeafColumns()\n\n      const updateFn = (old: ColumnFiltersState) => {\n        return functionalUpdate(updater, old)?.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id)\n\n          if (column) {\n            const filterFn = column.getFilterFn()\n\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false\n            }\n          }\n\n          return true\n        })\n      }\n\n      table.options.onColumnFiltersChange?.(updateFn)\n    }\n\n    table.resetColumnFilters = defaultState => {\n      table.setColumnFilters(\n        defaultState ? [] : table.initialState?.columnFilters ?? []\n      )\n    }\n\n    table.getPreFilteredRowModel = () => table.getCoreRowModel()\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n      }\n\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getFilteredRowModel()\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n", "import { AggregationFn } from './features/ColumnGrouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n", "import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport {\n  AggregationFns,\n  Cell,\n  Column,\n  ColumnDefTemplate,\n  OnChangeFn,\n  Row,\n  RowData,\n  Table,\n  TableFeature,\n  Updater,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  /**\n   * The cell to display each row for the column if the cell is an aggregate. If a function is passed, it will be passed a props object with the context of the cell and should return the property type for your adapter (the exact type depends on the adapter being used).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#aggregatedcell)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  /**\n   * The resolved aggregation function for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#aggregationfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  aggregationFn?: AggregationFnOption<TData>\n  /**\n   * Enables/disables grouping for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#enablegrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  enableGrouping?: boolean\n  /**\n   * Specify a value to be used for grouping rows on this column. If this option is not specified, the value derived from `accessorKey` / `accessorFn` will be used instead.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupingvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  /**\n   * Returns the aggregation function for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getaggregationfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getAggregationFn: () => AggregationFn<TData> | undefined\n  /**\n   * Returns the automatically inferred aggregation function for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getautoaggregationfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  /**\n   * Returns whether or not the column can be grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getcangroup)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getCanGroup: () => boolean\n  /**\n   * Returns the index of the column in the grouping state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupedindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupedIndex: () => number\n  /**\n   * Returns whether or not the column is currently grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisgrouped)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsGrouped: () => boolean\n  /**\n   * Returns a function that toggles the grouping state of the column. This is useful for passing to the `onClick` prop of a button.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#gettogglegroupinghandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getToggleGroupingHandler: () => () => void\n  /**\n   * Toggles the grouping state of the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#togglegrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  toggleGrouping: () => void\n}\n\nexport interface GroupingRow {\n  _groupingValuesCache: Record<string, any>\n  /**\n   * Returns the grouping value for any row and column (including leaf rows).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupingvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupingValue: (columnId: string) => unknown\n  /**\n   * Returns whether or not the row is currently grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisgrouped)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsGrouped: () => boolean\n  /**\n   * If this row is grouped, this is the id of the column that this row is grouped by.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#groupingcolumnid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  groupingColumnId?: string\n  /**\n   * If this row is grouped, this is the unique/shared value for the `groupingColumnId` for all of the rows in this group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#groupingvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  groupingValue?: unknown\n}\n\nexport interface GroupingCell {\n  /**\n   * Returns whether or not the cell is currently aggregated.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisaggregated)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsAggregated: () => boolean\n  /**\n   * Returns whether or not the cell is currently grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisgrouped)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsGrouped: () => boolean\n  /**\n   * Returns whether or not the cell is currently a placeholder cell.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisplaceholder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsPlaceholder: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  enableGrouping: boolean\n  onGroupingChange: OnChangeFn<GroupingState>\n}\n\ninterface GroupingOptionsBase {\n  /**\n   * Enables/disables grouping for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#enablegrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  enableGrouping?: boolean\n  /**\n   * Returns the row model after grouping has taken place, but no further.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Grouping columns are automatically reordered by default to the start of the columns list. If you would rather remove them or leave them as-is, set the appropriate mode here.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#groupedcolumnmode)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  groupedColumnMode?: false | 'reorder' | 'remove'\n  /**\n   * Enables manual grouping. If this option is set to `true`, the table will not automatically group rows using `getGroupedRowModel()` and instead will expect you to manually group the rows before passing them to the table. This is useful if you are doing server-side grouping and aggregation.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#manualgrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  manualGrouping?: boolean\n  /**\n   * If this function is provided, it will be called when the grouping state changes and you will be expected to manage the state yourself. You can pass the managed state back to the table via the `tableOptions.state.grouping` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#ongroupingchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  onGroupingChange?: OnChangeFn<GroupingState>\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  _getGroupedRowModel?: () => RowModel<TData>\n  /**\n   * Returns the row model for the table after grouping has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any grouping has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getpregroupedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getPreGroupedRowModel: () => RowModel<TData>\n  /**\n   * Resets the **grouping** state to `initialState.grouping`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#resetgrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  resetGrouping: (defaultState?: boolean) => void\n  /**\n   * Updates the grouping state of the table via an update function or value.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#setgrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  setGrouping: (updater: Updater<GroupingState>) => void\n}\n\n//\n\nexport const ColumnGrouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old?.includes(column.id)) {\n          return old.filter(d => d !== column.id)\n        }\n\n        return [...(old ?? []), column.id]\n      })\n    }\n\n    column.getCanGroup = () => {\n      return (\n        (column.columnDef.enableGrouping ?? true) &&\n        (table.options.enableGrouping ?? true) &&\n        (!!column.accessorFn || !!column.columnDef.getGroupingValue)\n      )\n    }\n\n    column.getIsGrouped = () => {\n      return table.getState().grouping?.includes(column.id)\n    }\n\n    column.getGroupedIndex = () => table.getState().grouping?.indexOf(column.id)\n\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup()\n\n      return () => {\n        if (!canGroup) return\n        column.toggleGrouping()\n      }\n    }\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'number') {\n        return aggregationFns.sum\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent\n      }\n    }\n    column.getAggregationFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.aggregationFn)\n        ? column.columnDef.aggregationFn\n        : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setGrouping = updater => table.options.onGroupingChange?.(updater)\n\n    table.resetGrouping = defaultState => {\n      table.setGrouping(defaultState ? [] : table.initialState?.grouping ?? [])\n    }\n\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel()\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n      }\n\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel()\n      }\n\n      return table._getGroupedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getIsGrouped = () => !!row.groupingColumnId\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.columnDef.getGroupingValue) {\n        return row.getValue(columnId)\n      }\n\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n        row.original\n      )\n\n      return row._groupingValuesCache[columnId]\n    }\n    row._groupingValuesCache = {}\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    cell.getIsGrouped = () =>\n      column.getIsGrouped() && column.id === row.groupingColumnId\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped()\n    cell.getIsAggregated = () =>\n      !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!row.subRows?.length\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n", "import { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nimport {\n  Column,\n  OnChangeFn,\n  RowData,\n  Table,\n  TableFeature,\n  Updater,\n} from '../types'\n\nimport { orderColumns } from './ColumnGrouping'\nimport { ColumnPinningPosition, _getVisibleLeafColumns } from '..'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnOrder` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#oncolumnorderchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderColumn {\n  /**\n   * Returns the index of the column in the order of the visible columns. Optionally pass a `position` parameter to get the index of the column in a sub-section of the table\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#getindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  getIndex: (position?: ColumnPinningPosition | 'center') => number\n  /**\n   * Returns `true` if the column is the first column in the order of the visible columns. Optionally pass a `position` parameter to check if the column is the first in a sub-section of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#getisfirstcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  getIsFirstColumn: (position?: ColumnPinningPosition | 'center') => boolean\n  /**\n   * Returns `true` if the column is the last column in the order of the visible columns. Optionally pass a `position` parameter to check if the column is the last in a sub-section of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#getislastcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  getIsLastColumn: (position?: ColumnPinningPosition | 'center') => boolean\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n  /**\n   * Resets the **columnOrder** state to `initialState.columnOrder`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#resetcolumnorder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  resetColumnOrder: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnOrder` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#setcolumnorder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n}\n\n//\n\nexport const ColumnOrdering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getIndex = memo(\n      position => [_getVisibleLeafColumns(table, position)],\n      columns => columns.findIndex(d => d.id === column.id),\n      getMemoOptions(table.options, 'debugColumns', 'getIndex')\n    )\n    column.getIsFirstColumn = position => {\n      const columns = _getVisibleLeafColumns(table, position)\n      return columns[0]?.id === column.id\n    }\n    column.getIsLastColumn = position => {\n      const columns = _getVisibleLeafColumns(table, position)\n      return columns[columns.length - 1]?.id === column.id\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnOrder = updater =>\n      table.options.onColumnOrderChange?.(updater)\n    table.resetColumnOrder = defaultState => {\n      table.setColumnOrder(\n        defaultState ? [] : table.initialState.columnOrder ?? []\n      )\n    }\n    table._getOrderColumnsFn = memo(\n      () => [\n        table.getState().columnOrder,\n        table.getState().grouping,\n        table.options.groupedColumnMode,\n      ],\n      (columnOrder, grouping, groupedColumnMode) =>\n        (columns: Column<TData, unknown>[]) => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n      getMemoOptions(table.options, 'debugTable', '_getOrderColumnsFn')\n    )\n  },\n}\n", "import {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  /**\n   * Enables/disables column pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#enablecolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  enableColumnPinning?: boolean\n  /**\n   * @deprecated Use `enableColumnPinning` or `enableRowPinning` instead.\n   * Enables/disables all pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#enablepinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  enablePinning?: boolean\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnPinning` changes. This overrides the default internal state management, so you will also need to supply `state.columnPinning` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#oncolumnpinningchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/oncolumnpinningchange)\n   */\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  /**\n   * Enables/disables column pinning for this column. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#enablepinning-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  /**\n   * Returns whether or not the column can be pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getcanpin)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getCanPin: () => boolean\n  /**\n   * Returns the pinned position of the column. (`'left'`, `'right'` or `false`)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getispinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getIsPinned: () => ColumnPinningPosition\n  /**\n   * Returns the numeric pinned index of the column within a pinned column group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getpinnedindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getPinnedIndex: () => number\n  /**\n   * Pins a column to the `'left'` or `'right'`, or unpins the column to the center if `false` is passed.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#pin)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  /**\n   * Returns all center pinned (unpinned) leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getcentervisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns all left pinned leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getleftvisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns all right pinned leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getrightvisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  /**\n   * Returns all center pinned (unpinned) leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getcenterleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns whether or not any columns are pinned. Optionally specify to only check for pinned columns in either the `left` or `right` position.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getissomecolumnspinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  /**\n   * Returns all left pinned leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getleftleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns all right pinned leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getrightleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Resets the **columnPinning** state to `initialState.columnPinning`, or `true` can be passed to force a default blank state reset to `{ left: [], right: [], }`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#resetcolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  resetColumnPinning: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnPinning` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#setcolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n}\n\n//\n\nconst getDefaultColumnPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const ColumnPinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultColumnPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.pin = position => {\n      const columnIds = column\n        .getLeafColumns()\n        .map(d => d.id)\n        .filter(Boolean) as string[]\n\n      table.setColumnPinning(old => {\n        if (position === 'right') {\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: [\n              ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n          }\n        }\n\n        if (position === 'left') {\n          return {\n            left: [\n              ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        }\n\n        return {\n          left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n          right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n        }\n      })\n    }\n\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns()\n\n      return leafColumns.some(\n        d =>\n          (d.columnDef.enablePinning ?? true) &&\n          (table.options.enableColumnPinning ??\n            table.options.enablePinning ??\n            true)\n      )\n    }\n\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n      const { left, right } = table.getState().columnPinning\n\n      const isLeft = leafColumnIds.some(d => left?.includes(d))\n      const isRight = leafColumnIds.some(d => right?.includes(d))\n\n      return isLeft ? 'left' : isRight ? 'right' : false\n    }\n\n    column.getPinnedIndex = () => {\n      const position = column.getIsPinned()\n\n      return position\n        ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n        : 0\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getCenterVisibleCells = memo(\n      () => [\n        row._getAllVisibleCells(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allCells, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allCells.filter(d => !leftAndRight.includes(d.column.id))\n      },\n      getMemoOptions(table.options, 'debugRows', 'getCenterVisibleCells')\n    )\n    row.getLeftVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.left],\n      (allCells, left) => {\n        const cells = (left ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'left' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      getMemoOptions(table.options, 'debugRows', 'getLeftVisibleCells')\n    )\n    row.getRightVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n      (allCells, right) => {\n        const cells = (right ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'right' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      getMemoOptions(table.options, 'debugRows', 'getRightVisibleCells')\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnPinning = updater =>\n      table.options.onColumnPinningChange?.(updater)\n\n    table.resetColumnPinning = defaultState =>\n      table.setColumnPinning(\n        defaultState\n          ? getDefaultColumnPinningState()\n          : table.initialState?.columnPinning ?? getDefaultColumnPinningState()\n      )\n\n    table.getIsSomeColumnsPinned = position => {\n      const pinningState = table.getState().columnPinning\n\n      if (!position) {\n        return Boolean(pinningState.left?.length || pinningState.right?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table.getLeftLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n      (allColumns, left) => {\n        return (left ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getLeftLeafColumns')\n    )\n\n    table.getRightLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n      (allColumns, right) => {\n        return (right ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getRightLeafColumns')\n    )\n\n    table.getCenterLeafColumns = memo(\n      () => [\n        table.getAllLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allColumns.filter(d => !leftAndRight.includes(d.id))\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getCenterLeafColumns')\n    )\n  },\n}\n", "import { _getVisibleLeafColumns } from '..'\nimport {\n  RowData,\n  Column,\n  Header,\n  OnChangeFn,\n  Table,\n  Updater,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\nimport { ColumnPinningPosition } from './ColumnPinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  columnSizingStart: [string, number][]\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  startOffset: null | number\n  startSize: null | number\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnResizeDirection = 'ltr' | 'rtl'\n\nexport interface ColumnSizingOptions {\n  /**\n   * Determines when the columnSizing state is updated. `onChange` updates the state when the user is dragging the resize handle. `onEnd` updates the state when the user releases the resize handle.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#columnresizemode)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  columnResizeMode?: ColumnResizeMode\n  /**\n   * Enables or disables column resizing for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#enablecolumnresizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  enableColumnResizing?: boolean\n  /**\n   * Enables or disables right-to-left support for resizing the column. defaults to 'ltr'.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#columnResizeDirection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  columnResizeDirection?: ColumnResizeDirection\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnSizing` changes. This overrides the default internal state management, so you will also need to supply `state.columnSizing` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#oncolumnsizingchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnSizingInfo` changes. This overrides the default internal state management, so you will also need to supply `state.columnSizingInfo` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#oncolumnsizinginfochange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = Pick<\n  ColumnSizingOptions,\n  | 'columnResizeMode'\n  | 'onColumnSizingChange'\n  | 'onColumnSizingInfoChange'\n  | 'columnResizeDirection'\n>\n\nexport interface ColumnSizingInstance {\n  /**\n   * If pinning, returns the total size of the center portion of the table by calculating the sum of the sizes of all unpinned/center leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getcentertotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getCenterTotalSize: () => number\n  /**\n   * Returns the total size of the left portion of the table by calculating the sum of the sizes of all left leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getlefttotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getLeftTotalSize: () => number\n  /**\n   * Returns the total size of the right portion of the table by calculating the sum of the sizes of all right leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getrighttotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getRightTotalSize: () => number\n  /**\n   * Returns the total size of the table by calculating the sum of the sizes of all leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#gettotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getTotalSize: () => number\n  /**\n   * Resets column sizing to its initial state. If `defaultState` is `true`, the default state for the table will be used instead of the initialValue provided to the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#resetcolumnsizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  resetColumnSizing: (defaultState?: boolean) => void\n  /**\n   * Resets column sizing info to its initial state. If `defaultState` is `true`, the default state for the table will be used instead of the initialValue provided to the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#resetheadersizeinfo)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  /**\n   * Sets the column sizing state using an updater function or a value. This will trigger the underlying `onColumnSizingChange` function if one is passed to the table options, otherwise the state will be managed automatically by the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#setcolumnsizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  /**\n   * Sets the column sizing info state using an updater function or a value. This will trigger the underlying `onColumnSizingInfoChange` function if one is passed to the table options, otherwise the state will be managed automatically by the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#setcolumnsizinginfo)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n}\n\nexport interface ColumnSizingColumnDef {\n  /**\n   * Enables or disables column resizing for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#enableresizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  enableResizing?: boolean\n  /**\n   * The maximum allowed size for the column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#maxsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  maxSize?: number\n  /**\n   * The minimum allowed size for the column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#minsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  minSize?: number\n  /**\n   * The desired size for the column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#size)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  size?: number\n}\n\nexport interface ColumnSizingColumn {\n  /**\n   * Returns `true` if the column can be resized.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getcanresize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getCanResize: () => boolean\n  /**\n   * Returns `true` if the column is currently being resized.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getisresizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getIsResizing: () => boolean\n  /**\n   * Returns the current size of the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getSize: () => number\n  /**\n   * Returns the offset measurement along the row-axis (usually the x-axis for standard tables) for the header. This is effectively a sum of the offset measurements of all preceding (left) headers in relation to the current column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getstart)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getStart: (position?: ColumnPinningPosition | 'center') => number\n  /**\n   * Returns the offset measurement along the row-axis (usually the x-axis for standard tables) for the header. This is effectively a sum of the offset measurements of all succeeding (right) headers in relation to the current column.\n   */\n  getAfter: (position?: ColumnPinningPosition | 'center') => number\n  /**\n   * Resets the column to its initial size.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#resetsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  /**\n   * Returns an event handler function that can be used to resize the header. It can be used as an:\n   * - `onMouseDown` handler\n   * - `onTouchStart` handler\n   *\n   * The dragging and release events are automatically handled for you.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getresizehandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getResizeHandler: (context?: Document) => (event: unknown) => void\n  /**\n   * Returns the current size of the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getSize: () => number\n  /**\n   * Returns the offset measurement along the row-axis (usually the x-axis for standard tables) for the header. This is effectively a sum of the offset measurements of all preceding headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getstart)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getStart: (position?: ColumnPinningPosition) => number\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      columnResizeDirection: 'ltr',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getSize = () => {\n      const columnSize = table.getState().columnSizing[column.id]\n\n      return Math.min(\n        Math.max(\n          column.columnDef.minSize ?? defaultColumnSizing.minSize,\n          columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n        ),\n        column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n      )\n    }\n\n    column.getStart = memo(\n      position => [\n        position,\n        _getVisibleLeafColumns(table, position),\n        table.getState().columnSizing,\n      ],\n      (position, columns) =>\n        columns\n          .slice(0, column.getIndex(position))\n          .reduce((sum, column) => sum + column.getSize(), 0),\n      getMemoOptions(table.options, 'debugColumns', 'getStart')\n    )\n\n    column.getAfter = memo(\n      position => [\n        position,\n        _getVisibleLeafColumns(table, position),\n        table.getState().columnSizing,\n      ],\n      (position, columns) =>\n        columns\n          .slice(column.getIndex(position) + 1)\n          .reduce((sum, column) => sum + column.getSize(), 0),\n      getMemoOptions(table.options, 'debugColumns', 'getAfter')\n    )\n\n    column.resetSize = () => {\n      table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n        return rest\n      })\n    }\n    column.getCanResize = () => {\n      return (\n        (column.columnDef.enableResizing ?? true) &&\n        (table.options.enableColumnResizing ?? true)\n      )\n    }\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    header.getSize = () => {\n      let sum = 0\n\n      const recurse = (header: Header<TData, TValue>) => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse)\n        } else {\n          sum += header.column.getSize() ?? 0\n        }\n      }\n\n      recurse(header)\n\n      return sum\n    }\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1]!\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n      }\n\n      return 0\n    }\n    header.getResizeHandler = _contextDocument => {\n      const column = table.getColumn(header.column.id)\n      const canResize = column?.getCanResize()\n\n      return (e: unknown) => {\n        if (!column || !canResize) {\n          return\n        }\n\n        ;(e as any).persist?.()\n\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return\n          }\n        }\n\n        const startSize = header.getSize()\n\n        const columnSizingStart: [string, number][] = header\n          ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()])\n          : [[column.id, column.getSize()]]\n\n        const clientX = isTouchStartEvent(e)\n          ? Math.round(e.touches[0]!.clientX)\n          : (e as MouseEvent).clientX\n\n        const newColumnSizing: ColumnSizingState = {}\n\n        const updateOffset = (\n          eventType: 'move' | 'end',\n          clientXPos?: number\n        ) => {\n          if (typeof clientXPos !== 'number') {\n            return\n          }\n\n          table.setColumnSizingInfo(old => {\n            const deltaDirection =\n              table.options.columnResizeDirection === 'rtl' ? -1 : 1\n            const deltaOffset =\n              (clientXPos - (old?.startOffset ?? 0)) * deltaDirection\n            const deltaPercentage = Math.max(\n              deltaOffset / (old?.startSize ?? 0),\n              -0.999999\n            )\n\n            old.columnSizingStart.forEach(([columnId, headerSize]) => {\n              newColumnSizing[columnId] =\n                Math.round(\n                  Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                ) / 100\n            })\n\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage,\n            }\n          })\n\n          if (\n            table.options.columnResizeMode === 'onChange' ||\n            eventType === 'end'\n          ) {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing,\n            }))\n          }\n        }\n\n        const onMove = (clientXPos?: number) => updateOffset('move', clientXPos)\n\n        const onEnd = (clientXPos?: number) => {\n          updateOffset('end', clientXPos)\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: [],\n          }))\n        }\n\n        const contextDocument =\n          _contextDocument || typeof document !== 'undefined' ? document : null\n\n        const mouseEvents = {\n          moveHandler: (e: MouseEvent) => onMove(e.clientX),\n          upHandler: (e: MouseEvent) => {\n            contextDocument?.removeEventListener(\n              'mousemove',\n              mouseEvents.moveHandler\n            )\n            contextDocument?.removeEventListener(\n              'mouseup',\n              mouseEvents.upHandler\n            )\n            onEnd(e.clientX)\n          },\n        }\n\n        const touchEvents = {\n          moveHandler: (e: TouchEvent) => {\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onMove(e.touches[0]!.clientX)\n            return false\n          },\n          upHandler: (e: TouchEvent) => {\n            contextDocument?.removeEventListener(\n              'touchmove',\n              touchEvents.moveHandler\n            )\n            contextDocument?.removeEventListener(\n              'touchend',\n              touchEvents.upHandler\n            )\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onEnd(e.touches[0]?.clientX)\n          },\n        }\n\n        const passiveIfSupported = passiveEventSupported()\n          ? { passive: false }\n          : false\n\n        if (isTouchStartEvent(e)) {\n          contextDocument?.addEventListener(\n            'touchmove',\n            touchEvents.moveHandler,\n            passiveIfSupported\n          )\n          contextDocument?.addEventListener(\n            'touchend',\n            touchEvents.upHandler,\n            passiveIfSupported\n          )\n        } else {\n          contextDocument?.addEventListener(\n            'mousemove',\n            mouseEvents.moveHandler,\n            passiveIfSupported\n          )\n          contextDocument?.addEventListener(\n            'mouseup',\n            mouseEvents.upHandler,\n            passiveIfSupported\n          )\n        }\n\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id,\n        }))\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnSizing = updater =>\n      table.options.onColumnSizingChange?.(updater)\n    table.setColumnSizingInfo = updater =>\n      table.options.onColumnSizingInfoChange?.(updater)\n    table.resetColumnSizing = defaultState => {\n      table.setColumnSizing(\n        defaultState ? {} : table.initialState.columnSizing ?? {}\n      )\n    }\n    table.resetHeaderSizeInfo = defaultState => {\n      table.setColumnSizingInfo(\n        defaultState\n          ? getDefaultColumnSizingInfoState()\n          : table.initialState.columnSizingInfo ??\n              getDefaultColumnSizingInfoState()\n      )\n    }\n    table.getTotalSize = () =>\n      table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getLeftTotalSize = () =>\n      table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getCenterTotalSize = () =>\n      table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getRightTotalSize = () =>\n      table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n", "import { ColumnPinningPosition } from '..'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  /**\n   * Whether to enable column hiding. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#enablehiding)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  enableHiding?: boolean\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnVisibility` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#oncolumnvisibilitychange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityDefaultOptions = Pick<\n  VisibilityOptions,\n  'onColumnVisibilityChange'\n>\n\nexport interface VisibilityInstance<TData extends RowData> {\n  /**\n   * If column pinning, returns a flat array of leaf-node columns that are visible in the unpinned/center portion of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getcentervisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns whether all columns are visible\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getisallcolumnsvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getIsAllColumnsVisible: () => boolean\n  /**\n   * Returns whether any columns are visible\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getissomecolumnsvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getIsSomeColumnsVisible: () => boolean\n  /**\n   * If column pinning, returns a flat array of leaf-node columns that are visible in the left portion of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getleftvisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * If column pinning, returns a flat array of leaf-node columns that are visible in the right portion of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getrightvisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns a handler for toggling the visibility of all columns, meant to be bound to a `input[type=checkbox]` element.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#gettoggleallcolumnsvisibilityhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n  /**\n   * Returns a flat array of columns that are visible, including parent columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getvisibleflatcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns a flat array of leaf-node columns that are visible.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getvisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Resets the column visibility state to the initial state. If `defaultState` is provided, the state will be reset to `{}`\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#resetcolumnvisibility)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  resetColumnVisibility: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnVisibility` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#setcolumnvisibility)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  /**\n   * Toggles the visibility of all columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#toggleallcolumnsvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  toggleAllColumnsVisible: (value?: boolean) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns an array of cells that account for column visibility for the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getvisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  /**\n   * Returns whether the column can be hidden\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getcanhide)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getCanHide: () => boolean\n  /**\n   * Returns whether the column is visible\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getisvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getIsVisible: () => boolean\n  /**\n   * Returns a function that can be used to toggle the column visibility. This function can be used to bind to an event handler to a checkbox.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#gettogglevisibilityhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getToggleVisibilityHandler: () => (event: unknown) => void\n  /**\n   * Toggles the visibility of the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#togglevisibility)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  toggleVisibility: (value?: boolean) => void\n}\n\n//\n\nexport const ColumnVisibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value ?? !column.getIsVisible(),\n        }))\n      }\n    }\n    column.getIsVisible = () => {\n      const childColumns = column.columns\n      return (\n        (childColumns.length\n          ? childColumns.some(c => c.getIsVisible())\n          : table.getState().columnVisibility?.[column.id]) ?? true\n      )\n    }\n\n    column.getCanHide = () => {\n      return (\n        (column.columnDef.enableHiding ?? true) &&\n        (table.options.enableHiding ?? true)\n      )\n    }\n    column.getToggleVisibilityHandler = () => {\n      return (e: unknown) => {\n        column.toggleVisibility?.(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row._getAllVisibleCells = memo(\n      () => [row.getAllCells(), table.getState().columnVisibility],\n      cells => {\n        return cells.filter(cell => cell.column.getIsVisible())\n      },\n      getMemoOptions(table.options, 'debugRows', '_getAllVisibleCells')\n    )\n    row.getVisibleCells = memo(\n      () => [\n        row.getLeftVisibleCells(),\n        row.getCenterVisibleCells(),\n        row.getRightVisibleCells(),\n      ],\n      (left, center, right) => [...left, ...center, ...right],\n      getMemoOptions(table.options, 'debugRows', 'getVisibleCells')\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        getMemoOptions(table.options, 'debugColumns', key)\n      )\n    }\n\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod(\n      'getVisibleFlatColumns',\n      () => table.getAllFlatColumns()\n    )\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getVisibleLeafColumns',\n      () => table.getAllLeafColumns()\n    )\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getLeftVisibleLeafColumns',\n      () => table.getLeftLeafColumns()\n    )\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getRightVisibleLeafColumns',\n      () => table.getRightLeafColumns()\n    )\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getCenterVisibleLeafColumns',\n      () => table.getCenterLeafColumns()\n    )\n\n    table.setColumnVisibility = updater =>\n      table.options.onColumnVisibilityChange?.(updater)\n\n    table.resetColumnVisibility = defaultState => {\n      table.setColumnVisibility(\n        defaultState ? {} : table.initialState.columnVisibility ?? {}\n      )\n    }\n\n    table.toggleAllColumnsVisible = value => {\n      value = value ?? !table.getIsAllColumnsVisible()\n\n      table.setColumnVisibility(\n        table.getAllLeafColumns().reduce(\n          (obj, column) => ({\n            ...obj,\n            [column.id]: !value ? !column.getCanHide?.() : value,\n          }),\n          {}\n        )\n      )\n    }\n\n    table.getIsAllColumnsVisible = () =>\n      !table.getAllLeafColumns().some(column => !column.getIsVisible?.())\n\n    table.getIsSomeColumnsVisible = () =>\n      table.getAllLeafColumns().some(column => column.getIsVisible?.())\n\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllColumnsVisible(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n\nexport function _getVisibleLeafColumns<TData extends RowData>(\n  table: Table<TData>,\n  position?: ColumnPinningPosition | 'center'\n) {\n  return !position\n    ? table.getVisibleLeafColumns()\n    : position === 'center'\n      ? table.getCenterVisibleLeafColumns()\n      : position === 'left'\n        ? table.getLeftVisibleLeafColumns()\n        : table.getRightVisibleLeafColumns()\n}\n", "import { RowModel } from '..'\nimport { Table, RowData, TableFeature } from '../types'\n\nexport interface GlobalFacetingInstance<TData extends RowData> {\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  /**\n   * Currently, this function returns the built-in `includesString` filter function. In future releases, it may return more dynamic filter functions based on the nature of the data provided.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-faceting#getglobalautofilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-faceting)\n   */\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  /**\n   * Returns the row model for the table after **global** filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-faceting#getglobalfacetedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-faceting)\n   */\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  /**\n   * Returns the faceted unique values for the global filter.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-faceting#getglobalfaceteduniquevalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-faceting)\n   */\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n}\n\n//\n\nexport const GlobalFaceting: TableFeature = {\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table._getGlobalFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, '__global__')\n\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getGlobalFacetedRowModel()\n    }\n\n    table._getGlobalFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, '__global__')\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return table._getGlobalFacetedUniqueValues()\n    }\n\n    table._getGlobalFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, '__global__')\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return\n      }\n\n      return table._getGlobalFacetedMinMaxValues()\n    }\n  },\n}\n", "import { FilterFn, FilterFnOption } from '..'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport interface GlobalFilterTableState {\n  globalFilter: any\n}\n\nexport interface GlobalFilterColumnDef {\n  /**\n   * Enables/disables the **global** filter for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#enableglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  enableGlobalFilter?: boolean\n}\n\nexport interface GlobalFilterColumn {\n  /**\n   * Returns whether or not the column can be **globally** filtered. Set to `false` to disable a column from being scanned during global filtering.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getcanglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getCanGlobalFilter: () => boolean\n}\n\nexport interface GlobalFilterOptions<TData extends RowData> {\n  /**\n   * Enables/disables **global** filtering for all columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#enableglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  enableGlobalFilter?: boolean\n  /**\n   * If provided, this function will be called with the column and should return `true` or `false` to indicate whether this column should be used for global filtering.\n   *\n   * This is useful if the column can contain data that is not `string` or `number` (i.e. `undefined`).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getcolumncanglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n  /**\n   * The filter function to use for global filtering.\n   * - A `string` referencing a built-in filter function\n   * - A `string` that references a custom filter functions provided via the `tableOptions.filterFns` option\n   * - A custom filter function\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#globalfilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  globalFilterFn?: FilterFnOption<TData>\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.globalFilter` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#onglobalfilterchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  onGlobalFilterChange?: OnChangeFn<any>\n}\n\nexport interface GlobalFilterInstance<TData extends RowData> {\n  /**\n   * Currently, this function returns the built-in `includesString` filter function. In future releases, it may return more dynamic filter functions based on the nature of the data provided.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getglobalautofilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Returns the filter function (either user-defined or automatic, depending on configuration) for the global filter.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getglobalfilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Resets the **globalFilter** state to `initialState.globalFilter`, or `true` can be passed to force a default blank state reset to `undefined`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#resetglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  resetGlobalFilter: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.globalFilter` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#setglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  setGlobalFilter: (updater: Updater<any>) => void\n}\n\n//\n\nexport const GlobalFiltering: TableFeature = {\n  getInitialState: (state): GlobalFilterTableState => {\n    return {\n      globalFilter: undefined,\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GlobalFilterOptions<TData> => {\n    return {\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as GlobalFilterOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getCanGlobalFilter = () => {\n      return (\n        (column.columnDef.enableGlobalFilter ?? true) &&\n        (table.options.enableGlobalFilter ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n        !!column.accessorFn\n      )\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString\n    }\n\n    table.getGlobalFilterFn = () => {\n      const { globalFilterFn: globalFilterFn } = table.options\n\n      return isFunction(globalFilterFn)\n        ? globalFilterFn\n        : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n    }\n\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange?.(updater)\n    }\n\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(\n        defaultState ? undefined : table.initialState.globalFilter\n      )\n    }\n  },\n}\n", "import { RowModel } from '..'\nimport {\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  /**\n   * Returns whether the row can be expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getcanexpand)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getCanExpand: () => boolean\n  /**\n   * Returns whether all parent rows of the row are expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisallparentsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsAllParentsExpanded: () => boolean\n  /**\n   * Returns whether the row is expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsExpanded: () => boolean\n  /**\n   * Returns a function that can be used to toggle the expanded state of the row. This function can be used to bind to an event handler to a button.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#gettoggleexpandedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getToggleExpandedHandler: () => () => void\n  /**\n   * Toggles the expanded state (or sets it if `expanded` is provided) for the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#toggleexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  toggleExpanded: (expanded?: boolean) => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  /**\n   * Enable this setting to automatically reset the expanded state of the table when expanding state changes.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#autoresetexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  autoResetExpanded?: boolean\n  /**\n   * Enable/disable expanding for all rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#enableexpanding)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  enableExpanding?: boolean\n  /**\n   * This function is responsible for returning the expanded row model. If this function is not provided, the table will not expand rows. You can use the default exported `getExpandedRowModel` function to get the expanded row model or implement your own.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getexpandedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * If provided, allows you to override the default behavior of determining whether a row is currently expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisrowexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  /**\n   * If provided, allows you to override the default behavior of determining whether a row can be expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getrowcanexpand)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  /**\n   * Enables manual row expansion. If this is set to `true`, `getExpandedRowModel` will not be used to expand rows and you would be expected to perform the expansion in your own data model. This is useful if you are doing server-side expansion.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#manualexpanding)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  manualExpanding?: boolean\n  /**\n   * This function is called when the `expanded` table state changes. If a function is provided, you will be responsible for managing this state on your own. To pass the managed state back to the table, use the `tableOptions.state.expanded` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#onexpandedchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  /**\n   * If `true` expanded rows will be paginated along with the rest of the table (which means expanded rows may span multiple pages). If `false` expanded rows will not be considered for pagination (which means expanded rows will always render on their parents page. This also means more rows will be rendered than the set page size)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#paginateexpandedrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  _getExpandedRowModel?: () => RowModel<TData>\n  /**\n   * Returns whether there are any rows that can be expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getcansomerowsexpand)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getCanSomeRowsExpand: () => boolean\n  /**\n   * Returns the maximum depth of the expanded rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getexpandeddepth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getExpandedDepth: () => number\n  /**\n   * Returns the row model after expansion has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getexpandedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getExpandedRowModel: () => RowModel<TData>\n  /**\n   * Returns whether all rows are currently expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisallrowsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsAllRowsExpanded: () => boolean\n  /**\n   * Returns whether there are any rows that are currently expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getissomerowsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsSomeRowsExpanded: () => boolean\n  /**\n   * Returns the row model before expansion has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getpreexpandedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getPreExpandedRowModel: () => RowModel<TData>\n  /**\n   * Returns a handler that can be used to toggle the expanded state of all rows. This handler is meant to be used with an `input[type=checkbox]` element.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#gettoggleallrowsexpandedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  /**\n   * Resets the expanded state of the table to the initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#resetexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  resetExpanded: (defaultState?: boolean) => void\n  /**\n   * Updates the expanded state of the table via an update function or value.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#setexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  /**\n   * Toggles the expanded state for all rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#toggleallrowsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n}\n\n//\n\nexport const RowExpanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetExpanded = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetExpanded ??\n        !table.options.manualExpanding\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetExpanded()\n          queued = false\n        })\n      }\n    }\n    table.setExpanded = updater => table.options.onExpandedChange?.(updater)\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded ?? !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true)\n      } else {\n        table.setExpanded({})\n      }\n    }\n    table.resetExpanded = defaultState => {\n      table.setExpanded(defaultState ? {} : table.initialState?.expanded ?? {})\n    }\n    table.getCanSomeRowsExpand = () => {\n      return table\n        .getPrePaginationRowModel()\n        .flatRows.some(row => row.getCanExpand())\n    }\n    table.getToggleAllRowsExpandedHandler = () => {\n      return (e: unknown) => {\n        ;(e as any).persist?.()\n        table.toggleAllRowsExpanded()\n      }\n    }\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded\n      return expanded === true || Object.values(expanded).some(Boolean)\n    }\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true\n      }\n\n      if (!Object.keys(expanded).length) {\n        return false\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false\n      }\n\n      // They must all be expanded :shrug:\n      return true\n    }\n    table.getExpandedDepth = () => {\n      let maxDepth = 0\n\n      const rowIds =\n        table.getState().expanded === true\n          ? Object.keys(table.getRowModel().rowsById)\n          : Object.keys(table.getState().expanded)\n\n      rowIds.forEach(id => {\n        const splitId = id.split('.')\n        maxDepth = Math.max(maxDepth, splitId.length)\n      })\n\n      return maxDepth\n    }\n    table.getPreExpandedRowModel = () => table.getSortedRowModel()\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n      }\n\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel()\n      }\n\n      return table._getExpandedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        const exists = old === true ? true : !!old?.[row.id]\n\n        let oldExpanded: ExpandedStateList = {}\n\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true\n          })\n        } else {\n          oldExpanded = old\n        }\n\n        expanded = expanded ?? !exists\n\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true,\n          }\n        }\n\n        if (exists && !expanded) {\n          const { [row.id]: _, ...rest } = oldExpanded\n          return rest\n        }\n\n        return old\n      })\n    }\n    row.getIsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      return !!(\n        table.options.getIsRowExpanded?.(row) ??\n        (expanded === true || expanded?.[row.id])\n      )\n    }\n    row.getCanExpand = () => {\n      return (\n        table.options.getRowCanExpand?.(row) ??\n        ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n      )\n    }\n    row.getIsAllParentsExpanded = () => {\n      let isFullyExpanded = true\n      let currentRow = row\n\n      while (isFullyExpanded && currentRow.parentId) {\n        currentRow = table.getRow(currentRow.parentId, true)\n        isFullyExpanded = currentRow.getIsExpanded()\n      }\n\n      return isFullyExpanded\n    }\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand()\n\n      return () => {\n        if (!canExpand) return\n        row.toggleExpanded()\n      }\n    }\n  },\n}\n", "import {\n  OnChangeFn,\n  Table,\n  RowModel,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport {\n  functionalUpdate,\n  getMemoOptions,\n  makeStateUpdater,\n  memo,\n} from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  /**\n   * If set to `true`, pagination will be reset to the first page when page-altering state changes eg. `data` is updated, filters change, grouping changes, etc.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#autoresetpageindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  autoResetPageIndex?: boolean\n  /**\n   * Returns the row model after pagination has taken place, but no further.\n   *\n   * Pagination columns are automatically reordered by default to the start of the columns list. If you would rather remove them or leave them as-is, set the appropriate mode here.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpaginationrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Enables manual pagination. If this option is set to `true`, the table will not automatically paginate rows using `getPaginationRowModel()` and instead will expect you to manually paginate the rows before passing them to the table. This is useful if you are doing server-side pagination and aggregation.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#manualpagination)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  manualPagination?: boolean\n  /**\n   * If this function is provided, it will be called when the pagination state changes and you will be expected to manage the state yourself. You can pass the managed state back to the table via the `tableOptions.state.pagination` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#onpaginationchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  onPaginationChange?: OnChangeFn<PaginationState>\n  /**\n   * When manually controlling pagination, you can supply a total `pageCount` value to the table if you know it (Or supply a `rowCount` and `pageCount` will be calculated). If you do not know how many pages there are, you can set this to `-1`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#pagecount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  pageCount?: number\n  /**\n   * When manually controlling pagination, you can supply a total `rowCount` value to the table if you know it. The `pageCount` can be calculated from this value and the `pageSize`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#rowcount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  rowCount?: number\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  _getPaginationRowModel?: () => RowModel<TData>\n  /**\n   * Returns whether the table can go to the next page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getcannextpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getCanNextPage: () => boolean\n  /**\n   * Returns whether the table can go to the previous page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getcanpreviouspage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getCanPreviousPage: () => boolean\n  /**\n   * Returns the page count. If manually paginating or controlling the pagination state, this will come directly from the `options.pageCount` table option, otherwise it will be calculated from the table data using the total row count and current page size.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpagecount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPageCount: () => number\n  /**\n   * Returns the row count. If manually paginating or controlling the pagination state, this will come directly from the `options.rowCount` table option, otherwise it will be calculated from the table data.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getrowcount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getRowCount: () => number\n  /**\n   * Returns an array of page options (zero-index-based) for the current page size.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpageoptions)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPageOptions: () => number[]\n  /**\n   * Returns the row model for the table after pagination has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpaginationrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPaginationRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any pagination has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getprepaginationrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPrePaginationRowModel: () => RowModel<TData>\n  /**\n   * Increments the page index by one, if possible.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#nextpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  nextPage: () => void\n  /**\n   * Decrements the page index by one, if possible.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#previouspage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  previousPage: () => void\n  /**\n   * Sets the page index to `0`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#firstpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  firstPage: () => void\n  /**\n   * Sets the page index to the last page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#lastpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  lastPage: () => void\n  /**\n   * Resets the page index to its initial state. If `defaultState` is `true`, the page index will be reset to `0` regardless of initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#resetpageindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  resetPageIndex: (defaultState?: boolean) => void\n  /**\n   * Resets the page size to its initial state. If `defaultState` is `true`, the page size will be reset to `10` regardless of initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#resetpagesize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  resetPageSize: (defaultState?: boolean) => void\n  /**\n   * Resets the **pagination** state to `initialState.pagination`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#resetpagination)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  resetPagination: (defaultState?: boolean) => void\n  /**\n   * @deprecated The page count no longer exists in the pagination state. Just pass as a table option instead.\n   */\n  setPageCount: (updater: Updater<number>) => void\n  /**\n   * Updates the page index using the provided function or value in the `state.pagination.pageIndex` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#setpageindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  setPageIndex: (updater: Updater<number>) => void\n  /**\n   * Updates the page size using the provided function or value in the `state.pagination.pageSize` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#setpagesize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  setPageSize: (updater: Updater<number>) => void\n  /**\n   * Sets or updates the `state.pagination` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#setpagination)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  setPagination: (updater: Updater<PaginationState>) => void\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const RowPagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetPageIndex = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetPageIndex ??\n        !table.options.manualPagination\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetPageIndex()\n          queued = false\n        })\n      }\n    }\n    table.setPagination = updater => {\n      const safeUpdater: Updater<PaginationState> = old => {\n        let newState = functionalUpdate(updater, old)\n\n        return newState\n      }\n\n      return table.options.onPaginationChange?.(safeUpdater)\n    }\n    table.resetPagination = defaultState => {\n      table.setPagination(\n        defaultState\n          ? getDefaultPaginationState()\n          : table.initialState.pagination ?? getDefaultPaginationState()\n      )\n    }\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n        const maxPageIndex =\n          typeof table.options.pageCount === 'undefined' ||\n          table.options.pageCount === -1\n            ? Number.MAX_SAFE_INTEGER\n            : table.options.pageCount - 1\n\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n        return {\n          ...old,\n          pageIndex,\n        }\n      })\n    }\n    table.resetPageIndex = defaultState => {\n      table.setPageIndex(\n        defaultState\n          ? defaultPageIndex\n          : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n      )\n    }\n    table.resetPageSize = defaultState => {\n      table.setPageSize(\n        defaultState\n          ? defaultPageSize\n          : table.initialState?.pagination?.pageSize ?? defaultPageSize\n      )\n    }\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n        const topRowIndex = old.pageSize * old.pageIndex!\n        const pageIndex = Math.floor(topRowIndex / pageSize)\n\n        return {\n          ...old,\n          pageIndex,\n          pageSize,\n        }\n      })\n    }\n    //deprecated\n    table.setPageCount = updater =>\n      table.setPagination(old => {\n        let newPageCount = functionalUpdate(\n          updater,\n          table.options.pageCount ?? -1\n        )\n\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount)\n        }\n\n        return {\n          ...old,\n          pageCount: newPageCount,\n        }\n      })\n\n    table.getPageOptions = memo(\n      () => [table.getPageCount()],\n      pageCount => {\n        let pageOptions: number[] = []\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n        }\n        return pageOptions\n      },\n      getMemoOptions(table.options, 'debugTable', 'getPageOptions')\n    )\n\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0\n\n    table.getCanNextPage = () => {\n      const { pageIndex } = table.getState().pagination\n\n      const pageCount = table.getPageCount()\n\n      if (pageCount === -1) {\n        return true\n      }\n\n      if (pageCount === 0) {\n        return false\n      }\n\n      return pageIndex < pageCount - 1\n    }\n\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1)\n    }\n\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1\n      })\n    }\n\n    table.firstPage = () => {\n      return table.setPageIndex(0)\n    }\n\n    table.lastPage = () => {\n      return table.setPageIndex(table.getPageCount() - 1)\n    }\n\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel()\n    table.getPaginationRowModel = () => {\n      if (\n        !table._getPaginationRowModel &&\n        table.options.getPaginationRowModel\n      ) {\n        table._getPaginationRowModel =\n          table.options.getPaginationRowModel(table)\n      }\n\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel()\n      }\n\n      return table._getPaginationRowModel()\n    }\n\n    table.getPageCount = () => {\n      return (\n        table.options.pageCount ??\n        Math.ceil(table.getRowCount() / table.getState().pagination.pageSize)\n      )\n    }\n\n    table.getRowCount = () => {\n      return (\n        table.options.rowCount ?? table.getPrePaginationRowModel().rows.length\n      )\n    }\n  },\n}\n", "import {\n  OnChangeFn,\n  Updater,\n  Table,\n  Row,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type RowPinningPosition = false | 'top' | 'bottom'\n\nexport interface RowPinningState {\n  bottom?: string[]\n  top?: string[]\n}\n\nexport interface RowPinningTableState {\n  rowPinning: RowPinningState\n}\n\nexport interface RowPinningOptions<TData extends RowData> {\n  /**\n   * Enables/disables row pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#enablerowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  enableRowPinning?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * When `false`, pinned rows will not be visible if they are filtered or paginated out of the table. When `true`, pinned rows will always be visible regardless of filtering or pagination. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#keeppinnedrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  keepPinnedRows?: boolean\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.rowPinning` changes. This overrides the default internal state management, so you will also need to supply `state.rowPinning` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#onrowpinningchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/onrowpinningchange)\n   */\n  onRowPinningChange?: OnChangeFn<RowPinningState>\n}\n\nexport interface RowPinningDefaultOptions {\n  onRowPinningChange: OnChangeFn<RowPinningState>\n}\n\nexport interface RowPinningRow {\n  /**\n   * Returns whether or not the row can be pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getcanpin-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getCanPin: () => boolean\n  /**\n   * Returns the pinned position of the row. (`'top'`, `'bottom'` or `false`)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getispinned-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getIsPinned: () => RowPinningPosition\n  /**\n   * Returns the numeric pinned index of the row within a pinned row group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getpinnedindex-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getPinnedIndex: () => number\n  /**\n   * Pins a row to the `'top'` or `'bottom'`, or unpins the row to the center if `false` is passed.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#pin-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  pin: (\n    position: RowPinningPosition,\n    includeLeafRows?: boolean,\n    includeParentRows?: boolean\n  ) => void\n}\n\nexport interface RowPinningInstance<TData extends RowData> {\n  _getPinnedRows: (position: 'top' | 'bottom') => Row<TData>[]\n  /**\n   * Returns all bottom pinned rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getbottomrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getBottomRows: () => Row<TData>[]\n  /**\n   * Returns all rows that are not pinned to the top or bottom.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getcenterrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getCenterRows: () => Row<TData>[]\n  /**\n   * Returns whether or not any rows are pinned. Optionally specify to only check for pinned rows in either the `top` or `bottom` position.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getissomerowspinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getIsSomeRowsPinned: (position?: RowPinningPosition) => boolean\n  /**\n   * Returns all top pinned rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#gettoprows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getTopRows: () => Row<TData>[]\n  /**\n   * Resets the **rowPinning** state to `initialState.rowPinning`, or `true` can be passed to force a default blank state reset to `{ top: [], bottom: [], }`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#resetrowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  resetRowPinning: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.rowPinning` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#setrowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  setRowPinning: (updater: Updater<RowPinningState>) => void\n}\n\n//\n\nconst getDefaultRowPinningState = (): RowPinningState => ({\n  top: [],\n  bottom: [],\n})\n\nexport const RowPinning: TableFeature = {\n  getInitialState: (state): RowPinningTableState => {\n    return {\n      rowPinning: getDefaultRowPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowPinningDefaultOptions => {\n    return {\n      onRowPinningChange: makeStateUpdater('rowPinning', table),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.pin = (position, includeLeafRows, includeParentRows) => {\n      const leafRowIds = includeLeafRows\n        ? row.getLeafRows().map(({ id }) => id)\n        : []\n      const parentRowIds = includeParentRows\n        ? row.getParentRows().map(({ id }) => id)\n        : []\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds])\n\n      table.setRowPinning(old => {\n        if (position === 'bottom') {\n          return {\n            top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n            bottom: [\n              ...(old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n              ...Array.from(rowIds),\n            ],\n          }\n        }\n\n        if (position === 'top') {\n          return {\n            top: [\n              ...(old?.top ?? []).filter(d => !rowIds?.has(d)),\n              ...Array.from(rowIds),\n            ],\n            bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n          }\n        }\n\n        return {\n          top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n          bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n        }\n      })\n    }\n    row.getCanPin = () => {\n      const { enableRowPinning, enablePinning } = table.options\n      if (typeof enableRowPinning === 'function') {\n        return enableRowPinning(row)\n      }\n      return enableRowPinning ?? enablePinning ?? true\n    }\n    row.getIsPinned = () => {\n      const rowIds = [row.id]\n\n      const { top, bottom } = table.getState().rowPinning\n\n      const isTop = rowIds.some(d => top?.includes(d))\n      const isBottom = rowIds.some(d => bottom?.includes(d))\n\n      return isTop ? 'top' : isBottom ? 'bottom' : false\n    }\n    row.getPinnedIndex = () => {\n      const position = row.getIsPinned()\n      if (!position) return -1\n\n      const visiblePinnedRowIds = table\n        ._getPinnedRows(position)\n        ?.map(({ id }) => id)\n\n      return visiblePinnedRowIds?.indexOf(row.id) ?? -1\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setRowPinning = updater => table.options.onRowPinningChange?.(updater)\n\n    table.resetRowPinning = defaultState =>\n      table.setRowPinning(\n        defaultState\n          ? getDefaultRowPinningState()\n          : table.initialState?.rowPinning ?? getDefaultRowPinningState()\n      )\n\n    table.getIsSomeRowsPinned = position => {\n      const pinningState = table.getState().rowPinning\n\n      if (!position) {\n        return Boolean(pinningState.top?.length || pinningState.bottom?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table._getPinnedRows = memo(\n      position => [\n        table.getRowModel().rows,\n        table.getState().rowPinning[position!],\n        position,\n      ],\n      (visibleRows, pinnedRowIds, position) => {\n        const rows =\n          table.options.keepPinnedRows ?? true\n            ? //get all rows that are pinned even if they would not be otherwise visible\n              //account for expanded parent rows, but not pagination or filtering\n              (pinnedRowIds ?? []).map(rowId => {\n                const row = table.getRow(rowId, true)\n                return row.getIsAllParentsExpanded() ? row : null\n              })\n            : //else get only visible rows that are pinned\n              (pinnedRowIds ?? []).map(\n                rowId => visibleRows.find(row => row.id === rowId)!\n              )\n\n        return rows\n          .filter(Boolean)\n          .map(d => ({ ...d, position })) as Row<TData>[]\n      },\n      getMemoOptions(table.options, 'debugRows', '_getPinnedRows')\n    )\n\n    table.getTopRows = () => table._getPinnedRows('top')\n\n    table.getBottomRows = () => table._getPinnedRows('bottom')\n\n    table.getCenterRows = memo(\n      () => [\n        table.getRowModel().rows,\n        table.getState().rowPinning.top,\n        table.getState().rowPinning.bottom,\n      ],\n      (allRows, top, bottom) => {\n        const topAndBottom = new Set([...(top ?? []), ...(bottom ?? [])])\n        return allRows.filter(d => !topAndBottom.has(d.id))\n      },\n      getMemoOptions(table.options, 'debugRows', 'getCenterRows')\n    )\n  },\n}\n", "import {\n  OnChangeFn,\n  Table,\n  Row,\n  RowModel,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  /**\n   * - Enables/disables multiple row selection for all rows in the table OR\n   * - A function that given a row, returns whether to enable/disable multiple row selection for that row's children/grandchildren\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#enablemultirowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * - Enables/disables row selection for all rows in the table OR\n   * - A function that given a row, returns whether to enable/disable row selection for that row\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#enablerowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * Enables/disables automatic sub-row selection when a parent row is selected, or a function that enables/disables automatic sub-row selection for each row.\n   * (Use in combination with expanding or grouping features)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#enablesubrowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.rowSelection` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#onrowselectionchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  /**\n   * Returns whether or not the row can multi-select.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getcanmultiselect)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getCanMultiSelect: () => boolean\n  /**\n   * Returns whether or not the row can be selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getcanselect)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getCanSelect: () => boolean\n  /**\n   * Returns whether or not the row can select sub rows automatically when the parent row is selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getcanselectsubrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getCanSelectSubRows: () => boolean\n  /**\n   * Returns whether or not all of the row's sub rows are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisallsubrowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsAllSubRowsSelected: () => boolean\n  /**\n   * Returns whether or not the row is selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSelected: () => boolean\n  /**\n   * Returns whether or not some of the row's sub rows are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getissomeselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSomeSelected: () => boolean\n  /**\n   * Returns a handler that can be used to toggle the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#gettoggleselectedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getToggleSelectedHandler: () => (event: unknown) => void\n  /**\n   * Selects/deselects the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#toggleselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  toggleSelected: (value?: boolean, opts?: { selectChildren?: boolean }) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  /**\n   * Returns the row model of all rows that are selected after filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getfilteredselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model of all rows that are selected after grouping has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getgroupedselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getGroupedSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns whether or not all rows on the current page are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisallpagerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsAllPageRowsSelected: () => boolean\n  /**\n   * Returns whether or not all rows in the table are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisallrowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsAllRowsSelected: () => boolean\n  /**\n   * Returns whether or not any rows on the current page are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getissomepagerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSomePageRowsSelected: () => boolean\n  /**\n   * Returns whether or not any rows in the table are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getissomerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSomeRowsSelected: () => boolean\n  /**\n   * Returns the core row model of all rows before row selection has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getpreselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getPreSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model of all rows that are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns a handler that can be used to toggle all rows on the current page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#gettoggleallpagerowsselectedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  /**\n   * Returns a handler that can be used to toggle all rows in the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#gettoggleallrowsselectedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  /**\n   * Resets the **rowSelection** state to the `initialState.rowSelection`, or `true` can be passed to force a default blank state reset to `{}`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#resetrowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  resetRowSelection: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.rowSelection` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#setrowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  /**\n   * Selects/deselects all rows on the current page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#toggleallpagerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  /**\n   * Selects/deselects all rows in the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#toggleallrowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  toggleAllRowsSelected: (value?: boolean) => void\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setRowSelection = updater =>\n      table.options.onRowSelectionChange?.(updater)\n    table.resetRowSelection = defaultState =>\n      table.setRowSelection(\n        defaultState ? {} : table.initialState.rowSelection ?? {}\n      )\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value =\n          typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n        const rowSelection = { ...old }\n\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return\n            }\n            rowSelection[row.id] = true\n          })\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id]\n          })\n        }\n\n        return rowSelection\n      })\n    }\n    table.toggleAllPageRowsSelected = value =>\n      table.setRowSelection(old => {\n        const resolvedValue =\n          typeof value !== 'undefined'\n            ? value\n            : !table.getIsAllPageRowsSelected()\n\n        const rowSelection: RowSelectionState = { ...old }\n\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table)\n        })\n\n        return rowSelection\n      })\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel()\n    table.getSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getCoreRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getSelectedRowModel')\n    )\n\n    table.getFilteredSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getFilteredRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFilteredSelectedRowModel')\n    )\n\n    table.getGroupedSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getSortedRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getGroupedSelectedRowModel')\n    )\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n      const { rowSelection } = table.getState()\n\n      let isAllRowsSelected = Boolean(\n        preGroupedFlatRows.length && Object.keys(rowSelection).length\n      )\n\n      if (isAllRowsSelected) {\n        if (\n          preGroupedFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllRowsSelected = false\n        }\n      }\n\n      return isAllRowsSelected\n    }\n\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table\n        .getPaginationRowModel()\n        .flatRows.filter(row => row.getCanSelect())\n      const { rowSelection } = table.getState()\n\n      let isAllPageRowsSelected = !!paginationFlatRows.length\n\n      if (\n        isAllPageRowsSelected &&\n        paginationFlatRows.some(row => !rowSelection[row.id])\n      ) {\n        isAllPageRowsSelected = false\n      }\n\n      return isAllPageRowsSelected\n    }\n\n    table.getIsSomeRowsSelected = () => {\n      const totalSelected = Object.keys(\n        table.getState().rowSelection ?? {}\n      ).length\n      return (\n        totalSelected > 0 &&\n        totalSelected < table.getFilteredRowModel().flatRows.length\n      )\n    }\n\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows\n      return table.getIsAllPageRowsSelected()\n        ? false\n        : paginationFlatRows\n            .filter(row => row.getCanSelect())\n            .some(d => d.getIsSelected() || d.getIsSomeSelected())\n    }\n\n    table.getToggleAllRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllPageRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleSelected = (value, opts) => {\n      const isSelected = row.getIsSelected()\n\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !isSelected\n\n        if (row.getCanSelect() && isSelected === value) {\n          return old\n        }\n\n        const selectedRowIds = { ...old }\n\n        mutateRowIsSelected(\n          selectedRowIds,\n          row.id,\n          value,\n          opts?.selectChildren ?? true,\n          table\n        )\n\n        return selectedRowIds\n      })\n    }\n    row.getIsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isRowSelected(row, rowSelection)\n    }\n\n    row.getIsSomeSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'some'\n    }\n\n    row.getIsAllSubRowsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'all'\n    }\n\n    row.getCanSelect = () => {\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row)\n      }\n\n      return table.options.enableRowSelection ?? true\n    }\n\n    row.getCanSelectSubRows = () => {\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row)\n      }\n\n      return table.options.enableSubRowSelection ?? true\n    }\n\n    row.getCanMultiSelect = () => {\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row)\n      }\n\n      return table.options.enableMultiRowSelection ?? true\n    }\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect()\n\n      return (e: unknown) => {\n        if (!canSelect) return\n        row.toggleSelected(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  includeChildren: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id, true)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (includeChildren && row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, includeChildren, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (!row.subRows?.length) return false\n\n  let allChildrenSelected = true\n  let someSelected = false\n\n  row.subRows.forEach(subRow => {\n    // Bail out early if we know both of these\n    if (someSelected && !allChildrenSelected) {\n      return\n    }\n\n    if (subRow.getCanSelect()) {\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    }\n\n    // Check row selection of nested subrows\n    if (subRow.subRows && subRow.subRows.length) {\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection, table)\n      if (subRowChildrenSelected === 'all') {\n        someSelected = true\n      } else if (subRowChildrenSelected === 'some') {\n        someSelected = true\n        allChildrenSelected = false\n      } else {\n        allChildrenSelected = false\n      }\n    }\n  })\n\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n}\n", "import { SortingFn } from './features/RowSorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n", "import { RowModel } from '..'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n  TableFeature,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  desc: boolean\n  id: string\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  /**\n   * Enables/Disables multi-sorting for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablemultisort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableMultiSort?: boolean\n  /**\n   * Enables/Disables sorting for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablesorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableSorting?: boolean\n  /**\n   * Inverts the order of the sorting for this column. This is useful for values that have an inverted best/worst scale where lower numbers are better, eg. a ranking (1st, 2nd, 3rd) or golf-like scoring\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#invertsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  invertSorting?: boolean\n  /**\n   * Set to `true` for sorting toggles on this column to start in the descending direction.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortdescfirst)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortDescFirst?: boolean\n  /**\n   * The sorting function to use with this column.\n   * - A `string` referencing a built-in sorting function\n   * - A custom sorting function\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortingfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortingFn?: SortingFnOption<TData>\n  /**\n   * The priority of undefined values when sorting this column.\n   * - `false`\n   *   - Undefined values will be considered tied and need to be sorted by the next column filter or original index (whichever applies)\n   * - `-1`\n   *   - Undefined values will be sorted with higher priority (ascending) (if ascending, undefined will appear on the beginning of the list)\n   * - `1`\n   *   - Undefined values will be sorted with lower priority (descending) (if ascending, undefined will appear on the end of the list)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortundefined)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortUndefined?: false | -1 | 1 | 'first' | 'last'\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  /**\n   * Removes this column from the table's sorting state\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#clearsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  clearSorting: () => void\n  /**\n   * Returns a sort direction automatically inferred based on the columns values.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getautosortdir)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getAutoSortDir: () => SortDirection\n  /**\n   * Returns a sorting function automatically inferred based on the columns values.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getautosortingfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getAutoSortingFn: () => SortingFn<TData>\n  /**\n   * Returns whether this column can be multi-sorted.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getcanmultisort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getCanMultiSort: () => boolean\n  /**\n   * Returns whether this column can be sorted.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getcansort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getCanSort: () => boolean\n  /**\n   * Returns the first direction that should be used when sorting this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getfirstsortdir)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getFirstSortDir: () => SortDirection\n  /**\n   * Returns the current sort direction of this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getissorted)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getIsSorted: () => false | SortDirection\n  /**\n   * Returns the next sorting order.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getnextsortingorder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getNextSortingOrder: () => SortDirection | false\n  /**\n   * Returns the index position of this column's sorting within the sorting state\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortIndex: () => number\n  /**\n   * Returns the resolved sorting function to be used for this column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortingfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortingFn: () => SortingFn<TData>\n  /**\n   * Returns a function that can be used to toggle this column's sorting state. This is useful for attaching a click handler to the column header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#gettogglesortinghandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n  /**\n   * Toggles this columns sorting state. If `desc` is provided, it will force the sort direction to that value. If `isMulti` is provided, it will additivity multi-sort the column (or toggle it if it is already sorted).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#togglesorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n}\n\ninterface SortingOptionsBase {\n  /**\n   * Enables/disables the ability to remove multi-sorts\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablemultiremove)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableMultiRemove?: boolean\n  /**\n   * Enables/Disables multi-sorting for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablemultisort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableMultiSort?: boolean\n  /**\n   * Enables/Disables sorting for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablesorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableSorting?: boolean\n  /**\n   * Enables/Disables the ability to remove sorting for the table.\n   * - If `true` then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'none' -> ...\n   * - If `false` then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'desc' -> 'asc' -> ...\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablesortingremoval)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableSortingRemoval?: boolean\n  /**\n   * This function is used to retrieve the sorted row model. If using server-side sorting, this function is not required. To use client-side sorting, pass the exported `getSortedRowModel()` from your adapter to your table or implement your own.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Pass a custom function that will be used to determine if a multi-sort event should be triggered. It is passed the event from the sort toggle handler and should return `true` if the event should trigger a multi-sort.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#ismultisortevent)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  isMultiSortEvent?: (e: unknown) => boolean\n  /**\n   * Enables manual sorting for the table. If this is `true`, you will be expected to sort your data before it is passed to the table. This is useful if you are doing server-side sorting.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#manualsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  manualSorting?: boolean\n  /**\n   * Set a maximum number of columns that can be multi-sorted.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#maxmultisortcolcount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  maxMultiSortColCount?: number\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.sorting` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#onsortingchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  onSortingChange?: OnChangeFn<SortingState>\n  /**\n   * If `true`, all sorts will default to descending as their first toggle state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortdescfirst)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortDescFirst?: boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  _getSortedRowModel?: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any sorting has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getpresortedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getPreSortedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table after sorting has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortedRowModel: () => RowModel<TData>\n  /**\n   * Resets the **sorting** state to `initialState.sorting`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#resetsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  resetSorting: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.sorting` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#setsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  setSorting: (updater: Updater<SortingState>) => void\n}\n\n//\n\nexport const RowSorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n      let isString = false\n\n      for (const row of firstRows) {\n        const value = row?.getValue(column.id)\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime\n        }\n\n        if (typeof value === 'string') {\n          isString = true\n\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric\n          }\n        }\n      }\n\n      if (isString) {\n        return sortingFns.text\n      }\n\n      return sortingFns.basic\n    }\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return 'asc'\n      }\n\n      return 'desc'\n    }\n    column.getSortingFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.sortingFn)\n        ? column.columnDef.sortingFn\n        : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n    }\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder()\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old?.find(d => d.id === column.id)\n        const existingIndex = old?.findIndex(d => d.id === column.id)\n\n        let newSorting: SortingState = []\n\n        // What should we do with this sort action?\n        let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n        // Multi-mode\n        if (old?.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'add'\n          }\n        } else {\n          // Normal mode\n          if (old?.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace'\n          } else if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'replace'\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove'\n            }\n          }\n        }\n\n        if (sortAction === 'add') {\n          newSorting = [\n            ...old,\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n          // Take latest n columns\n          newSorting.splice(\n            0,\n            newSorting.length -\n              (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n          )\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc,\n              }\n            }\n            return d\n          })\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id)\n        } else {\n          newSorting = [\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n        }\n\n        return newSorting\n      })\n    }\n\n    column.getFirstSortDir = () => {\n      const sortDescFirst =\n        column.columnDef.sortDescFirst ??\n        table.options.sortDescFirst ??\n        column.getAutoSortDir() === 'desc'\n      return sortDescFirst ? 'desc' : 'asc'\n    }\n\n    column.getNextSortingOrder = (multi?: boolean) => {\n      const firstSortDirection = column.getFirstSortDir()\n      const isSorted = column.getIsSorted()\n\n      if (!isSorted) {\n        return firstSortDirection\n      }\n\n      if (\n        isSorted !== firstSortDirection &&\n        (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n        (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc'\n    }\n\n    column.getCanSort = () => {\n      return (\n        (column.columnDef.enableSorting ?? true) &&\n        (table.options.enableSorting ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanMultiSort = () => {\n      return (\n        column.columnDef.enableMultiSort ??\n        table.options.enableMultiSort ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsSorted = () => {\n      const columnSort = table.getState().sorting?.find(d => d.id === column.id)\n\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n    }\n\n    column.getSortIndex = () =>\n      table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1\n\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old =>\n        old?.length ? old.filter(d => d.id !== column.id) : []\n      )\n    }\n\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort()\n\n      return (e: unknown) => {\n        if (!canSort) return\n        ;(e as any).persist?.()\n        column.toggleSorting?.(\n          undefined,\n          column.getCanMultiSort() ? table.options.isMultiSortEvent?.(e) : false\n        )\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setSorting = updater => table.options.onSortingChange?.(updater)\n    table.resetSorting = defaultState => {\n      table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n    }\n    table.getPreSortedRowModel = () => table.getGroupedRowModel()\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table)\n      }\n\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel()\n      }\n\n      return table._getSortedRowModel()\n    }\n  },\n}\n", "import { functionalUpdate, getMemoOptions, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n  TableFeature,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnFaceting } from '../features/ColumnFaceting'\nimport { ColumnFiltering } from '../features/ColumnFiltering'\nimport { ColumnGrouping } from '../features/ColumnGrouping'\nimport { ColumnOrdering } from '../features/ColumnOrdering'\nimport { ColumnPinning } from '../features/ColumnPinning'\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { ColumnVisibility } from '../features/ColumnVisibility'\nimport { GlobalFaceting } from '../features/GlobalFaceting'\nimport { GlobalFiltering } from '../features/GlobalFiltering'\nimport { RowExpanding } from '../features/RowExpanding'\nimport { RowPagination } from '../features/RowPagination'\nimport { RowPinning } from '../features/RowPinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { RowSorting } from '../features/RowSorting'\n\nconst builtInFeatures = [\n  Headers,\n  ColumnVisibility,\n  ColumnOrdering,\n  ColumnPinning,\n  ColumnFaceting,\n  ColumnFiltering,\n  GlobalFaceting, //depends on ColumnFaceting\n  GlobalFiltering, //depends on ColumnFiltering\n  RowSorting,\n  ColumnGrouping, //depends on RowSorting\n  RowExpanding,\n  RowPagination,\n  RowPinning,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  /**\n   * An array of extra features that you can add to the table instance.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#_features)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  _features?: TableFeature[]\n  /**\n   * Set this option to override any of the `autoReset...` feature options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#autoresetall)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  autoResetAll?: boolean\n  /**\n   * The array of column defs to use for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#columns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  columns: ColumnDef<TData, any>[]\n  /**\n   * The data for the table to display. This array should match the type you provided to `table.setRowType<...>`. Columns can access this data via string/index or a functional accessor. When the `data` option changes reference, the table will reprocess the data.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#data)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  data: TData[]\n  /**\n   * Set this option to `true` to output all debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugall)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugAll?: boolean\n  /**\n   * Set this option to `true` to output cell debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugcells]\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugCells?: boolean\n  /**\n   * Set this option to `true` to output column debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugColumns?: boolean\n  /**\n   * Set this option to `true` to output header debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugHeaders?: boolean\n  /**\n   * Set this option to `true` to output row debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugRows?: boolean\n  /**\n   * Set this option to `true` to output table debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugtable)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugTable?: boolean\n  /**\n   * Default column options to use for all column defs supplied to the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#defaultcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  /**\n   * This required option is a factory for a function that computes and returns the core row model for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getcorerowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  /**\n   * This optional function is used to derive a unique ID for any given row. If not provided the rows index is used (nested rows join together with `.` using their grandparents' index eg. `index.index.index`). If you need to identify individual rows that are originating from any server-side operations, it's suggested you use this function to return an ID that makes sense regardless of network IO/ambiguity eg. a userId, taskId, database ID field, etc.\n   * @example getRowId: row => row.userId\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getrowid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  /**\n   * This optional function is used to access the sub rows for any given row. If you are using nested rows, you will need to use this function to return the sub rows object (or undefined) from the row.\n   * @example getSubRows: row => row.subRows\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getsubrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  /**\n   * Use this option to optionally pass initial state to the table. This state will be used when resetting various table states either automatically by the table (eg. `options.autoResetPageIndex`) or via functions like `table.resetRowSelection()`. Most reset function allow you optionally pass a flag to reset to a blank/default state instead of the initial state.\n   *\n   * Table state will not be reset when this object changes, which also means that the initial state object does not need to be stable.\n   *\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#initialstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  initialState?: InitialTableState\n  /**\n   * This option is used to optionally implement the merging of table options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#mergeoptions)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  /**\n   * You can pass any object to `options.meta` and access it anywhere the `table` is available via `table.options.meta`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#meta)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  meta?: TableMeta<TData>\n  /**\n   * The `onStateChange` option can be used to optionally listen to state changes within the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#onstatechange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  onStateChange: (updater: Updater<TableState>) => void\n  /**\n   * Value used when the desired value is not found in the data.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#renderfallbackvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  renderFallbackValue: any\n  /**\n   * The `state` option can be used to optionally _control_ part or all of the table state. The state you pass here will merge with and overwrite the internal automatically-managed state to produce the final state for the table. You can also listen to state changes via the `onStateChange` option.\n   * > Note: Any state passed in here will override both the internal state and any other `initialState` you provide.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#state)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  state: Partial<TableState>\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  _features: readonly TableFeature[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getCoreRowModel?: () => RowModel<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  _queue: (cb: () => void) => void\n  /**\n   * Returns all columns in the table in their normalized and nested hierarchy.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getallcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getAllColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns all columns in the table flattened to a single level.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getallflatcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns all leaf-node columns in the table flattened to a single level. This does not include parent columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getallleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns a single column by its ID.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n  /**\n   * Returns the core row model before any processing has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getcorerowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getCoreRowModel: () => RowModel<TData>\n  /**\n   * Returns the row with the given ID.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getrow)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getRow: (id: string, searchAll?: boolean) => Row<TData>\n  /**\n   * Returns the final model after all processing from other used features has been applied. This is the row model that is most commonly used for rendering.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getRowModel: () => RowModel<TData>\n  /**\n   * Call this function to get the table's current state. It's recommended to use this function and its state, especially when managing the table state manually. It is the exact same state used internally by the table for every feature and function it provides.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getState: () => TableState\n  /**\n   * This is the resolved initial state of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#initialstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  initialState: TableState\n  /**\n   * A read-only reference to the table's current options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#options)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  /**\n   * Call this function to reset the table state to the initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#reset)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  reset: () => void\n  /**\n   * This function can be used to update the table options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#setoptions)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  /**\n   * Call this function to update the table state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#setstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  setState: (updater: Updater<TableState>) => void\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    (options.debugAll || options.debugTable)\n  ) {\n    console.info('Creating Table Instance...')\n  }\n\n  const _features = [...builtInFeatures, ...(options._features ?? [])]\n\n  let table = { _features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = (feature.getInitialState?.(initialState) ??\n      initialState) as TableState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    //in next version, we should just pass in the row model as the optional 2nd arg\n    getRow: (id: string, searchAll?: boolean) => {\n      let row = (\n        searchAll ? table.getPrePaginationRowModel() : table.getRowModel()\n      ).rowsById[id]\n\n      if (!row) {\n        row = table.getCoreRowModel().rowsById[id]\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`getRow could not find row with ID: ${id}`)\n          }\n          throw new Error()\n        }\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      getMemoOptions(options, 'debugColumns', '_getDefaultColumnDef')\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllColumns')\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllFlatColumns')\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce(\n          (acc, column) => {\n            acc[column.id] = column\n            return acc\n          },\n          {} as Record<string, Column<TData, unknown>>\n        )\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllFlatColumnsById')\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllLeafColumns')\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index]\n    feature?.createTable?.(table)\n  }\n\n  return table\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      getMemoOptions(table.options, 'debugTable', 'getRowModel', () =>\n        table._autoResetPageIndex()\n      )\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getExpandedRowModel')\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n", "import { Table, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFacetedMinMaxValues')\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nfunction filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nfunction filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFacetedRowModel')\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      getMemoOptions(\n        table.options,\n        'debugTable',\n        `getFacetedUniqueValues_${columnId}`\n      )\n    )\n}\n", "import { ResolvedColumnFilter } from '../features/ColumnFiltering'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = (columnFilters ?? []).map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFilteredRowModel', () =>\n        table._autoResetPageIndex()\n      )\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, getMemoOptions, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      getMemoOptions(table.options, 'debugTable', 'getGroupedRowModel', () => {\n        table._queue(() => {\n          table._autoResetExpanded()\n          table._autoResetPageIndex()\n        })\n      })\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      getMemoOptions(table.options, 'debugTable', 'getPaginationRowModel')\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/RowSorting'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(\n          sort => table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1 | 'first' | 'last'\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.map(row => ({ ...row }))\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const sortUndefined = columnInfo.sortUndefined\n              const isDesc = sortEntry?.desc ?? false\n\n              let sortInt = 0\n\n              // All sorting ints should always return in ascending order\n              if (sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = aValue === undefined\n                const bUndefined = bValue === undefined\n\n                if (aUndefined || bUndefined) {\n                  if (sortUndefined === 'first') return aUndefined ? -1 : 1\n                  if (sortUndefined === 'last') return aUndefined ? 1 : -1\n                  sortInt =\n                    aUndefined && bUndefined\n                      ? 0\n                      : aUndefined\n                        ? sortUndefined\n                        : -sortUndefined\n                }\n              }\n\n              if (sortInt === 0) {\n                sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n              }\n\n              // If sorting is non-zero, take care of desc and inversion\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      getMemoOptions(table.options, 'debugTable', 'getSortedRowModel', () =>\n        table._autoResetPageIndex()\n      )\n    )\n}\n", "import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\n/**\n * If rendering headers, cells, or footers with custom markup, use flexRender instead of `cell.getValue()` or `cell.renderValue()`.\n */\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n", "import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n", "import {type SanityDocumentLike} from '@sanity/types'\nimport {unstable_useValuePreview as useValuePreview, useSchema, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface DocTitleProps {\n  document: SanityDocumentLike\n}\n\nexport function DocTitle(props: DocTitleProps) {\n  const {document: documentValue} = props\n  const schema = useSchema()\n  const schemaType = schema.get(documentValue._type)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    schemaType: schemaType!,\n    value: documentValue,\n  })\n\n  if (!schemaType) {\n    return <code>{t('doc-title.unknown-schema-type.text', {schemaType: documentValue._type})}</code>\n  }\n\n  if (error) {\n    return <>{t('doc-title.error.text', {errorMessage: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>{t('doc-title.fallback.text')}</span>\n      )}\n    </>\n  )\n}\n", "import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Flex, Inline, rem, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport const ChevronWrapper = styled(Box)`\n  margin-left: auto;\n`\n\nexport const CrossDatasetReferencesDetails = styled.details`\n  flex: none;\n\n  &[open] ${ChevronWrapper} {\n    transform: rotate(180deg);\n  }\n`\n\nexport const CrossDatasetReferencesSummary = styled.summary`\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n`\n\nexport const Table = styled.table`\n  width: 100%;\n  text-align: left;\n  padding: 0 ${({theme}) => rem(theme.sanity.space[2])};\n  border-collapse: collapse;\n\n  th {\n    padding: ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  td {\n    padding: 0 ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n`\n\nexport const DocumentIdFlex = styled(Flex)`\n  min-height: 33px;\n`\n\nexport const OtherReferenceCount = (props: {totalCount: number; references: unknown[]}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const difference = props.totalCount - props.references.length\n\n  if (!difference) return null\n\n  return (\n    <Box padding={2}>\n      <Inline space={2}>\n        <Text size={1} muted>\n          {t('confirm-delete-dialog.other-reference-count.title', {count: difference})}\n        </Text>\n\n        <Tooltip\n          portal\n          placement=\"top\"\n          content={t('confirm-delete-dialog.other-reference-count.tooltip')}\n        >\n          <Text size={1} muted>\n            <InfoOutlineIcon />\n          </Text>\n        </Tooltip>\n      </Inline>\n    </Box>\n  )\n}\n", "import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {Flex} from '@sanity/ui'\nimport {isNumber, isString} from 'lodash'\nimport {type ComponentType, isValidElement} from 'react'\nimport {useMemoObservable} from 'react-rx'\nimport {\n  type DocumentPresence,\n  DocumentPreviewPresence,\n  type DocumentPreviewStore,\n  DocumentStatus,\n  DocumentStatusIndicator,\n  type GeneralPreviewLayoutKey,\n  getPreviewStateObservable,\n  getPreviewValueWithFallback,\n  isRecord,\n  SanityDefaultPreview,\n} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../ui-components'\nimport {type PaneItemPreviewState} from './types'\n\nexport interface PaneItemPreviewProps {\n  documentPreviewStore: DocumentPreviewStore\n  icon: ComponentType | false\n  layout: GeneralPreviewLayoutKey\n  presence?: DocumentPresence[]\n  schemaType: SchemaType\n  value: SanityDocument\n}\n\n/**\n * Preview component for _documents_ rendered in structure panes.\n *\n * Note that non-document previews are not handled by this component,\n * despite being pane items! Non-document previews bypass this entirely\n * and are rendered by `<SanityDefaultPreview>`.\n */\nexport function PaneItemPreview(props: PaneItemPreviewProps) {\n  const {icon, layout, presence, schemaType, value} = props\n  const title =\n    (isRecord(value.title) && isValidElement(value.title)) ||\n    isString(value.title) ||\n    isNumber(value.title)\n      ? value.title\n      : null\n\n  // NOTE: this emits sync so can never be null\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const {draft, published, isLoading} = useMemoObservable<PaneItemPreviewState>(\n    () => getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title),\n    [props.documentPreviewStore, schemaType, value._id, title],\n  )!\n\n  const status = isLoading ? null : (\n    <TooltipDelayGroupProvider>\n      <Flex align=\"center\" gap={3}>\n        {presence && presence.length > 0 && <DocumentPreviewPresence presence={presence} />}\n        <DocumentStatusIndicator draft={draft} published={published} />\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n\n  const tooltip = <DocumentStatus draft={draft} published={published} />\n\n  return (\n    <SanityDefaultPreview\n      {...getPreviewValueWithFallback({value, draft, published})}\n      isPlaceholder={isLoading}\n      icon={icon}\n      layout={layout}\n      status={status}\n      tooltip={tooltip}\n    />\n  )\n}\n", "import {type ComponentType, type ForwardedRef, forwardRef, useContext, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type BackLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState])\n  const state = useMemo(() => ({panes}), [panes])\n\n  return <StateLink {...props} ref={ref} state={state} />\n}) as ComponentType<BackLinkProps>\n", "import {useContext} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePaneLayout(): PaneLayoutContextValue {\n  const pane = useContext(PaneLayoutContext)\n\n  if (!pane) {\n    throw new Error('PaneLayout: missing context value')\n  }\n\n  return pane\n}\n", "import {type ForwardedRef, forwardRef, useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type ChildLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const ChildLink = forwardRef(function ChildLink(\n  props: ChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {childId, childPayload, childParameters, ...rest} = props\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n\n  return (\n    <StateLink\n      {...rest}\n      ref={ref}\n      state={{\n        panes: [\n          ...routerPanesState.slice(0, groupIndex + 1),\n          [{id: childId, params: childParameters, payload: childPayload}],\n        ],\n      }}\n    />\n  )\n})\n", "import {type ForwardedRef, forwardRef, type ReactNode, useContext, useMemo} from 'react'\nimport {useUnique} from 'sanity'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\ninterface ParameterizedLinkProps {\n  params?: Record<string, string>\n  payload?: unknown\n  children?: ReactNode\n}\n\n/**\n * @internal\n */\nexport const ParameterizedLink = forwardRef(function ParameterizedLink(\n  props: ParameterizedLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState: currentPanes, groupIndex, siblingIndex} = useContext(PaneRouterContext)\n  const {params, payload, ...rest} = props\n  const nextParams = useUnique(params)\n  const nextPayload = useUnique(payload)\n\n  const nextState = useMemo(() => {\n    const currentGroup = currentPanes[groupIndex]\n    const currentSibling = currentGroup[siblingIndex]\n\n    const nextSibling = {\n      ...currentSibling,\n      params: nextParams ?? currentSibling.params,\n      payload: nextPayload ?? currentSibling.payload,\n    }\n\n    const nextGroup = [\n      ...currentGroup.slice(0, siblingIndex),\n      nextSibling,\n      ...currentGroup.slice(siblingIndex + 1),\n    ]\n\n    const nextPanes = [\n      ...currentPanes.slice(0, groupIndex),\n      nextGroup,\n      ...currentPanes.slice(groupIndex + 1),\n    ]\n\n    return {panes: nextPanes}\n  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex])\n\n  return <StateLink ref={ref} {...rest} state={nextState} />\n})\n", "import {toString as pathToString} from '@sanity/util/paths'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {ChildLink} from './ChildLink'\nimport {type ReferenceChildLinkProps} from './types'\n\nexport const ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  {documentId, documentType, parentRefPath, children, template, ...rest}: ReferenceChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  return (\n    <ChildLink\n      {...rest}\n      ref={ref}\n      childId={documentId}\n      childPayload={template?.params}\n      childParameters={{\n        type: documentType,\n        parentRefPath: pathToString(parentRefPath),\n        ...(template && {template: template?.id}),\n      }}\n    >\n      {children}\n    </ChildLink>\n  )\n})\n", "import {useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\n\nimport {type PaneRouterContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport function usePaneRouter(): PaneRouterContextValue {\n  return useContext(PaneRouterContext)\n}\n", "import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\nimport {\n  type FIXME,\n  getPublishedId,\n  PreviewCard,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {PaneItemPreview} from '../paneItem/PaneItemPreview'\nimport {usePaneRouter} from '../paneRouter'\n\nconst EMPTY_ARRAY: [] = []\n\ninterface ReferencePreviewLinkProps {\n  onClick?: () => void\n  type: SchemaType & {icon?: any}\n  value: SanityDocument\n}\n\nexport function ReferencePreviewLink(props: ReferencePreviewLinkProps) {\n  const {onClick, type, value} = props\n  const publishedId = getPublishedId(value?._id)\n  const documentPresence = useDocumentPresence(publishedId)\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ReferenceChildLink} = usePaneRouter()\n\n  const Link = useCallback(\n    function LinkComponent(linkProps: {children: ReactNode}) {\n      return (\n        <ReferenceChildLink\n          documentId={value?._id}\n          documentType={type?.name}\n          parentRefPath={EMPTY_ARRAY}\n          {...linkProps}\n        />\n      )\n    },\n    [ReferenceChildLink, type?.name, value?._id],\n  )\n\n  return (\n    <PreviewCard __unstable_focusRing as={Link as FIXME} data-as=\"a\" onClick={onClick} radius={2}>\n      <PaneItemPreview\n        documentPreviewStore={documentPreviewStore}\n        icon={type?.icon}\n        layout=\"compact\"\n        presence={documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY}\n        schemaType={type}\n        value={value}\n      />\n    </PreviewCard>\n  )\n}\n", "import {\n  ChevronDownIcon,\n  CopyIcon,\n  DocumentsIcon,\n  UnknownIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport CopyToClipboard from 'react-copy-to-clipboard'\nimport {SanityDefaultPreview, Translate, useSchema, useTranslation} from 'sanity'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {\n  ChevronWrapper,\n  CrossDatasetReferencesDetails,\n  CrossDatasetReferencesSummary,\n  DocumentIdFlex,\n  OtherReferenceCount,\n  Table,\n} from './ConfirmDeleteDialogBody.styles'\nimport {ReferencePreviewLink} from './ReferencePreviewLink'\nimport {type ReferringDocuments} from './useReferringDocuments'\n\ntype DeletionConfirmationDialogBodyProps = Required<ReferringDocuments> & {\n  documentTitle: React.ReactNode\n  action: 'unpublish' | 'delete'\n  onReferenceLinkClick?: () => void\n}\n\n/**\n * The inner part of the `ConfirmDeleteDialog`. This is ran when both the\n * `crossDatasetReferences` and `internalReferences` are loaded.\n */\nexport function ConfirmDeleteDialogBody({\n  crossDatasetReferences,\n  internalReferences,\n  documentTitle,\n  totalCount,\n  action,\n  datasetNames,\n  hasUnknownDatasetNames,\n  onReferenceLinkClick,\n}: DeletionConfirmationDialogBodyProps) {\n  const schema = useSchema()\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const renderPreviewItem = useCallback(\n    (item: any) => {\n      const type = schema.get(item._type)\n      if (type) {\n        return <ReferencePreviewLink type={type} value={item} onClick={onReferenceLinkClick} />\n      }\n\n      return (\n        // Padding added to match the ReferencePreviewLink styling\n        <Box padding={2}>\n          <SanityDefaultPreview\n            icon={UnknownIcon}\n            title={t('confirm-delete-dialog.preview-item.preview-unavailable.title')}\n            subtitle={t('confirm-delete-dialog.preview-item.preview-unavailable.subtitle', {\n              documentId: item._id,\n            })}\n            layout=\"default\"\n          />\n        </Box>\n      )\n    },\n    [schema, t, onReferenceLinkClick],\n  )\n\n  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {\n    return (\n      <Text as=\"p\" size={1}>\n        <Translate\n          t={t}\n          i18nKey=\"confirm-delete-dialog.confirmation.text\"\n          context={action}\n          components={{DocumentTitle: () => <strong>{documentTitle}</strong>}}\n        />\n      </Text>\n    )\n  }\n\n  // We do some extra checks to handle cases where you have unavailable dataset\n  // name(s) due to permissions, both alone and in combination with known datasets\n\n  // This normalizes one or more undefined dataset names to the catch-all `unavailable`\n  const normalizedDatasetNames = [\n    ...datasetNames,\n    ...(hasUnknownDatasetNames ? ['unavailable'] : []),\n  ]\n\n  const datasetSubtitle = t('confirm-delete-dialog.cdr-summary.subtitle', {\n    count: normalizedDatasetNames.length,\n    datasets: normalizedDatasetNames.join(', '),\n    context: hasUnknownDatasetNames && normalizedDatasetNames.length ? 'unavailable' : '',\n  })\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      <Card padding={3} radius={2} tone=\"caution\" flex=\"none\">\n        <Flex>\n          <Text aria-hidden=\"true\" size={1}>\n            <WarningOutlineIcon />\n          </Text>\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              <Translate\n                i18nKey=\"confirm-delete-dialog.referring-document-count.text\"\n                components={{DocumentTitle: () => documentTitle}}\n                t={t}\n                values={{count: totalCount}}\n              />\n            </Text>\n          </Box>\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referring-documents-descriptor.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n      <Card radius={2} shadow={1} flex=\"auto\" padding={2}>\n        <Flex direction=\"column\">\n          {internalReferences.totalCount > 0 && (\n            <Stack as=\"ul\" marginBottom={2} space={2} data-testid=\"internal-references\">\n              {internalReferences?.references.map((item) => (\n                <Box as=\"li\" key={item._id}>\n                  {renderPreviewItem(item)}\n                </Box>\n              ))}\n\n              {internalReferences.totalCount > internalReferences.references.length && (\n                <Box as=\"li\" padding={3}>\n                  <OtherReferenceCount {...internalReferences} />\n                </Box>\n              )}\n            </Stack>\n          )}\n\n          {crossDatasetReferences.totalCount > 0 && (\n            <CrossDatasetReferencesDetails\n              data-testid=\"cross-dataset-references\"\n              style={{\n                // only add the border if needed\n                borderTop:\n                  internalReferences.totalCount > 0\n                    ? '1px solid var(--card-shadow-outline-color)'\n                    : undefined,\n              }}\n            >\n              <CrossDatasetReferencesSummary>\n                <Card\n                  as=\"a\"\n                  marginTop={internalReferences.totalCount > 0 ? 2 : 0}\n                  radius={2}\n                  shadow={1}\n                  paddingY={1}\n                >\n                  <Flex align=\"center\" gap={3} paddingX={3} paddingY={1}>\n                    <Text size={1}>\n                      <DocumentsIcon />\n                    </Text>\n                    <Stack space={2}>\n                      <Text textOverflow=\"ellipsis\" size={1}>\n                        {t('confirm-delete-dialog.cdr-summary.title', {\n                          count: normalizedDatasetNames.length,\n                          documentCount: t('confirm-delete-dialog.cdr-summary.document-count', {\n                            count: crossDatasetReferences.totalCount,\n                          }),\n                        })}\n                      </Text>\n                      <Text title={datasetSubtitle} textOverflow=\"ellipsis\" size={1} muted>\n                        {datasetSubtitle}\n                      </Text>\n                    </Stack>\n                    <ChevronWrapper>\n                      <Text muted size={1}>\n                        <ChevronDownIcon />\n                      </Text>\n                    </ChevronWrapper>\n                  </Flex>\n                </Card>\n              </CrossDatasetReferencesSummary>\n\n              <Box overflow=\"auto\" paddingTop={2}>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <Text muted size={1} style={{minWidth: '5rem'}} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.project-id.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.dataset.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.document-id.label')}\n                        </Text>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {crossDatasetReferences.references\n                      .filter((reference): reference is Required<typeof reference> => {\n                        return 'projectId' in reference\n                      })\n                      .map(({projectId, datasetName, documentId}, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <tr key={`${documentId}-${index}`}>\n                          <td>\n                            <Text size={1}>{projectId}</Text>\n                          </td>\n                          <td>\n                            <Text size={1}>{datasetName || 'unavailable'}</Text>\n                          </td>\n                          <td>\n                            <DocumentIdFlex align=\"center\" gap={2} justify=\"flex-end\">\n                              <Text textOverflow=\"ellipsis\" size={1}>\n                                {documentId || 'unavailable'}\n                              </Text>\n                              {documentId && (\n                                <CopyToClipboard\n                                  text={documentId}\n                                  // eslint-disable-next-line react/jsx-no-bind\n                                  onCopy={() => {\n                                    toast.push({\n                                      title: t(\n                                        'confirm-delete-dialog.cdr-table.id-copied-toast.title',\n                                      ),\n                                      status: 'success',\n                                    })\n                                  }}\n                                >\n                                  <Button\n                                    mode=\"bleed\"\n                                    icon={CopyIcon}\n                                    tooltipProps={{\n                                      content: t(\n                                        'confirm-delete-dialog.cdr-table.copy-id-button.tooltip',\n                                      ),\n                                    }}\n                                  />\n                                </CopyToClipboard>\n                              )}\n                            </DocumentIdFlex>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n\n                <OtherReferenceCount {...crossDatasetReferences} />\n              </Box>\n            </CrossDatasetReferencesDetails>\n          )}\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referential-integrity-disclaimer.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n    </Flex>\n  )\n}\n", "import {type ClientError, type SanityClient} from '@sanity/client'\nimport {useMemo} from 'react'\nimport {EMPTY, fromEvent, type Observable, of, timer} from 'rxjs'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n} from 'rxjs/operators'\nimport {\n  type AvailabilityResponse,\n  createHookFromObservableFactory,\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  type DocumentStore,\n  getDraftId,\n  getPublishedId,\n  useClient,\n  useDocumentStore,\n} from 'sanity'\n\n// this is used in place of `instanceof` so the matching can be more robust and\n// won't have any issues with dual packages etc\n// https://nodejs.org/api/packages.html#dual-package-hazard\nfunction isClientError(e: unknown): e is ClientError {\n  if (typeof e !== 'object') return false\n  if (!e) return false\n  return 'statusCode' in e && 'response' in e\n}\n\nconst POLL_INTERVAL = 5000\n\n// only fetches when the document is visible\nlet visiblePoll$: Observable<number>\nconst getVisiblePoll$ = () => {\n  if (!visiblePoll$) {\n    visiblePoll$ = fromEvent(document, 'visibilitychange').pipe(\n      // add empty emission to have this fire on creation\n      startWith(null),\n      map(() => document.visibilityState === 'visible'),\n      distinctUntilChanged(),\n      switchMap((visible) =>\n        visible\n          ? // using timer instead of interval since timer will emit on creation\n            timer(0, POLL_INTERVAL)\n          : EMPTY,\n      ),\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n  }\n  return visiblePoll$\n}\n\nexport type ReferringDocuments = {\n  isLoading: boolean\n  totalCount: number\n  projectIds: string[]\n  datasetNames: string[]\n  hasUnknownDatasetNames: boolean\n  internalReferences?: {\n    totalCount: number\n    references: Array<{_id: string; _type: string}>\n  }\n  crossDatasetReferences?: {\n    totalCount: number\n    references: Array<{\n      /**\n       * The project ID of the document that is currently referencing the subject\n       * document. Unlike `documentId` and `datasetName`, this should always be\n       * defined.\n       */\n      projectId: string\n      /**\n       * The ID of the document that is currently referencing the subject\n       * document. This will be omitted if there is no access to the current\n       * project and dataset pair (e.g. if no `sanity-project-token` were\n       * configured)\n       */\n      documentId?: string\n      /**\n       * The dataset name that is currently referencing the subject document.\n       * This will be omitted if there is no access to the current project and\n       * dataset pair (e.g. if no `sanity-project-token` were configured)\n       */\n      datasetName?: string\n    }>\n  }\n}\n\nfunction getDocumentExistence(\n  documentId: string,\n  {versionedClient}: {versionedClient: SanityClient},\n): Observable<string | undefined> {\n  const draftId = getDraftId(documentId)\n  const publishedId = getPublishedId(documentId)\n  const requestOptions = {\n    uri: versionedClient.getDataUrl('doc', `${draftId},${publishedId}`),\n    json: true,\n    query: {excludeContent: 'true'},\n    tag: 'use-referring-documents.document-existence',\n  }\n  return versionedClient.observable.request<AvailabilityResponse>(requestOptions).pipe(\n    map(({omitted}) => {\n      const nonExistant = omitted.filter((doc) => doc.reason === 'existence')\n      if (nonExistant.length === 2) {\n        // None of the documents exist\n        return undefined\n      }\n\n      if (nonExistant.length === 0) {\n        // Both exist, so use the published one\n        return publishedId\n      }\n\n      // If the draft does not exist, use the published ID, and vice versa\n      return nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId\n    }),\n  )\n}\n\n/**\n * fetches the cross-dataset references using the client observable.request\n * method (for that requests can be automatically cancelled)\n */\nfunction fetchCrossDatasetReferences(\n  documentId: string,\n  context: {versionedClient: SanityClient},\n): Observable<ReferringDocuments['crossDatasetReferences']> {\n  const {versionedClient} = context\n\n  return getVisiblePoll$().pipe(\n    switchMap(() => getDocumentExistence(documentId, context)),\n    switchMap((checkDocumentId) => {\n      if (!checkDocumentId) {\n        return of({totalCount: 0, references: []})\n      }\n\n      const currentDataset = versionedClient.config().dataset\n\n      return versionedClient.observable\n        .request({\n          url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,\n          tag: 'use-referring-documents.external',\n        })\n        .pipe(\n          catchError((e) => {\n            // it's possible that referencing document doesn't exist yet so the\n            // API will return a 404. In those cases, we want to catch and return\n            // a response with no references\n            if (isClientError(e) && e.statusCode === 404) {\n              return of({totalCount: 0, references: []})\n            }\n\n            throw e\n          }),\n        )\n    }),\n  )\n}\n\nconst useInternalReferences = createHookFromObservableFactory(\n  ([documentId, documentStore]: [string, DocumentStore]) => {\n    const referencesClause = '*[references($documentId)][0...100]{_id,_type}'\n    const totalClause = 'count(*[references($documentId)])'\n    const fetchQuery = `{\"references\":${referencesClause},\"totalCount\":${totalClause}}`\n    const listenQuery = '*[references($documentId)]'\n\n    return documentStore.listenQuery(\n      {fetch: fetchQuery, listen: listenQuery},\n      {documentId},\n      {tag: 'use-referring-documents', transitions: ['appear', 'disappear'], throttleTime: 5000},\n    ) as Observable<ReferringDocuments['internalReferences']>\n  },\n)\n\nconst useCrossDatasetReferences = createHookFromObservableFactory(\n  ([documentId, versionedClient]: [string, SanityClient]) => {\n    // (documentId: string, versionedClient: SanityClient) => {\n    return getVisiblePoll$().pipe(\n      switchMap(() =>\n        fetchCrossDatasetReferences(documentId, {\n          versionedClient,\n        }),\n      ),\n    )\n  },\n)\n\nexport function useReferringDocuments(documentId: string): ReferringDocuments {\n  const versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n\n  const documentStore = useDocumentStore()\n  const publishedId = getPublishedId(documentId)\n\n  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(\n    useMemo(() => [publishedId, documentStore], [documentStore, publishedId]),\n  )\n\n  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(\n    useMemo(() => [publishedId, versionedClient], [publishedId, versionedClient]),\n  )\n\n  const projectIds = useMemo(() => {\n    return Array.from(\n      new Set(\n        crossDatasetReferences?.references\n          .map((crossDatasetReference) => crossDatasetReference.projectId)\n          .filter(Boolean),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const datasetNames = useMemo(() => {\n    return Array.from(\n      new Set<string>(\n        crossDatasetReferences?.references\n          // .filter((name) => typeof name === 'string')\n          .map((crossDatasetReference) => crossDatasetReference?.datasetName || '')\n          .filter((datasetName) => Boolean(datasetName) && datasetName !== ''),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const hasUnknownDatasetNames = useMemo(() => {\n    return Boolean(\n      crossDatasetReferences?.references.some(\n        (crossDatasetReference) => typeof crossDatasetReference.datasetName !== 'string',\n      ),\n    )\n  }, [crossDatasetReferences?.references])\n\n  return {\n    totalCount: (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0),\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n    internalReferences,\n    crossDatasetReferences,\n    isLoading: isInternalReferencesLoading || isCrossDatasetReferencesLoading,\n  }\n}\n", "import {Box, Flex} from '@sanity/ui'\nimport {useId, useMemo} from 'react'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DocTitle} from '../DocTitle'\nimport {ConfirmDeleteDialogBody} from './ConfirmDeleteDialogBody'\nimport {useReferringDocuments} from './useReferringDocuments'\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface ConfirmDeleteDialogProps {\n  /**\n   * Incoming document ID used to find other referencing documents. This\n   * field respects draft IDs (e.g. if you pass in a published ID when one\n   * doesn't exist the document title may not show up).\n   */\n  id: string\n  /**\n   * The schema typename of the incoming document\n   */\n  type: string\n  /**\n   * The name of the action being done. (e.g. the `'unpublish'` action requires\n   * the same document deletion confirmation).\n   */\n  action?: 'delete' | 'unpublish'\n  onCancel: () => void\n  onConfirm: () => void\n}\n\n/**\n * A confirmation dialog used to prevent unwanted document deletes. Loads all\n * the referencing internal and cross-data references prior to showing the\n * delete button.\n *\n * @internal\n */\nexport function ConfirmDeleteDialog({\n  id,\n  type,\n  action = 'delete',\n  onCancel,\n  onConfirm,\n}: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const dialogId = `deletion-confirmation-${useId()}`\n  const {\n    internalReferences,\n    crossDatasetReferences,\n    isLoading,\n    totalCount,\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n  } = useReferringDocuments(id)\n  const documentTitle = <DocTitle document={useMemo(() => ({_id: id, _type: type}), [id, type])} />\n  const showConfirmButton = !isLoading\n\n  return (\n    <Dialog\n      width={1}\n      id={dialogId}\n      header={t('confirm-delete-dialog.header.text', {context: action})}\n      footer={{\n        cancelButton: {\n          onClick: onCancel,\n          text: t('confirm-delete-dialog.cancel-button.text'),\n        },\n        confirmButton: showConfirmButton\n          ? {\n              text:\n                totalCount > 0\n                  ? t('confirm-delete-dialog.confirm-anyway-button.text', {context: action})\n                  : t('confirm-delete-dialog.confirm-button.text', {context: action}),\n              onClick: onConfirm,\n            }\n          : undefined,\n      }}\n      onClose={onCancel}\n      onClickOutside={onCancel}\n    >\n      <DialogBody>\n        {crossDatasetReferences && internalReferences && !isLoading ? (\n          <ConfirmDeleteDialogBody\n            crossDatasetReferences={crossDatasetReferences}\n            internalReferences={internalReferences}\n            documentTitle={documentTitle}\n            isLoading={isLoading}\n            totalCount={totalCount}\n            action={action}\n            projectIds={projectIds}\n            datasetNames={datasetNames}\n            hasUnknownDatasetNames={hasUnknownDatasetNames}\n            onReferenceLinkClick={onCancel}\n          />\n        ) : (\n          <LoadingContainer data-testid=\"loading-container\">\n            <LoadingBlock showText title={t('confirm-delete-dialog.loading.text')} />\n          </LoadingContainer>\n        )}\n      </DialogBody>\n    </Dialog>\n  )\n}\n", "import {Box, ErrorBoundary, Text} from '@sanity/ui'\nimport {type ComponentProps, useCallback, useId, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {ConfirmDeleteDialog, type ConfirmDeleteDialogProps} from './ConfirmDeleteDialog'\n\nexport type {ConfirmDeleteDialogProps}\n\ntype ArgType<T> = T extends (arg: infer U) => unknown ? U : never\ntype ErrorInfo = ArgType<ComponentProps<typeof ErrorBoundary>['onCatch']>\n\n/** @internal */\nfunction ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const id = useId()\n  const [error, setError] = useState<ErrorInfo | null>(null)\n  const handleRetry = useCallback(() => setError(null), [])\n\n  return error ? (\n    <Dialog\n      id={`dialog-error-${id}`}\n      data-testid=\"confirm-delete-error-dialog\"\n      header={t('confirm-delete-dialog.error.title.text')}\n      footer={{\n        confirmButton: {\n          text: t('confirm-delete-dialog.error.retry-button.text'),\n          onClick: handleRetry,\n          tone: 'default',\n        },\n      }}\n      onClose={props.onCancel}\n    >\n      <Box padding={4}>\n        <Text size={1}>{t('confirm-delete-dialog.error.message.text')}</Text>\n      </Box>\n    </Dialog>\n  ) : (\n    <ErrorBoundary onCatch={setError}>\n      <ConfirmDeleteDialog {...props} />\n    </ErrorBoundary>\n  )\n}\n\nexport {ConfirmDeleteDialogContainer as ConfirmDeleteDialog}\n", "import {type ReactElement, useEffect, useState} from 'react'\n\nexport function Delay({\n  children,\n  ms = 0,\n}: {\n  children?: ReactElement | (() => ReactElement)\n  ms?: number\n}): ReactElement {\n  const [ready, setReady] = useState(ms <= 0)\n\n  useEffect(() => {\n    if (ms <= 0) {\n      return undefined\n    }\n\n    const timeoutId = setTimeout(() => setReady(true), ms)\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [ms])\n\n  if (!ready || !children) {\n    return <></>\n  }\n\n  return typeof children === 'function' ? children() : children\n}\n", "/**\n * @internal\n */\nexport const PANE_DEBUG = false\n\n/**\n * @internal\n */\nexport const PANE_COLLAPSED_WIDTH = 51\n\n/**\n * @internal\n */\nexport const PANE_DEFAULT_MIN_WIDTH = PANE_COLLAPSED_WIDTH * 4\n", "import {Layer} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePaneLayout} from './usePaneLayout'\n\nconst Root = styled(Layer)`\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n`\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneDivider({\n  disabled,\n  element,\n}: {\n  disabled?: boolean\n  element: HTMLElement | null\n}) {\n  const {resize} = usePaneLayout()\n  const [dragging, setDragging] = useState(false)\n\n  const handleMouseDown = useCallback(\n    (event: any) => {\n      if (!element) return\n\n      setDragging(true)\n\n      event.preventDefault()\n\n      const startX = event.pageX\n\n      resize('start', element, 0)\n\n      const handleMouseMove = (e: MouseEvent) => {\n        e.preventDefault()\n\n        const deltaX = e.pageX - startX\n\n        resize('move', element, deltaX)\n      }\n\n      const handleMouseUp = (e: MouseEvent) => {\n        e.preventDefault()\n\n        setDragging(false)\n\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n\n        resize('end', element, 0)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [element, resize],\n  )\n\n  return (\n    <Root\n      data-disabled={disabled ? '' : undefined}\n      data-dragging={dragging ? '' : undefined}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n", "import {BoundaryElementProvider, Card, type CardProps, Code, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {IsLastPaneProvider, LegacyLayerProvider} from 'sanity'\nimport {PaneContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {PaneDivider} from './PaneDivider'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneProps {\n  children?: ReactNode\n  currentMinWidth?: number\n  currentMaxWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  selected?: boolean\n}\n\nconst Root = styled(Card)`\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n`\n\n/**\n * @hidden\n * @internal\n */\n// eslint-disable-next-line complexity\nexport const Pane = forwardRef(function Pane(\n  props: PaneProps &\n    Omit<CardProps, 'as' | 'overflow'> &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'hidden' | 'id' | 'style'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    children,\n    currentMinWidth: currentMinWidthProp,\n    currentMaxWidth: currentMaxWidthProp,\n    flex: flexProp = 1,\n    id,\n    minWidth: minWidthProp,\n    maxWidth: maxWidthProp,\n    selected = false,\n    ...restProps\n  } = props\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const {\n    collapse,\n    collapsed: layoutCollapsed,\n    expand,\n    expandedElement,\n    mount,\n    panes,\n  } = usePaneLayout()\n  const pane = panes.find((p) => p.element === rootElement)\n  const paneIndex = pane && panes.indexOf(pane)\n  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined\n  const isLast = paneIndex === panes.length - 1\n  const expanded = expandedElement === rootElement\n  const collapsed = layoutCollapsed ? false : pane?.collapsed || false\n  const nextCollapsed = nextPane?.collapsed || false\n  const ref = useRef<HTMLDivElement | null>(null)\n  const flex = pane?.flex ?? flexProp\n  const currentMinWidth = pane?.currentMinWidth ?? currentMinWidthProp\n  const currentMaxWidth = pane?.currentMaxWidth ?? currentMaxWidthProp\n\n  // Forward ref to parent\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(forwardedRef, () => ref.current)\n\n  const setRef = useCallback((refValue: HTMLDivElement | null) => {\n    setRootElement(refValue)\n    ref.current = refValue\n  }, [])\n\n  useEffect(() => {\n    if (!rootElement) return undefined\n    return mount(rootElement, {\n      currentMinWidth: currentMinWidthProp,\n      currentMaxWidth: currentMaxWidthProp,\n      flex: flexProp,\n      id,\n      minWidth: minWidthProp,\n      maxWidth: maxWidthProp,\n    })\n  }, [\n    currentMinWidthProp,\n    currentMaxWidthProp,\n    flexProp,\n    id,\n    minWidthProp,\n    maxWidthProp,\n    mount,\n    rootElement,\n  ])\n\n  const handleCollapse = useCallback(() => {\n    if (!rootElement) return\n    collapse(rootElement)\n  }, [collapse, rootElement])\n\n  const handleExpand = useCallback(() => {\n    if (!rootElement) return\n    expand(rootElement)\n  }, [expand, rootElement])\n\n  const contextValue = useMemo(\n    () => ({\n      collapse: handleCollapse,\n      collapsed: layoutCollapsed ? false : collapsed,\n      expand: handleExpand,\n      index: paneIndex,\n      isLast,\n      rootElement,\n    }),\n    [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement],\n  )\n\n  const minWidth = useMemo(() => {\n    if (layoutCollapsed) {\n      return undefined\n    }\n\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (currentMinWidth === 0) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    if (isLast) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH\n  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp])\n\n  const maxWidth = useMemo(() => {\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (layoutCollapsed && isLast) {\n      return undefined\n    }\n\n    if (isLast) {\n      if (maxWidthProp) {\n        return currentMaxWidth ?? maxWidthProp\n      }\n\n      return undefined\n    }\n\n    return currentMaxWidth ?? maxWidthProp\n  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp])\n\n  const hidden = layoutCollapsed && !isLast\n\n  const divider = useMemo(\n    () =>\n      !isLast &&\n      !layoutCollapsed && (\n        <LegacyLayerProvider zOffset=\"paneResizer\">\n          <PaneDivider disabled={collapsed || nextCollapsed} element={rootElement} />\n        </LegacyLayerProvider>\n      ),\n    [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement],\n  )\n\n  const style = useMemo(\n    () => ({\n      flex,\n      minWidth,\n      maxWidth: maxWidth === Infinity ? undefined : maxWidth,\n    }),\n    [flex, minWidth, maxWidth],\n  )\n\n  return (\n    <>\n      <LegacyLayerProvider zOffset=\"pane\">\n        <PaneContext.Provider value={contextValue}>\n          <IsLastPaneProvider isLastPane={isLast}>\n            <Root\n              data-testid=\"pane\"\n              data-ui=\"Pane\"\n              tone=\"inherit\"\n              hidden={hidden}\n              id={id}\n              overflow={layoutCollapsed ? undefined : 'hidden'}\n              {...restProps}\n              data-pane-collapsed={collapsed ? '' : undefined}\n              data-pane-index={paneIndex}\n              data-pane-selected={selected ? '' : undefined}\n              ref={setRef}\n              style={style}\n            >\n              {PANE_DEBUG && (\n                <Card padding={4} tone={expanded ? 'primary' : 'caution'}>\n                  <Code size={1}>\n                    {[\n                      `#${paneIndex}`,\n                      `collapsed=${collapsed}`,\n                      `currentMinWidth=${currentMinWidth}`,\n                      `currentMaxWidth=${currentMaxWidth}`,\n                      `flex=${flex}`,\n                      `minWidth=${minWidth}`,\n                      `maxWidth=${maxWidth}`,\n                    ].join('\\n')}\n                  </Code>\n                </Card>\n              )}\n\n              <BoundaryElementProvider element={rootElement}>\n                {!hidden && (\n                  <Flex direction=\"column\" height=\"fill\">\n                    {children}\n                  </Flex>\n                )}\n              </BoundaryElementProvider>\n            </Root>\n          </IsLastPaneProvider>\n        </PaneContext.Provider>\n      </LegacyLayerProvider>\n\n      {divider}\n    </>\n  )\n})\n", "import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  position: relative;\n  outline: none;\n`\n\nRoot.displayName = 'PaneContent__root'\n", "import {useContext} from 'react'\nimport {PaneContext} from 'sanity/_singletons'\n\nimport {type PaneContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePane(): PaneContextValue {\n  const pane = useContext(PaneContext)\n\n  if (!pane) {\n    throw new Error('Pane: missing context value')\n  }\n\n  return pane\n}\n", "import {type BoxOverflow} from '@sanity/ui'\nimport {type ElementType, type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {Root} from './PaneContent.styles'\nimport {usePane} from './usePane'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneContentProps {\n  as?: ElementType | keyof JSX.IntrinsicElements\n  overflow?: BoxOverflow\n  padding?: number | number[]\n}\n\n/**\n * @hidden\n * @internal\n */\nexport const PaneContent = forwardRef(function PaneContent(\n  props: PaneContentProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {as, children, overflow, padding, ...restProps} = props\n  const {collapsed} = usePane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  return (\n    <Root\n      data-testid=\"pane-content\"\n      forwardedAs={as}\n      {...restProps}\n      flex={1}\n      hidden={collapsed}\n      overflow={layoutCollapsed ? undefined : overflow}\n      padding={padding}\n      ref={ref}\n      tone=\"inherit\"\n    >\n      {children}\n    </Root>\n  )\n})\n", "import {CheckmarkIcon} from '@sanity/icons'\nimport {MenuDivider, Text} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {TooltipOfDisabled, useGetI18nText, useI18nText} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {MenuGroup, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\nconst MENU_GROUP_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'left-start',\n  portal: true,\n}\n\nexport function PaneMenuButtonItem(props: {\n  disabled?: boolean\n  isAfterGroup: boolean\n  node: _PaneMenuNode\n}) {\n  const {disabled, isAfterGroup, node} = props\n  const getI18nText = useGetI18nText('i18n' in node ? node : undefined)\n\n  if (node.type === 'divider') {\n    return <MenuDivider />\n  }\n\n  const {title} = getI18nText(node)\n\n  if (node.type === 'group') {\n    if (node.children.length === 0) {\n      return null\n    }\n\n    if (node.expanded) {\n      return (\n        <>\n          {isAfterGroup && <MenuDivider />}\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </>\n      )\n    }\n\n    return (\n      <>\n        {isAfterGroup && <MenuDivider />}\n        <MenuGroup\n          disabled={disabled}\n          icon={node.icon}\n          popover={MENU_GROUP_POPOVER_PROPS}\n          text={title}\n        >\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </MenuGroup>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isAfterGroup && <MenuDivider />}\n      <PaneContextMenuItemResolver disabled={disabled} node={node} />\n    </>\n  )\n}\n\nfunction PaneContextMenuItemResolver(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {node} = props\n\n  if (node.intent) {\n    return <PaneContextIntentMenuItem {...props} intent={node.intent} />\n  }\n\n  return <PaneContextMenuItem {...props} />\n}\n\nfunction PaneContextMenuItem(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {disabled, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        icon={node.icon}\n        iconRight={node.iconRight || (node.selected && CheckmarkIcon)}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClick={node.onAction}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n\nfunction PaneContextIntentMenuItem(props: {\n  disabled?: boolean\n  intent: Intent\n  node: _PaneMenuItem\n}) {\n  const {disabled, intent, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        as=\"a\"\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        href={intentLink.href}\n        icon={node.icon}\n        iconRight={node.selected ? CheckmarkIcon : undefined}\n        onClick={handleClick}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n", "import {Menu, MenuDivider} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {ContextMenuButton} from 'sanity'\n\nimport {MenuButton, type PopoverProps} from '../../../ui-components'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\ninterface PaneContextMenuButtonProps {\n  nodes: _PaneMenuNode[]\n  actionsNodes?: ReactNode\n}\n\nconst CONTEXT_MENU_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nfunction nodesHasTone(nodes: _PaneMenuNode[], tone: NonNullable<_PaneMenuItem['tone']>): boolean {\n  return nodes.some((node) => {\n    return (\n      (node.type === 'item' && node.tone === tone) ||\n      (node.type === 'group' && nodesHasTone(node.children, tone))\n    )\n  })\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneContextMenuButton(props: PaneContextMenuButtonProps) {\n  const {nodes, actionsNodes} = props\n  const id = useId()\n\n  const hasCritical = nodesHasTone(nodes, 'critical')\n  const hasCaution = nodesHasTone(nodes, 'caution')\n\n  return (\n    <MenuButton\n      button={\n        <ContextMenuButton\n          // eslint-disable-next-line no-nested-ternary\n          tone={hasCritical ? 'critical' : hasCaution ? 'caution' : undefined}\n          data-testid=\"pane-context-menu-button\"\n        />\n      }\n      id={id}\n      menu={\n        <Menu>\n          {actionsNodes && (\n            <>\n              {actionsNodes}\n              <MenuDivider />\n            </>\n          )}\n          {nodes.map((node, nodeIndex) => {\n            const isAfterGroup = nodes[nodeIndex - 1]?.type === 'group'\n            return <PaneMenuButtonItem isAfterGroup={isAfterGroup} key={node.key} node={node} />\n          })}\n        </Menu>\n      }\n      popover={CONTEXT_MENU_POPOVER_PROPS}\n    />\n  )\n}\n", "import {Card, Layer} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Layer)`\n  position: sticky;\n  bottom: 0;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -1px;\n    border-bottom: 1px solid var(--card-border-color);\n  }\n`\n\nexport const RootCard = styled(Card)`\n  padding-bottom: env(safe-area-inset-bottom);\n`\n", "import {Box} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Root, RootCard} from './PaneFooter.styles'\nimport {usePane} from './usePane'\n\ninterface PaneFooterProps {\n  children?: ReactNode\n  padding?: number | number[]\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneFooter = forwardRef(function PaneFooter(\n  props: PaneFooterProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {children, padding} = props\n  const {collapsed} = usePane()\n\n  return (\n    <LegacyLayerProvider zOffset=\"paneFooter\">\n      <Root data-testid=\"pane-footer\" hidden={collapsed} ref={ref}>\n        <RootCard tone=\"inherit\">\n          <Box padding={padding}>{children}</Box>\n        </RootCard>\n      </Root>\n    </LegacyLayerProvider>\n  )\n})\n", "import {Box, Card, Flex, Layer, rgba, Text, TextSkeleton, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\ninterface RootProps {\n  $border?: boolean\n}\n\nexport const Root = styled(Layer)<RootProps>(({$border}) => {\n  return css`\n    line-height: 0;\n    position: sticky;\n    top: 0;\n\n    &:not([data-collapsed]):after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: -1px;\n      border-bottom: 1px solid ${$border ? 'var(--card-border-color)' : 'transparent'};\n      opacity: 1;\n    }\n  `\n})\n\nexport const Layout = styled(Flex)`\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n`\n\nexport const TitleCard = styled(Card)(({theme}: {theme: Theme}) => {\n  const {fg, bg} = theme.sanity.color.card.enabled\n\n  // Disable color updates on hover\n  return css`\n    background-color: ${bg};\n\n    [data-ui='Text'] {\n      color: ${fg};\n    }\n  `\n})\n\nexport const TitleTextSkeleton = styled(TextSkeleton)`\n  width: 66%;\n  max-width: 175px;\n`\n\nexport const TitleText = styled(Text)`\n  cursor: default;\n  outline: none;\n`\n\nexport const TabsBox = styled(Box)(({theme}: {theme: Theme}) => {\n  const {color, space} = theme.sanity\n\n  return css`\n    overflow: hidden;\n    overflow: clip;\n    position: relative;\n\n    & > div {\n      white-space: nowrap;\n      overflow: auto;\n      /* Hide scrollbars */\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    /* right padding */\n    & > div:after {\n      content: '';\n      display: inline-block;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ${space[3]}px;\n      height: 1px;\n    }\n\n    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      background: linear-gradient(to right, ${rgba(color.base.bg, 0)}, var(--card-bg-color));\n      width: ${space[3]}px;\n      pointer-events: none;\n    }\n  `\n})\n", "import {Box, Card, Flex, LayerProvider, useElementRect} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode, useCallback, useMemo} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Layout, Root, TabsBox, TitleCard, TitleText, TitleTextSkeleton} from './PaneHeader.styles'\nimport {usePane} from './usePane'\n\n/**\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneHeaderProps {\n  actions?: ReactNode\n  backButton?: ReactNode\n  border?: boolean\n  contentAfter?: ReactNode\n  loading?: boolean\n  subActions?: ReactNode\n  tabIndex?: number\n  tabs?: ReactNode\n  title: ReactNode\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneHeader = forwardRef(function PaneHeader(\n  props: PaneHeaderProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {actions, backButton, border, contentAfter, loading, subActions, tabs, tabIndex, title} =\n    props\n  const {collapse, collapsed, expand, rootElement: paneElement} = usePane()\n  const paneRect = useElementRect(paneElement || null)\n\n  const layoutStyle = useMemo(\n    () => ({\n      width: collapsed ? paneRect?.height || window.innerHeight : undefined,\n    }),\n    [collapsed, paneRect],\n  )\n\n  const handleTitleClick = useCallback(() => {\n    if (collapsed) return\n    collapse()\n  }, [collapse, collapsed])\n\n  const handleLayoutClick = useCallback(() => {\n    if (!collapsed) return\n    expand()\n  }, [collapsed, expand])\n\n  const showTabsOrSubActions = Boolean(!collapsed && (tabs || subActions))\n\n  return (\n    <LayerProvider zOffset={100}>\n      <Root\n        $border={border}\n        data-collapsed={collapsed ? '' : undefined}\n        data-testid=\"pane-header\"\n        ref={ref}\n      >\n        <LegacyLayerProvider zOffset=\"paneHeader\">\n          <Card data-collapsed={collapsed ? '' : undefined} tone=\"inherit\">\n            <Layout\n              gap={1}\n              onClick={handleLayoutClick}\n              padding={3}\n              paddingBottom={collapsed ? 3 : 2}\n              sizing=\"border\"\n              style={layoutStyle}\n            >\n              {backButton && <Box flex=\"none\">{backButton}</Box>}\n\n              <TitleCard\n                __unstable_focusRing\n                flex={1}\n                forwardedAs=\"button\"\n                onClick={handleTitleClick}\n                paddingLeft={backButton ? 1 : 2}\n                padding={2}\n                tabIndex={tabIndex}\n              >\n                {loading && <TitleTextSkeleton animated radius={1} size={1} />}\n                {!loading && (\n                  <TitleText size={1} textOverflow=\"ellipsis\" weight=\"semibold\">\n                    {title}\n                  </TitleText>\n                )}\n              </TitleCard>\n\n              {actions && (\n                <Flex align=\"center\" hidden={collapsed}>\n                  <LegacyLayerProvider zOffset=\"paneHeader\">{actions}</LegacyLayerProvider>\n                </Flex>\n              )}\n            </Layout>\n\n            {showTabsOrSubActions && (\n              <Flex\n                align=\"center\"\n                hidden={collapsed}\n                overflow=\"auto\"\n                paddingBottom={3}\n                paddingX={3}\n              >\n                <TabsBox flex={1} marginRight={subActions ? 3 : 0}>\n                  {tabs}\n                </TabsBox>\n\n                {subActions && subActions}\n              </Flex>\n            )}\n\n            {!collapsed && contentAfter && contentAfter}\n          </Card>\n        </LegacyLayerProvider>\n      </Root>\n    </LayerProvider>\n  )\n})\n", "import {UnknownIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type MouseEvent, useCallback, useId} from 'react'\nimport {StatusButton, useI18nText, useTranslation} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {Button, MenuButton} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuGroup, type _PaneMenuItem} from './types'\n\nfunction getDisabledReason(node: _PaneMenuItem) {\n  if (!node.disabled) {\n    return {disabledReason: undefined, ariaLabel: undefined, isDisabled: false}\n  }\n\n  /**\n   * This component supports receiving a `reason: string | react.ReactNode`.\n   * We are casting it as string, to avoid the ts error, as content will be rendered into the tooltip which only accepts string, but it won't crash if it's a ReactNode.\n   * For the aria label, we want to check if it's actually a string, to avoid generating an aria-label with the value `[object Object]`.\n   */\n  const disabledReason =\n    typeof node.disabled === 'object' ? (node.disabled.reason as string) : undefined\n  const ariaLabel =\n    typeof node.disabled === 'object' && typeof node.disabled?.reason === 'string'\n      ? node.disabled.reason\n      : 'This is disabled'\n\n  return {disabledReason, ariaLabel, isDisabled: Boolean(node.disabled)}\n}\nexport interface PaneHeaderActionButtonProps {\n  node: _PaneMenuItem | _PaneMenuGroup\n}\n\nexport function PaneHeaderActionButton(props: PaneHeaderActionButtonProps) {\n  const {node} = props\n\n  if (node.type === 'item') {\n    return <PaneHeaderMenuItemActionButton node={node} />\n  }\n\n  if (node.type === 'group') {\n    return <PaneHeaderMenuGroupActionButton node={node} />\n  }\n\n  console.warn('unknown menu node (expected `type: \"item\" | \"group\"`):', node)\n\n  return null\n}\n\nexport interface PaneHeaderMenuItemActionButtonProps {\n  node: _PaneMenuItem\n}\n\nexport function PaneHeaderMenuItemActionButton(props: PaneHeaderMenuItemActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n  const {t} = useTranslation()\n\n  if (node.intent) {\n    return <PaneHeaderActionIntentButton {...props} intent={node.intent} />\n  }\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      disabled={isDisabled}\n      icon={node.icon}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClick={node.onAction}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : title,\n      }}\n    />\n  )\n}\n\nfunction PaneHeaderActionIntentButton(props: {intent: Intent; node: _PaneMenuItem}) {\n  const {intent, node} = props\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n  const {t} = useTranslation()\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      forwardedAs=\"a\"\n      disabled={isDisabled}\n      href={intentLink.href}\n      icon={node.icon}\n      onClick={handleClick}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || node.title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : node.title,\n        placement: 'bottom',\n        portal: true,\n      }}\n    />\n  )\n}\n\nexport interface PaneHeaderMenuGroupActionButtonProps {\n  node: _PaneMenuGroup\n}\n\nfunction PaneHeaderMenuGroupActionButton(props: PaneHeaderMenuGroupActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          disabled={!!node.disabled}\n          icon={node.icon ?? UnknownIcon}\n          label={title}\n          mode=\"bleed\"\n          tooltipProps={{content: node.title, portal: true}}\n        />\n      }\n      id={useId()}\n      menu={\n        <Menu>\n          {node.children.map((child, idx) => {\n            return (\n              <PaneMenuButtonItem\n                disabled={Boolean(node.disabled)}\n                isAfterGroup={node.children[idx - 1]?.type === 'group'}\n                key={child.key}\n                node={child}\n              />\n            )\n          })}\n        </Menu>\n      }\n    />\n  )\n}\n", "import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n`\n", "import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {type PaneConfigOpts, type PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n", "/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n", "import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n", "import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {\n  type PaneConfigOpts,\n  type PaneData,\n  type PaneResizeCache,\n  type PaneResizeData,\n} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n", "import {type CardProps, useElementRect} from '@sanity/ui'\nimport {type HTMLProps, useEffect, useMemo, useState} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, type PaneLayoutState} from './paneLayoutController'\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const controller = useMemo(() => createPaneLayoutController(), [])\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n", "/* eslint-disable camelcase */\n\nimport {negate} from 'lodash'\n\nimport {type _PaneMenuGroup, type _PaneMenuItem, type _PaneMenuNode} from './components/pane/types'\nimport {type DocumentFieldMenuActionNode, type PaneMenuItem, type PaneMenuItemGroup} from './types'\n\nexport function isMenuNodeButton(node: _PaneMenuNode): node is _PaneMenuItem | _PaneMenuGroup {\n  return (node.type === 'item' || node.type === 'group') && node.renderAsButton\n}\n\nexport const isNotMenuNodeButton = negate(isMenuNodeButton)\n\nexport function resolveMenuNodes(params: {\n  actionHandler: (item: PaneMenuItem) => void\n  fieldActions?: DocumentFieldMenuActionNode[]\n  menuItems: PaneMenuItem[]\n  menuItemGroups: PaneMenuItemGroup[]\n}): _PaneMenuNode[] {\n  const {fieldActions = [], menuItems, menuItemGroups} = params\n\n  const nodes: _PaneMenuNode[] = []\n\n  let keyOffset = 0\n\n  for (let i = 0; i < fieldActions.length; i += 1) {\n    const a = fieldActions[i]\n\n    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`))\n  }\n\n  keyOffset += nodes.length\n\n  const groups: _PaneMenuGroup[] = []\n\n  for (const itemGroup of menuItemGroups) {\n    const group = groups.find((g) => g.key === itemGroup.id)\n\n    if (!group) {\n      groups.push({\n        type: 'group',\n        key: itemGroup.id,\n\n        children: [],\n        expanded: true,\n        renderAsButton: false,\n        title: itemGroup.title,\n        i18n: itemGroup.i18n,\n      })\n    }\n  }\n\n  const ungroupedItems: _PaneMenuItem[] = []\n\n  for (let i = 0; i < menuItems.length; i += 1) {\n    const item = menuItems[i]\n\n    let group = item.group && groups.find((g) => g.key === item.group)\n\n    if (item.group && !group) {\n      group = {\n        type: 'group',\n        key: item.group,\n\n        expanded: true,\n        icon: item.icon,\n        title: item.group,\n        children: [],\n        renderAsButton: false,\n      }\n      groups.push(group)\n    }\n\n    if (group) {\n      group.children.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    } else {\n      ungroupedItems.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    }\n  }\n\n  return [...ungroupedItems, ...groups, ...nodes]\n}\n\nfunction mapFieldActionToPaneMenuNode(a: DocumentFieldMenuActionNode, key: string): _PaneMenuNode {\n  if (a.type === 'divider') {\n    return {\n      type: 'divider',\n      key,\n    }\n  }\n\n  if (a.type === 'group') {\n    return {\n      type: 'group',\n      key,\n\n      children: a.children.map((child, childIdx) =>\n        mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`),\n      ),\n      disabled: a.disabled,\n      expanded: a.expanded ?? true,\n      icon: a.icon,\n      title: a.title,\n      i18n: a.i18n,\n      renderAsButton: a.renderAsButton ?? false,\n    }\n  }\n\n  return {\n    type: 'item',\n    key,\n    intent: a.intent,\n    disabled: a.disabled,\n    icon: a.icon,\n    iconRight: a.iconRight,\n    onAction: a.onAction,\n    renderAsButton: a.renderAsButton ?? false,\n    selected: a.selected,\n    title: a.title,\n    i18n: a.i18n,\n    tone: a.tone,\n  }\n}\n", "import {type ComponentProps, type ForwardedRef, forwardRef, type ReactNode, useMemo} from 'react'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, type ButtonProps} from '../../ui-components'\nimport {type PaneMenuItem} from '../types'\n\ntype RouterIntent = NonNullable<PaneMenuItem['intent']>\n\nexport const IntentButton = forwardRef(function IntentButton(\n  props: {\n    intent: RouterIntent\n  } & ButtonProps &\n    Omit<ComponentProps<typeof Button>, 'as' | 'href' | 'type'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, ...restProps} = props\n\n  const Link = useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      forwardRef(function Link(\n        linkProps: {children: ReactNode},\n        linkRef: ForwardedRef<HTMLAnchorElement>,\n      ) {\n        return (\n          <IntentLink {...linkProps} intent={intent.type} params={intent.params} ref={linkRef} />\n        )\n      }),\n    [intent],\n  )\n\n  return props.disabled ? (\n    <Button {...restProps} as=\"a\" role=\"link\" aria-disabled=\"true\" />\n  ) : (\n    <Button {...restProps} as={Link} data-as=\"a\" ref={ref as ForwardedRef<HTMLButtonElement>} />\n  )\n})\n", "import {type ComponentProps, type ReactNode} from 'react'\nimport {InsufficientPermissionsMessage, useCurrentUser, useTranslation} from 'sanity'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface InsufficientPermissionsMessageTooltipProps {\n  reveal: boolean\n  /**\n   * delegates to `InsufficientPermissionsMessage`'s `context` prop\n   * @see InsufficientPermissionsMessage\n   */\n  context: ComponentProps<typeof InsufficientPermissionsMessage>['context']\n  loading: boolean\n  children: ReactNode\n}\n\nexport function InsufficientPermissionsMessageTooltip({\n  reveal,\n  context,\n  loading,\n  children,\n}: InsufficientPermissionsMessageTooltipProps) {\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!reveal) {\n    return <>{children}</>\n  }\n\n  return (\n    <Tooltip\n      content={\n        loading ? (\n          t('insufficient-permissions-message-tooltip.loading-text')\n        ) : (\n          <InsufficientPermissionsMessage context={context} currentUser={currentUser} />\n        )\n      }\n      portal\n    >\n      {/* this wrapping div is to allow mouse events */}\n      {/* while the child element is disabled */}\n      <div>{children}</div>\n    </Tooltip>\n  )\n}\n", "import {AddIcon} from '@sanity/icons'\nimport {type Schema} from '@sanity/types'\nimport {Menu} from '@sanity/ui'\nimport {type ComponentProps, type ForwardedRef, forwardRef, useMemo} from 'react'\nimport {\n  type InitialValueTemplateItem,\n  type Template,\n  type TemplatePermissionsResult,\n  useGetI18nText,\n  useSchema,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, MenuButton, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {IntentButton} from '../IntentButton'\nimport {InsufficientPermissionsMessageTooltip} from './InsufficientPermissionsMessageTooltip'\n\nexport type PaneHeaderIntentProps = ComponentProps<typeof IntentButton>['intent']\n\nconst POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nconst getIntent = (\n  schema: Schema,\n  templates: Template[],\n  item: InitialValueTemplateItem,\n): PaneHeaderIntentProps | null => {\n  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType\n  if (!typeName) return null\n\n  const baseParams = {\n    template: item.templateId,\n    type: typeName,\n    id: item.initialDocumentId,\n  }\n\n  return {\n    type: 'create',\n    params: item.parameters ? [baseParams, item.parameters] : baseParams,\n  }\n}\n\ninterface PaneHeaderCreateButtonProps {\n  templateItems: InitialValueTemplateItem[]\n}\n\nexport function PaneHeaderCreateButton({templateItems}: PaneHeaderCreateButtonProps) {\n  const schema = useSchema()\n  const templates = useTemplates()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const getI18nText = useGetI18nText([...templateItems, ...templates])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n\n  const nothingGranted = useMemo(() => {\n    return (\n      !isTemplatePermissionsLoading &&\n      templatePermissions?.every((permission) => !permission.granted)\n    )\n  }, [isTemplatePermissionsLoading, templatePermissions])\n\n  const permissionsById = useMemo(() => {\n    if (!templatePermissions) return {}\n    return templatePermissions.reduce<Record<string, TemplatePermissionsResult | undefined>>(\n      (acc, permission) => {\n        acc[permission.id] = permission\n        return acc\n      },\n      {},\n    )\n  }, [templatePermissions])\n\n  if (nothingGranted) {\n    return (\n      <InsufficientPermissionsMessageTooltip\n        context=\"create-document-type\"\n        reveal\n        loading={isTemplatePermissionsLoading}\n      >\n        <Button\n          aria-label={t('pane-header.disabled-created-button.aria-label')}\n          icon={AddIcon}\n          data-testid=\"action-intent-button\"\n          disabled\n          mode=\"bleed\"\n          // This button handles the tooltip in a special way, won't reuse the forced tooltip.\n          tooltipProps={null}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  if (templateItems.length === 1) {\n    const firstItem = templateItems[0]\n    const permissions = permissionsById[firstItem.id]\n    const disabled = !permissions?.granted\n    const intent = getIntent(schema, templates, firstItem)\n    if (!intent) return null\n\n    return (\n      <InsufficientPermissionsMessageTooltip\n        reveal={disabled}\n        loading={isTemplatePermissionsLoading}\n        context=\"create-document-type\"\n      >\n        <IntentButton\n          aria-label={getI18nText(firstItem).title}\n          icon={firstItem.icon || AddIcon}\n          intent={intent}\n          mode=\"bleed\"\n          disabled={disabled}\n          data-testid=\"action-intent-button\"\n          tooltipProps={disabled ? null : {content: t('pane-header.create-new-button.tooltip')}}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          icon={AddIcon}\n          mode=\"bleed\"\n          data-testid=\"multi-action-intent-button\"\n          tooltipProps={{content: t('pane-header.create-new-button.tooltip')}}\n        />\n      }\n      id=\"create-menu\"\n      menu={\n        <Menu>\n          {templateItems.map((item, itemIndex) => {\n            const permissions = permissionsById[item.id]\n            const disabled = !permissions?.granted\n            const intent = getIntent(schema, templates, item)\n            const template = templates.find((i) => i.id === item.templateId)\n            if (!template || !intent) return null\n\n            const Link = forwardRef((linkProps, linkRef: ForwardedRef<never>) =>\n              disabled ? (\n                <button type=\"button\" disabled {...linkProps} ref={linkRef} />\n              ) : (\n                <IntentLink\n                  {...linkProps}\n                  intent={intent.type}\n                  params={intent.params}\n                  ref={linkRef}\n                />\n              ),\n            )\n\n            Link.displayName = 'Link'\n\n            const {title} = getI18nText({\n              ...item,\n              // replace the title with the template title\n              title: item.title || getI18nText(template).title,\n            })\n\n            return (\n              <InsufficientPermissionsMessageTooltip\n                context=\"create-document-type\"\n                key={item.id}\n                reveal={disabled}\n                loading={isTemplatePermissionsLoading}\n              >\n                <MenuItem\n                  as={Link}\n                  data-as={disabled ? 'button' : 'a'}\n                  text={title}\n                  aria-label={\n                    disabled ? t('pane-header.disabled-created-button.aria-label') : title\n                  }\n                  disabled={disabled}\n                  data-testid={`action-intent-button-${itemIndex}`}\n                />\n              </InsufficientPermissionsMessageTooltip>\n            )\n          })}\n        </Menu>\n      }\n      popover={POPOVER_PROPS}\n    />\n  )\n}\n", "import {Flex} from '@sanity/ui'\nimport {uniqBy} from 'lodash'\nimport {memo, useCallback, useMemo} from 'react'\nimport {EMPTY_ARRAY, EMPTY_OBJECT, type InitialValueTemplateItem, useTemplates} from 'sanity'\n\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../menuNodes'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {PaneContextMenuButton} from '../pane/PaneContextMenuButton'\nimport {PaneHeaderActionButton} from '../pane/PaneHeaderActionButton'\nimport {PaneHeaderCreateButton} from './PaneHeaderCreateButton'\n\nfunction isNonNullable<T>(value: T): value is NonNullable<T> {\n  return value !== null && value !== undefined\n}\n\n/**\n * hashes an object to a string where the order of the keys don't matter\n */\nconst hashObject = (value: unknown) => {\n  const sortObject = (v: unknown): unknown => {\n    if (typeof v !== 'object' || !v) return v\n    if (Array.isArray(v)) return v.map(sortObject)\n    return Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, 'en'))\n  }\n\n  const normalize = (v: unknown) => JSON.parse(JSON.stringify(v))\n\n  return JSON.stringify(sortObject(normalize(value)))\n}\n\ninterface PaneHeaderActionsProps {\n  initialValueTemplateItems?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n}\n\nexport const PaneHeaderActions = memo(function PaneHeaderActions(props: PaneHeaderActionsProps) {\n  const {\n    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY,\n    menuItems = EMPTY_ARRAY,\n    menuItemGroups = EMPTY_ARRAY,\n    actionHandlers = EMPTY_OBJECT as Record<string, StructureToolPaneActionHandler>,\n  } = props\n\n  const templates = useTemplates()\n\n  const handleAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (typeof item.action === 'string' && !(item.action in actionHandlers)) {\n        console.warn('No handler for action:', item.action)\n        return false\n      }\n\n      const handler =\n        // eslint-disable-next-line no-nested-ternary\n        typeof item.action === 'function'\n          ? item.action\n          : typeof item.action === 'string'\n            ? actionHandlers[item.action]\n            : null\n\n      if (handler) {\n        handler(item.params as Record<string, string>)\n        return true\n      }\n\n      return false\n    },\n    [actionHandlers],\n  )\n\n  const menuNodes = useMemo(\n    () =>\n      resolveMenuNodes({\n        actionHandler: handleAction,\n        menuItemGroups,\n        menuItems: menuItems\n          // remove items with `create` intents because those will get combined\n          // into one action button (see `initialValueTemplateItemFromMenuItems`)\n          .filter((item) => item.intent?.type !== 'create'),\n      }),\n    [handleAction, menuItemGroups, menuItems],\n  )\n\n  const actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n  const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n\n  const initialValueTemplateItemFromMenuItems = useMemo(() => {\n    return menuItems\n      .map((item, menuItemIndex) => {\n        if (item.intent?.type !== 'create') return null\n\n        const {params} = item.intent\n        if (!params) return null\n\n        const intentParams = Array.isArray(params) ? params[0] : params\n        const templateParams = Array.isArray(params) ? params[1] : undefined\n\n        // fallback to the schema type name as the template ID.\n        // by default, the initial template values are populated from every\n        // document type in the schema\n        const templateId = intentParams.template || intentParams.type\n        if (!templateId) return null\n\n        // eslint-disable-next-line max-nested-callbacks\n        const template = templates.find((t) => t.id === templateId)\n        // the template doesn't exist then the action might be disabled\n        if (!template) return null\n\n        const initialDocumentId = intentParams.id\n\n        return {\n          item,\n          template,\n          templateParams,\n          menuItemIndex,\n          initialDocumentId,\n        }\n      })\n      .filter(isNonNullable)\n      .map(({initialDocumentId, item, template, menuItemIndex, templateParams}) => {\n        const initialValueTemplateItem: InitialValueTemplateItem = {\n          id: `menuItem${menuItemIndex}`,\n          initialDocumentId,\n          templateId: template.id,\n          type: 'initialValueTemplateItem',\n          title: item.title || template.title,\n          i18n: item.i18n || template.i18n,\n          icon: item.icon as InitialValueTemplateItem['icon'],\n          description: template.description,\n          parameters: templateParams,\n          schemaType: template.schemaType,\n        }\n\n        return initialValueTemplateItem\n      })\n  }, [menuItems, templates])\n\n  const combinedInitialValueTemplates = useMemo(() => {\n    // this de-dupes create actions\n    return uniqBy(\n      [...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure],\n      (item) => hashObject([item.initialDocumentId, item.templateId, item.parameters]),\n    )\n  }, [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure])\n\n  return (\n    <Flex gap={1}>\n      {combinedInitialValueTemplates.length > 0 && (\n        <PaneHeaderCreateButton templateItems={combinedInitialValueTemplates} />\n      )}\n\n      {actionNodes.map((node) => (\n        <PaneHeaderActionButton key={node.key} node={node} />\n      ))}\n\n      {contextMenuNodes.length > 0 && <PaneContextMenuButton nodes={contextMenuNodes} />}\n    </Flex>\n  )\n})\n", "import {WarningOutlineIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {type GeneralPreviewLayoutKey, SanityDefaultPreview, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview\n      title={\n        <em>\n          <Translate\n            t={t}\n            i18nKey=\"pane-item.missing-schema-type.title\"\n            components={{Code: 'code'}}\n            values={{documentType: value._type}}\n          />\n        </em>\n      }\n      subtitle={\n        <Translate\n          t={t}\n          i18nKey=\"pane-item.missing-schema-type.subtitle\"\n          components={{Code: 'code'}}\n          values={{documentId: value._id}}\n        />\n      }\n      // eslint-disable-next-line react/jsx-no-bind\n      media={() => <WarningOutlineIcon />}\n      layout={layout}\n    />\n  )\n}\n", "import {ChevronRightIcon, DocumentIcon, FolderIcon} from '@sanity/icons'\nimport {\n  isSanityDocument,\n  type PreviewValue,\n  type SanityDocument,\n  type SchemaType,\n} from '@sanity/types'\nimport {Box, type CardProps, Text} from '@sanity/ui'\nimport {\n  type ComponentType,\n  type MouseEvent,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {\n  type FIXME,\n  type GeneralPreviewLayoutKey,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useSchema,\n} from 'sanity'\n\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n  margin?: CardProps['margin']\n  marginBottom?: CardProps['marginBottom']\n  marginTop?: CardProps['marginTop']\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: ComponentType<any>,\n): ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {\n    icon,\n    id,\n    layout = 'default',\n    pressed,\n    schemaType,\n    selected,\n    title,\n    value,\n    margin,\n    marginBottom,\n    marginTop,\n  } = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    // Always render non-document values as compact previews\n    return (\n      <SanityDefaultPreview\n        status={\n          <Box style={{opacity: 0.5}}>\n            <Text muted size={1}>\n              <ChevronRightIcon />\n            </Text>\n          </Box>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout=\"compact\"\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const Link = useMemo(\n    () =>\n      function LinkComponent(linkProps: {children: ReactNode}) {\n        return <ChildLink {...linkProps} childId={id} />\n      },\n    [ChildLink, id],\n  )\n\n  const handleClick = useCallback((e: MouseEvent<HTMLElement>) => {\n    if (e.metaKey) {\n      setClicked(false)\n      return\n    }\n\n    setClicked(true)\n  }, [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  return (\n    <PreviewCard\n      data-testid={`pane-item-${title}`}\n      __unstable_focusRing\n      as={Link as FIXME}\n      data-as=\"a\"\n      margin={margin}\n      marginBottom={marginBottom}\n      marginTop={marginTop}\n      onClick={handleClick}\n      pressed={pressed}\n      radius={2}\n      selected={selected || clicked}\n      sizing=\"border\"\n      tabIndex={-1}\n      tone=\"inherit\"\n    >\n      {preview}\n    </PreviewCard>\n  )\n}\n", "import {type ReactNode} from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionGroup,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: Omit<DocumentActionProps, 'onComplete'>\n  children: (props: {states: DocumentActionDescription[]}) => ReactNode\n  onActionComplete?: () => void\n  group?: DocumentActionGroup\n}\n\n/** @internal */\nexport const RenderActionCollectionState = (props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete, group} = props\n\n  return (\n    <GetHookCollectionState\n      onReset={onActionComplete}\n      hooks={actions}\n      args={actionProps}\n      group={group}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n}\n", "import {type ReactNode} from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => ReactNode\n  onActionComplete?: () => void\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = (props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps, ...rest} = props\n\n  return (\n    <GetHookCollectionState {...rest} hooks={badges} args={badgeProps}>\n      {children}\n    </GetHookCollectionState>\n  )\n}\n", "import {Box, type CardTone} from '@sanity/ui'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n", "import {merge, type Observable, of} from 'rxjs'\nimport {delay, mapTo} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport type WaitMessage = {messageKey: string} | {message: string}\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<WaitMessage> {\n  const thresholds: (WaitMessage & {ms: number})[] = [\n    {ms: 300, messageKey: 'panes.resolving.default-message'},\n    {ms: 5000, messageKey: 'panes.resolving.slow-resolve-message'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(\n    ...thresholds.map((threshold) =>\n      src.pipe(\n        mapTo(\n          'messageKey' in threshold\n            ? {messageKey: threshold.messageKey}\n            : {message: threshold.message},\n        ),\n        delay(threshold.ms),\n      ),\n    ),\n  )\n}\n", "import {_raf2, type CardTone, Flex} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {getWaitMessages, type WaitMessage} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<WaitMessage>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE_KEY = 'panes.resolving.default-message'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return t(DEFAULT_MESSAGE_KEY)\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe !== 'function') return undefined\n\n    const sub = resolvedMessage.subscribe((message) => {\n      setCurrentMessage('messageKey' in message ? t(message.messageKey) : message.message)\n    })\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage, t])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <LoadingBlock showText title={title || currentMessage} />\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'LoadingPane'\n", "import {useContext} from 'react'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\n\n/** @internal */\nexport function useDocumentPane(): DocumentPaneContextValue {\n  const documentPane = useContext(DocumentPaneContext)\n\n  if (!documentPane) {\n    throw new Error('DocumentPane: missing context value')\n  }\n\n  return documentPane\n}\n", "import {useCallback, useLayoutEffect, useRef} from 'react'\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  CommentsEnabledProvider,\n  CommentsProvider,\n  useCommentsEnabled,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface CommentsWrapperProps {\n  children: React.ReactNode\n  documentId: string\n  documentType: string\n}\n\n/**\n * @internal\n * A wrapper that conditionally wraps the document layout in a comments provider\n * if the feature is enabled for the project and the current document.\n */\nexport function CommentsWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  return (\n    <CommentsEnabledProvider documentId={documentId} documentType={documentType}>\n      <CommentsProviderWrapper documentId={documentId} documentType={documentType}>\n        {children}\n      </CommentsProviderWrapper>\n    </CommentsEnabledProvider>\n  )\n}\n\nfunction CommentsProviderWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  const {enabled} = useCommentsEnabled()\n  const {connectionState, onPathOpen, inspector, openInspector} = useDocumentPane()\n  const {params, setParams, createPathWithParams} = usePaneRouter()\n\n  const selectedCommentId = params?.comment\n  const paramsRef = useRef(params)\n\n  useLayoutEffect(() => {\n    paramsRef.current = params\n  }, [params])\n\n  const getCommentLink = useCallback(\n    (commentId: string) => {\n      // Generate a path based on the current pane params.\n      // We force a value for `inspect` to ensure that this is included in URLs when comments\n      // are created outside of the inspector context (i.e. directly on the field)\n      // @todo: consider filtering pane router params and culling all non-active RHS panes prior to generating this link\n      const path = createPathWithParams({\n        ...paramsRef.current,\n        comment: commentId,\n        inspect: COMMENTS_INSPECTOR_NAME,\n      })\n      return `${window.location.origin}${path}`\n    },\n    [createPathWithParams],\n  )\n\n  const handleClearSelectedComment = useCallback(() => {\n    setParams({...paramsRef.current, comment: undefined})\n  }, [setParams])\n\n  const handleOpenCommentsInspector = useCallback(() => {\n    if (inspector?.name === COMMENTS_INSPECTOR_NAME) return\n\n    openInspector(COMMENTS_INSPECTOR_NAME)\n  }, [inspector?.name, openInspector])\n\n  // If comments are not enabled, render the default document layout\n  if (!enabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <CommentsProvider\n      documentId={documentId}\n      documentType={documentType}\n      getCommentLink={getCommentLink}\n      isCommentsOpen={inspector?.name === COMMENTS_INSPECTOR_NAME}\n      isConnecting={connectionState === 'connecting'}\n      onClearSelectedComment={handleClearSelectedComment}\n      onCommentsOpen={handleOpenCommentsInspector}\n      onPathOpen={onPathOpen}\n      selectedCommentId={selectedCommentId}\n      sortOrder=\"desc\"\n      type=\"field\"\n    >\n      {children}\n    </CommentsProvider>\n  )\n}\n", "/**\n * @internal\n */\nexport const _DEBUG = false\n\nexport const EMPTY_PARAMS = {}\nexport const LOADING_PANE = Symbol('LOADING_PANE')\n\nexport const DOCUMENT_PANEL_PORTAL_ELEMENT = 'documentPanelPortalElement'\n", "import {useContext} from 'react'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {type StructureToolContextValue} from './types'\n\n/** @internal */\nexport function useStructureTool(): StructureToolContextValue {\n  const structureTool = useContext(StructureToolContext)\n\n  if (!structureTool) throw new Error(`StructureTool: missing context value`)\n\n  return structureTool\n}\n", "import {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItemGroup} from '../../types'\n\nexport const DOCUMENT_PANEL_MIN_WIDTH = 320\nexport const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600\n\nexport const DOCUMENT_INSPECTOR_MIN_WIDTH = 320\nexport const DOCUMENT_INSPECTOR_MAX_WIDTH = 540\n\nexport const EMPTY_PARAMS: NonNullable<PaneRouterContextValue['params']> = {}\n\nexport const INSPECT_ACTION_PREFIX = 'inspect:'\n\nexport const DEFAULT_MENU_ITEM_GROUPS: PaneMenuItemGroup[] = [{id: 'inspectors'}, {id: 'links'}]\n\n// inspectors\nexport const HISTORY_INSPECTOR_NAME = 'sanity/structure/history'\nexport const VALIDATION_INSPECTOR_NAME = 'sanity/structure/validation'\n", "import {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, useUnique} from 'sanity'\n\ninterface DocumentInspectorMenuItemsResolverProps {\n  documentId: string\n  documentType: string\n  inspectors: DocumentInspector[]\n  onMenuItems: (items: DocumentInspectorMenuItem[]) => void\n}\n\n// The menu item in a document inspector are resolved in a React hook (`useMenuItem`).\n// This means that the menu item needs to be resolved in a React component (in accordance with the rules of hooks).\n// In this component, we map over the configured inspectors and render a `InspectorMenuItem` for each.\n// The `InspectorMenuItem` will resolve the menu item in a React hook and call the `setMenuItem` callback\n// with the resolved menu item and the index of the inspector.\n// Finally, we call the `onMenuItems` callback with the resolved menu items.\nexport function DocumentInspectorMenuItemsResolver(props: DocumentInspectorMenuItemsResolverProps) {\n  const {documentId, documentType, inspectors, onMenuItems} = props\n\n  const len = inspectors.length\n  const lenRef = useRef(len)\n\n  const [menuItems, setMenuItems] = useState<DocumentInspectorMenuItem[]>(() =>\n    Array.from(new Array(len)),\n  )\n\n  const menuItemsRef = useRef(menuItems)\n\n  useEffect(() => {\n    if (lenRef.current !== len) {\n      const newFieldActions = Array.from(new Array(len))\n\n      for (let i = 0; i < len; i++) {\n        newFieldActions[i] = menuItemsRef.current[i]\n      }\n\n      lenRef.current = len\n\n      setMenuItems(() => {\n        menuItemsRef.current = newFieldActions\n        return newFieldActions\n      })\n    }\n  }, [len])\n\n  const setMenuItem = useCallback((index: number, node: DocumentInspectorMenuItem) => {\n    setMenuItems((prev) => {\n      const next = [...prev]\n      next[index] = node\n      menuItemsRef.current = next\n      return next\n    })\n  }, [])\n\n  useEffect(() => {\n    onMenuItems(menuItems.filter(Boolean))\n  }, [menuItems, onMenuItems])\n\n  const InspectorMenuItems = useMemo(() => {\n    return inspectors.map((inspector, index) => {\n      return inspector.useMenuItem\n        ? ([\n            defineInspectorMenuItemComponent({\n              documentId,\n              documentType,\n              index,\n              setMenuItem,\n              useMenuItem: inspector.useMenuItem,\n            }),\n            inspector.name,\n          ] as const)\n        : ([() => null, ''] as const)\n    })\n  }, [documentId, documentType, inspectors, setMenuItem])\n\n  return (\n    <>\n      {InspectorMenuItems.map(([InspectorMenuItem, key]) => key && <InspectorMenuItem key={key} />)}\n    </>\n  )\n}\n\nfunction defineInspectorMenuItemComponent({\n  documentId,\n  documentType,\n  index,\n  setMenuItem,\n  useMenuItem,\n}: {\n  documentId: string\n  documentType: string\n  index: number\n  setMenuItem: (index: number, node: DocumentInspectorMenuItem) => void\n  useMenuItem: NonNullable<DocumentInspector['useMenuItem']>\n}) {\n  return memo(function InspectorMenuItem() {\n    const menuItem = useMenuItem({\n      documentId,\n      documentType,\n    })\n    const node = useUnique(menuItem)\n\n    useEffect(() => {\n      setMenuItem(index, node)\n    }, [node])\n\n    return null\n  })\n}\n", "import {unstable_useValuePreview as useValuePreview} from 'sanity'\n\nimport {useDocumentPane} from './useDocumentPane'\n\n/**\n * useDocumentTitle hook return type.\n *\n * @beta\n * @hidden\n */\ninterface UseDocumentTitle {\n  error?: string\n  title?: string\n}\n\n/**\n * React hook that returns the document title for the current document in the document pane.\n *\n * @beta\n * @hidden\n *\n * @returns The document title or error. See {@link UseDocumentTitle}\n */\nexport function useDocumentTitle(): UseDocumentTitle {\n  const {connectionState, schemaType, title, value: documentValue} = useDocumentPane()\n  const subscribed = Boolean(documentValue) && connectionState !== 'connecting'\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n\n  if (connectionState === 'connecting') {\n    return {error: undefined, title: undefined}\n  }\n\n  if (title) {\n    return {error: undefined, title}\n  }\n\n  if (!documentValue) {\n    return {error: undefined, title: `New ${schemaType?.title || schemaType?.name}`}\n  }\n\n  if (error) {\n    return {error: `Error: ${error.message}`, title: undefined}\n  }\n\n  return {error: undefined, title: value?.title}\n}\n", "import {useToast} from '@sanity/ui'\nimport {memo, useEffect, useRef} from 'react'\nimport {Translate, useDocumentOperationEvent, useTranslation} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentTitle} from './useDocumentTitle'\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType} = useDocumentPane()\n  const {title} = useDocumentTitle()\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  //Truncate the document title and add \"...\" if it is over 25 characters\n  const documentTitleBase = title || t('panes.document-operation-results.operation-undefined-title')\n  const documentTitle =\n    documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: t('panes.document-operation-results.operation-error', {context: event.op}),\n        description: (\n          <details>\n            <summary>{t('panes.document-operation-results.error.summary.title')}</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: (\n          <Translate\n            context={event.op}\n            i18nKey=\"panes.document-operation-results.operation-success\"\n            t={t}\n            values={{\n              title: documentTitle,\n            }}\n            components={{\n              Strong: 'strong',\n            }}\n          />\n        ),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast, t, documentTitle])\n\n  return null\n})\n", "import {CloseIcon} from '@sanity/icons'\nimport {Box, Card, type CardProps, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport interface DocumentInspectorHeaderProps {\n  as?: CardProps['as']\n  closeButtonLabel: string\n  flex?: CardProps['flex']\n  onClose: () => void\n  title: ReactNode\n}\n\nconst Root = styled(Card)({\n  position: 'relative',\n  zIndex: 1,\n  lineHeight: 0,\n})\n\n/** @internal */\nexport function DocumentInspectorHeader(\n  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n) {\n  const {as: forwardedAs, children, closeButtonLabel, onClose, title, ...restProps} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Root {...restProps} as={forwardedAs}>\n      <Flex padding={2}>\n        <Box flex={1} padding={3}>\n          <Text as=\"h1\" size={1} weight=\"medium\">\n            {title}\n          </Text>\n        </Box>\n        <Box flex=\"none\" padding={1}>\n          <Button\n            aria-label={closeButtonLabel}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n      {children}\n    </Root>\n  )\n}\n", "import {type MouseEvent, useCallback, useRef} from 'react'\nimport {styled} from 'styled-components'\n\nconst Root = styled.div`\n  position: absolute;\n  top: 0;\n  left: -4px;\n  bottom: 0;\n  width: 9px;\n  z-index: 201;\n  cursor: ew-resize;\n\n  /* Border */\n  & > span:nth-child(1) {\n    display: block;\n    border-left: 1px solid var(--card-border-color);\n    position: absolute;\n    top: 0;\n    left: 4px;\n    bottom: 0;\n    transition: opacity 200ms;\n  }\n\n  /* Hover effect */\n  & > span:nth-child(2) {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 9px;\n    bottom: 0;\n    background-color: var(--card-border-color);\n    opacity: 0;\n    transition: opacity 150ms;\n  }\n\n  @media (hover: hover) {\n    &:hover > span:nth-child(2) {\n      opacity: 0.2;\n    }\n  }\n`\n\nexport function Resizer(props: {onResize: (delta: number) => void; onResizeStart: () => void}) {\n  const {onResize, onResizeStart} = props\n\n  const mouseXRef = useRef(0)\n\n  const handleMouseDown = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault()\n\n      mouseXRef.current = event.pageX\n\n      onResizeStart()\n\n      const handleMouseMove = (e: globalThis.MouseEvent) => {\n        e.preventDefault()\n        onResize(e.pageX - mouseXRef.current)\n      }\n\n      const handleMouseUp = () => {\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [onResize, onResizeStart],\n  )\n\n  return (\n    <Root onMouseDown={handleMouseDown}>\n      {/* Hover effect */}\n      <span />\n\n      {/* Border */}\n      <span />\n    </Root>\n  )\n}\n", "import {Box, type BoxProps} from '@sanity/ui'\nimport {type HTMLProps, useCallback, useMemo, useRef, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {Resizer} from './Resizer'\n\nexport interface ResizableProps {\n  minWidth: number\n  maxWidth: number\n}\n\nconst Root = styled(Box)`\n  position: relative;\n  flex: 1;\n  padding-left: 1px;\n`\n\nexport function Resizable(\n  props: ResizableProps & BoxProps & Omit<HTMLProps<HTMLDivElement>, 'as'>,\n) {\n  const {as: forwardedAs, children, minWidth, maxWidth, ...restProps} = props\n  const [element, setElement] = useState<HTMLDivElement | null>(null)\n  const elementWidthRef = useRef<number>()\n  const [targetWidth, setTargetWidth] = useState<number>()\n\n  const handleResizeStart = useCallback(() => {\n    elementWidthRef.current = element?.offsetWidth\n  }, [element])\n\n  const handleResize = useCallback(\n    (deltaX: number) => {\n      const w = elementWidthRef.current\n\n      if (!w) return\n\n      setTargetWidth(Math.min(Math.max(w - deltaX, minWidth), maxWidth))\n    },\n    [minWidth, maxWidth],\n  )\n\n  const style = useMemo(\n    () => (targetWidth ? {flex: 'none', width: targetWidth} : {minWidth, maxWidth}),\n    [minWidth, maxWidth, targetWidth],\n  )\n\n  return (\n    <Root as={forwardedAs} {...restProps} ref={setElement} style={style}>\n      {children}\n      <Resizer onResize={handleResize} onResizeStart={handleResizeStart} />\n    </Root>\n  )\n}\n", "import {Box} from '@sanity/ui'\nimport {createElement, type ReactElement, useCallback} from 'react'\n\nimport {usePane} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Resizable} from './Resizable'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(props: DocumentInspectorPanelProps): ReactElement | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useStructureTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const element = createElement(inspector.component, {\n    onClose: handleClose,\n    documentId,\n    documentType,\n  })\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n", "import {useCallback, useEffect, useMemo, useState} from 'react'\nimport {map, startWith} from 'rxjs/operators'\nimport {useKeyValueStore} from 'sanity'\n\nconst STRUCTURE_TOOL_NAMESPACE = 'studio.structure-tool'\n\n/**\n * @internal\n */\nexport function useStructureToolSetting<ValueType>(\n  namespace: string,\n  key: string | null,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const keyValueStore = useKeyValueStore()\n  const [value, setValue] = useState<ValueType | undefined>(defaultValue)\n\n  const keyValueStoreKey = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean).join('.')\n\n  const settings = useMemo(() => {\n    return keyValueStore.getKey(keyValueStoreKey)\n  }, [keyValueStore, keyValueStoreKey])\n\n  useEffect(() => {\n    const sub = settings\n      .pipe(\n        startWith(defaultValue),\n        map((fetchedValue) => {\n          return fetchedValue === null ? defaultValue : fetchedValue\n        }),\n      )\n      .subscribe({\n        next: setValue as any,\n      })\n\n    return () => sub?.unsubscribe()\n  }, [defaultValue, keyValueStoreKey, settings])\n\n  const set = useCallback(\n    (newValue: ValueType) => {\n      if (newValue !== value) {\n        setValue(newValue)\n        keyValueStore.setKey(keyValueStoreKey, newValue as string)\n      }\n    },\n    [keyValueStore, keyValueStoreKey, value],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n", "export const VIEW_MODE_PARSED = {id: 'parsed', title: 'document-inspector.view-mode.parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'document-inspector.view-mode.raw-json'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n", "import {type SanityDocumentLike} from '@sanity/types'\nimport LRU from 'quick-lru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = new LRU({maxSize: 1000})\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n", "import {rem, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n", "import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport {type ChangeEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder={t('document-inspector.search.placeholder')}\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n", "import JSONInspector from '@rexxars/react-json-inspector'\nimport {type SanityDocument} from '@sanity/types'\nimport {Card, Code, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Translate, useTranslation} from 'sanity'\n\nimport {Dialog, Tab} from '../../../../ui-components'\nimport {DocTitle} from '../../../components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureToolSetting} from '../../../useStructureToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useStructureToolSetting(\n    'inspect-view-mode',\n    null,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Dialog\n      bodyHeight=\"fill\"\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <Translate\n            t={t}\n            i18nKey=\"document-inspector.dialog.title\"\n            components={{\n              DocumentTitle: () => (\n                <em>\n                  <DocTitle document={value} />\n                </em>\n              ),\n            }}\n          />\n        ) : (\n          <em>{t('document-inspector.dialog.title-no-value')}</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      padding={false}\n      width={2}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card\n          padding={3}\n          paddingTop={0}\n          shadow={1}\n          style={{position: 'sticky', bottom: 0, zIndex: 3}}\n        >\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={t(VIEW_MODE_PARSED.title)}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={t(VIEW_MODE_RAW.title)}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JSONInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n                filterOptions={{ignoreCase: true}}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n              size={1}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n", "import {Button, type ButtonProps} from '../../../ui-components'\n\ninterface SpacerButtonProps {\n  size?: ButtonProps['size']\n}\n\n/**\n * This renders a visually hidden <Button> component that is still contributes\n * to document layout.\n *\n * It's used to simplify padding in Sanity UI components that contain buttons which\n * may not always be rendered.\n *\n * TODO: let's find a more elegant solve to this layout shift problem\n *\n * @internal\n */\nexport function SpacerButton({size}: SpacerButtonProps) {\n  return (\n    <Button\n      aria-hidden\n      disabled\n      size={size}\n      style={{\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        width: 0,\n      }}\n      text=\"-\"\n    />\n  )\n}\n", "import {type ButtonTone, Card, type CardTone, Flex, Text} from '@sanity/ui'\nimport {type ComponentType, type ElementType, type JSX, type ReactNode} from 'react'\n\nimport {Button} from '../../../../../ui-components'\nimport {SpacerButton} from '../../../../components/spacerButton'\n\ninterface BannerProps {\n  action?: {\n    as?: ElementType | keyof JSX.IntrinsicElements\n    icon?: ComponentType\n    onClick?: () => void\n    text: string\n    tone?: ButtonTone\n  }\n  content: ReactNode\n  icon?: ComponentType\n  tone?: CardTone\n}\n\nexport function Banner(props: BannerProps) {\n  const {action, content, icon: Icon, tone = 'transparent', ...rest} = props\n\n  return (\n    <Card borderBottom paddingX={4} paddingY={2} tone={tone} {...rest}>\n      <Flex align=\"center\" gap={3}>\n        {Icon && (\n          <Text size={0}>\n            <Icon />\n          </Text>\n        )}\n\n        <Flex align=\"center\" flex={1} gap={2} paddingY={3}>\n          {content}\n        </Flex>\n\n        <SpacerButton />\n\n        {action && (\n          <Button\n            as={action?.as}\n            mode=\"ghost\"\n            onClick={action?.onClick}\n            text={action.text}\n            tone={action.tone || 'default'}\n          />\n        )}\n      </Flex>\n    </Card>\n  )\n}\n", "import {ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useDocumentOperation, useTranslation} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\ninterface DeletedDocumentBannerProps {\n  revisionId?: string | null\n}\n\nexport function DeletedDocumentBanner({revisionId}: DeletedDocumentBannerProps) {\n  const {documentId, documentType} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n  const handleRestore = useCallback(() => {\n    if (revisionId) {\n      restore.execute(revisionId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, revisionId])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Banner\n      action={\n        revisionId\n          ? {\n              onClick: handleRestore,\n              text: t('banners.deleted-document-banner.restore-button.text'),\n            }\n          : undefined\n      }\n      content={\n        <Text size={1} weight=\"medium\">\n          {t('banners.deleted-document-banner.text')}\n        </Text>\n      }\n      data-testid=\"deleted-document-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n", "import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {isDeprecatedSchemaType, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeprecatedDocumentTypeBanner() {\n  const {schemaType} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!isDeprecatedSchemaType(schemaType)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate t={t} i18nKey=\"banners.deprecated-document-type-banner.text\" />{' '}\n          {schemaType.deprecated.reason}\n        </Text>\n      }\n      data-testid=\"deprecated-document-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n", "import {ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {Translate, useCurrentUser, useListFormat, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {Banner} from './Banner'\n\ninterface PermissionCheckBannerProps {\n  granted: boolean\n  requiredPermission: 'update' | 'create'\n}\n\nexport function PermissionCheckBanner({granted, requiredPermission}: PermissionCheckBannerProps) {\n  const currentUser = useCurrentUser()\n  const listFormat = useListFormat({style: 'short'})\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (granted) return null\n\n  const roleTitles = (currentUser?.roles || []).map((role) => role.title)\n  const roles = listFormat\n    .formatToParts(roleTitles)\n    .map((part) =>\n      part.type === 'element' ? <code key={part.value}>{part.value}</code> : part.value,\n    )\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate\n            t={t}\n            i18nKey=\"banners.permission-check-banner.missing-permission\"\n            components={{Roles: () => <>{roles}</>}}\n            values={{count: roles.length, roles: roleTitles}}\n            context={requiredPermission}\n          />\n        </Text>\n      }\n      data-testid=\"permission-check-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n", "import {CloseIcon, SyncIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {type KeyedSegment, type Reference} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {memo, useCallback, useMemo} from 'react'\nimport {useMemoObservable} from 'react-rx'\nimport {concat, type Observable, of} from 'rxjs'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {\n  type DocumentAvailability,\n  getPublishedId,\n  useDocumentPreviewStore,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {type RouterPaneGroup} from '../../../../types'\nimport {Banner} from './Banner'\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {draft: DocumentAvailability; published: DocumentAvailability}\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfo = useMemoObservable(\n    (): Observable<ParentReferenceInfo> => {\n      const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n      // short-circuit: this document pane is not a child reference pane\n      if (!parentId || !parentRefPathSegment || !parentRefPath) {\n        return of({loading: false})\n      }\n\n      const publishedId = getPublishedId(parentId)\n      const path = pathFromString(parentRefPathSegment)\n\n      // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n      const keyedSegmentIndex = path.findIndex(\n        (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n      )\n\n      return concat(\n        // emit a loading state instantly\n        of({loading: true}),\n        // then emit the values from watching the published ID's path\n        documentPreviewStore\n          .unstable_observePathsDocumentPair(\n            publishedId,\n            (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n          )\n          .pipe(\n            // this debounce time is needed to prevent flashing banners due to\n            // the router state updating faster than the content-lake state. we\n            // debounce to wait for more emissions because the value pulled\n            // initially could be stale.\n            debounceTime(750),\n            map(\n              ({draft, published}): ParentReferenceInfo => ({\n                loading: false,\n                result: {\n                  availability: {\n                    draft: draft.availability,\n                    published: published.availability,\n                  },\n                  refValue: pathGet<Reference>(draft.snapshot || published.snapshot, parentRefPath)\n                    ?._ref,\n                },\n              }),\n            ),\n          ),\n      )\n    },\n    [documentPreviewStore, parentId, parentRefPath],\n    {loading: true},\n  )\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Banner\n      action={\n        referenceInfo.result?.refValue\n          ? {\n              onClick: handleReloadReference,\n              icon: SyncIcon,\n              text: t('banners.reference-changed-banner.reason-changed.reload-button.text'),\n            }\n          : {\n              as: BackLink,\n              icon: CloseIcon,\n              text: t('banners.reference-changed-banner.reason-removed.close-button.text'),\n            }\n      }\n      data-testid=\"reference-changed-banner\"\n      content={\n        <Text size={1} weight=\"medium\">\n          {referenceInfo.result?.refValue\n            ? t('banners.reference-changed-banner.reason-changed.text')\n            : t('banners.reference-changed-banner.reason-removed.text')}\n        </Text>\n      }\n      icon={WarningOutlineIcon}\n      tone=\"caution\"\n    />\n  )\n})\n\nReferenceChangedBanner.displayName = 'ReferenceChangedBanner'\n", "import {type ObjectSchemaType} from '@sanity/types'\nimport {Heading, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'react-i18next'\nimport {css, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\n\ninterface DocumentHeaderProps {\n  documentId: string\n  schemaType: ObjectSchemaType\n  title?: string\n}\n\n/**\n * Use CSS container queries to conditionally render headings at different sizes.\n * We hide this entire container (including the document type) if container queries\n * not supported in the current browser.\n *\n * Note that usage of container queries in `styled-components` is only supported in `6.x`.\n * As such, studios that include `\"styled-components\": \"<6\"` as a dependency will only see\n * the largest heading size here, even if their browser supports it!\n */\n\nexport const TitleContainer = styled(Stack)`\n  ${({theme}) => {\n    return css`\n      @supports not (container-type: inline-size) {\n        display: none !important;\n      }\n\n      container-type: inline-size;\n\n      [data-heading] {\n        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;\n        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n\n      @container (max-width: 560px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;\n        }\n      }\n\n      @container (max-width: 420px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;\n        }\n      }\n    `\n  }}\n`\n\n/**\n * Header containing current document title and type.\n * Document type is hidden if the document `_id` matches the current document `_type`.\n * The entire header is hidden if container queries are not supported.\n */\nexport const FormHeader = ({documentId, schemaType, title}: DocumentHeaderProps) => {\n  const isSingleton = documentId === schemaType.name\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (schemaType.__experimental_formPreviewTitle === false) {\n    return null\n  }\n\n  return (\n    <TitleContainer marginBottom={6} space={4}>\n      {!isSingleton && (\n        <Text muted size={1}>\n          {schemaType.title ?? schemaType.name}\n        </Text>\n      )}\n\n      <Heading as=\"h2\" data-heading muted={!title} data-testid=\"document-panel-document-title\">\n        {title ?? t('document-view.form-view.form-title-fallback')}\n      </Heading>\n    </TitleContainer>\n  )\n}\n", "import {type ToastParams, useToast} from '@sanity/ui'\nimport {useEffect, useRef} from 'react'\n\nfunction usePrevious<T>(value: T) {\n  const ref = useRef<T>()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  const wasEnabled = usePrevious(params.enabled)\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (!wasEnabled && params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    if (wasEnabled && !params.enabled) {\n      toast.push({\n        ...params,\n        // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n        duration: 0.01,\n      })\n    }\n  }, [params, toast, wasEnabled])\n}\n", "/* eslint-disable no-nested-ternary */\nimport {Box, Container, Flex, focusFirstDescendant, Spinner, Text} from '@sanity/ui'\nimport {type FormEvent, forwardRef, useCallback, useEffect, useMemo, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {\n  createPatchChannel,\n  type DocumentMutationEvent,\n  type DocumentRebaseEvent,\n  FormBuilder,\n  type FormDocumentValue,\n  fromMutationPatches,\n  type PatchMsg,\n  PresenceOverlay,\n  useDocumentPresence,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\n\nimport {Delay} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {useDocumentTitle} from '../../useDocumentTitle'\nimport {FormHeader} from './FormHeader'\nimport {useConditionalToast} from './useConditionalToast'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    connectionState,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n  } = useDocumentPane()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n  const {title} = useDocumentTitle()\n\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const patchChannel = useMemo(() => createPatchChannel(), [])\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  useConditionalToast({\n    id: `sync-lock-${documentId}`,\n    status: 'warning',\n    enabled: isLocked,\n    title: t('document-view.form-view.sync-lock-toast.title'),\n    description: t('document-view.form-view.sync-lock-toast.description'),\n  })\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel])\n\n  const hasRev = Boolean(value?._rev)\n  useEffect(() => {\n    if (hasRev) {\n      // this is a workaround for an issue that caused the document pushed to withDocument to get\n      // stuck at the first initial value.\n      // This effect is triggered only when the document goes from not having a revision, to getting one\n      // so it will kick in as soon as the document is received from the backend\n      patchChannel.publish({\n        type: 'mutation',\n        patches: [],\n        snapshot: value,\n      })\n    }\n    // React to changes in hasRev only\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  // We only want to run it on first mount\n  const [focusedFirstDescendant, setFocusedFirstDescendant] = useState(false)\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (!focusedFirstDescendant && ready && !formState?.focusPath.length && formRef) {\n      setFocusedFirstDescendant(true)\n      focusFirstDescendant(formRef)\n    }\n  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {connectionState === 'connecting' ? (\n            <Delay ms={300}>\n              {/* TODO: replace with loading block */}\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    {t('document-view.form-view.loading')}\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          ) : formState === null || hidden ? (\n            <Box padding={2}>\n              <Text>{t('document-view.form-view.form-hidden')}</Text>\n            </Box>\n          ) : (\n            <>\n              <FormHeader documentId={documentId} schemaType={formState.schemaType} title={title} />\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focusPath={formState.focusPath}\n                changed={formState.changed}\n                focused={formState.focused}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                presence={presence}\n                readOnly={connectionState === 'reconnecting' || formState.readOnly}\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={\n                  // note: the form state doesn't have a typed concept of a \"document\" value\n                  // but these should be compatible\n                  formState.value as FormDocumentValue\n                }\n              />\n            </>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n", "import {BoundaryElementProvider, Box, Flex, PortalProvider, usePortal} from '@sanity/ui'\nimport {createElement, useEffect, useMemo, useRef, useState} from 'react'\nimport {ScrollContainer, useTimelineSelector, VirtualizerScrollInstanceProvider} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {PaneContent, usePane, usePaneLayout} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {\n  DeletedDocumentBanner,\n  DeprecatedDocumentTypeBanner,\n  PermissionCheckBanner,\n  ReferenceChangedBanner,\n} from './banners'\nimport {FormView} from './documentViews'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  headerHeight: number | null\n  isInspectOpen: boolean\n  rootElement: HTMLDivElement | null\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, headerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} =\n    props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n    isDeleting,\n    isDeleted,\n    timelineStore,\n  } = useDocumentPane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useStructureTool()\n  const portalRef = useRef<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? portalRef.current || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerHeight])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(\n    () =>\n      activeView.type === 'component' &&\n      activeView.component &&\n      createElement(activeView.component, {\n        document: {\n          draft: editState?.draft || null,\n          displayed: displayed || value,\n          historical: displayed,\n          published: editState?.published || null,\n        },\n        documentId,\n        options: activeView.options,\n        schemaType,\n      }),\n    [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value],\n  )\n\n  const lastNonDeletedRevId = useTimelineSelector(\n    timelineStore,\n    (state) => state.lastNonDeletedRevId,\n  )\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n\n  return (\n    <PaneContent>\n      <Flex height=\"fill\">\n        {(features.resizablePanes || !showInspector) && (\n          <DocumentBox flex={2} overflow=\"hidden\">\n            <PortalProvider\n              element={portalElement}\n              __unstable_elements={{documentScrollElement: documentScrollElement}}\n            >\n              <BoundaryElementProvider element={documentScrollElement}>\n                <VirtualizerScrollInstanceProvider\n                  scrollElement={documentScrollElement}\n                  containerElement={formContainerElement}\n                >\n                  {activeView.type === 'form' && !isPermissionsLoading && ready && (\n                    <>\n                      <PermissionCheckBanner\n                        granted={Boolean(permissions?.granted)}\n                        requiredPermission={requiredPermission}\n                      />\n                      {!isDeleting && isDeleted && (\n                        <DeletedDocumentBanner revisionId={lastNonDeletedRevId} />\n                      )}\n                      <ReferenceChangedBanner />\n                      <DeprecatedDocumentTypeBanner />\n                    </>\n                  )}\n\n                  <Scroller\n                    $disabled={layoutCollapsed || false}\n                    data-testid=\"document-panel-scroller\"\n                    ref={setDocumentScrollElement}\n                  >\n                    <FormView\n                      hidden={formViewHidden}\n                      key={documentId + (ready ? '_ready' : '_pending')}\n                      margins={margins}\n                      ref={formContainerElement}\n                    />\n                    {activeViewNode}\n                  </Scroller>\n\n                  {inspectDialog}\n\n                  <div data-testid=\"document-panel-portal\" ref={portalRef} />\n                </VirtualizerScrollInstanceProvider>\n              </BoundaryElementProvider>\n            </PortalProvider>\n          </DocumentBox>\n        )}\n\n        {showInspector && (\n          <BoundaryElementProvider element={rootElement}>\n            <DocumentInspectorPanel\n              documentId={documentId}\n              documentType={schemaType.name}\n              flex={1}\n            />\n          </BoundaryElementProvider>\n        )}\n      </Flex>\n    </PaneContent>\n  )\n}\n", "import {type Placement} from '@sanity/ui'\n\nimport {type DialogProps} from '../../../../../ui-components'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n", "import {\n  Box,\n  Button, // eslint-disable-line no-restricted-imports\n  Flex,\n  Grid,\n  Popover, // eslint-disable-line no-restricted-imports\n  Text,\n  useClickOutside,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {type DocumentActionConfirmDialogProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Dialog rendered by custom document actions of dialog type `confirm`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isTopLayer} = useLayer()\n  const [element, setElement] = useState<HTMLElement | null>(null)\n\n  const handleClickOutside = useCallback(() => {\n    if (isTopLayer) onCancel()\n  }, [isTopLayer, onCancel])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useClickOutside(handleClickOutside, [element])\n  useGlobalKeyDown(handleGlobalKeyDown)\n\n  return (\n    <Flex direction=\"column\" ref={setElement} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            data-testid=\"confirm-dialog-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || t('confirm-dialog.cancel-button.fallback-text')}\n          />\n          <Button\n            data-testid=\"confirm-dialog-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || t('confirm-dialog.confirm-button.fallback-text')}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n", "import {\n  Box,\n  Dialog, // eslint-disable-line no-restricted-imports\n} from '@sanity/ui'\nimport {useId} from 'react'\nimport {type DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\n\n/**\n * Dialog rendered by custom document actions of dialog type `dialog`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        animate\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n", "import {\n  Popover, // eslint-disable-line no-restricted-imports\n  useClickOutside,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {type DocumentActionPopoverDialogProps} from 'sanity'\n\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Popover rendered by custom document actions of dialog type `popover`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const [element, setElement] = useState<HTMLElement | null>(null)\n\n  const handleClickOutside = useCallback(() => {\n    if (isTopLayer) onClose()\n  }, [isTopLayer, onClose])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useClickOutside(handleClickOutside, [element])\n  useGlobalKeyDown(handleGlobalKeyDown)\n\n  return <div ref={setElement}>{content}</div>\n}\n", "import {PortalProvider, Text, usePortal} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {type DocumentActionDialogProps} from 'sanity'\n\nimport {Dialog} from '../../../../ui-components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={1}\n    >\n      {unknownModal.content || (\n        // eslint-disable-next-line i18next/no-literal-string\n        <Text size={1}>\n          Unexpected modal type (<code>{unknownModal.type}</code>)\n        </Text>\n      )}\n    </Dialog>\n  )\n}\n", "import {Menu} from '@sanity/ui'\nimport {type ReactNode, useCallback, useId, useMemo, useState} from 'react'\nimport {\n  ContextMenuButton,\n  type DocumentActionDescription,\n  LegacyLayerProvider,\n  useTranslation,\n} from 'sanity'\n\nimport {MenuButton, MenuItem, type PopoverProps} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {ActionStateDialog} from './ActionStateDialog'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\n/**\n * @internal\n */\nexport function ActionDialogWrapper({\n  actionStates,\n  children,\n  referenceElement,\n}: {\n  actionStates: DocumentActionDescription[]\n  children: ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  referenceElement?: HTMLElement | null\n}) {\n  const [actionIndex, setActionIndex] = useState(-1)\n  const currentAction = actionStates[actionIndex]\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  return (\n    <>\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n      {children({handleAction})}\n    </>\n  )\n}\n\n/**\n * @internal\n */\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <ActionDialogWrapper actionStates={actionStates} referenceElement={referenceElement}>\n      {({handleAction}) => (\n        <MenuButton\n          id={`${idPrefix}-action-menu`}\n          button={\n            <ContextMenuButton\n              aria-label={t('buttons.action-menu-button.aria-label')}\n              disabled={disabled}\n              data-testid=\"action-menu-button\"\n              size=\"large\"\n              tooltipProps={{content: t('buttons.action-menu-button.tooltip')}}\n            />\n          }\n          menu={\n            <Menu padding={1}>\n              {actionStates.map((actionState, idx) => (\n                <ActionMenuListItem\n                  actionState={actionState}\n                  disabled={disabled}\n                  index={idx}\n                  // eslint-disable-next-line react/no-array-index-key\n                  key={idx}\n                  onAction={handleAction}\n                />\n              ))}\n            </Menu>\n          }\n          popover={popoverProps}\n          ref={setReferenceElement}\n        />\n      )}\n    </ActionDialogWrapper>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nexport function ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const hotkeys = useMemo(() => {\n    return actionState.shortcut\n      ? String(actionState.shortcut)\n          .split('+')\n          .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))\n      : undefined\n  }, [actionState.shortcut])\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      hotkeys={hotkeys}\n      icon={actionState.icon}\n      onClick={handleClick}\n      text={actionState.label}\n      tone={actionState.tone}\n      {...(actionState.disabled && {tooltipProps: {content: actionState.title}})}\n    />\n  )\n}\n", "/* eslint-disable import/no-extraneous-dependencies */\n\nimport {TrashIcon} from '@sanity/icons'\nimport {useCallback, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_TITLE_KEY = {\n  NOTHING_TO_DELETE: 'action.delete.disabled.nothing-to-delete',\n  NOT_READY: 'action.delete.disabled.not-ready',\n}\n\n/** @internal */\nexport const DeleteAction: DocumentActionComponent = ({id, type, draft, onComplete}) => {\n  const {setIsDeleting: paneSetIsDeleting} = useDocumentPane()\n  const {delete: deleteOp} = useDocumentOperation(id, type)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setIsDeleting(true)\n    setConfirmDialogOpen(false)\n    paneSetIsDeleting(true)\n    deleteOp.execute()\n    onComplete()\n  }, [deleteOp, onComplete, paneSetIsDeleting])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'delete',\n  })\n\n  const currentUser = useCurrentUser()\n\n  if (!isPermissionsLoading && !permissions?.granted) {\n    return {\n      tone: 'critical',\n      icon: TrashIcon,\n      disabled: true,\n      label: t('action.delete.label'),\n      title: <InsufficientPermissionsMessage context=\"delete-document\" currentUser={currentUser} />,\n    }\n  }\n\n  return {\n    tone: 'critical',\n    icon: TrashIcon,\n    disabled: isDeleting || Boolean(deleteOp.disabled) || isPermissionsLoading,\n    title: (deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY[deleteOp.disabled])) || '',\n    label: isDeleting ? t('action.delete.running.label') : t('action.delete.label'),\n    shortcut: 'Ctrl+Alt+D',\n    onHandle: handle,\n    dialog: isConfirmDialogOpen && {\n      type: 'custom',\n      component: (\n        <ConfirmDeleteDialog\n          // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n          action=\"delete\"\n          id={draft?._id || id}\n          type={type}\n          onCancel={handleCancel}\n          onConfirm={handleConfirm}\n        />\n      ),\n    },\n  }\n}\n\nDeleteAction.action = 'delete'\n", "/* eslint-disable import/no-extraneous-dependencies */\n\nimport {ResetIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NO_CHANGES: 'action.discard-changes.disabled.no-changes',\n  NOT_PUBLISHED: 'action.discard-changes.disabled.not-published',\n  NOT_READY: 'action.discard-changes.disabled.not-ready',\n} as const\n\n/** @internal */\nexport const DiscardChangesAction: DocumentActionComponent = ({\n  id,\n  type,\n  published,\n  liveEdit,\n  onComplete,\n}) => {\n  const {discardChanges} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'discardDraft',\n  })\n  const currentUser = useCurrentUser()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    discardChanges.execute()\n    onComplete()\n  }, [discardChanges, onComplete])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | false = useMemo(\n    () =>\n      isConfirmDialogOpen && {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.discard-changes.confirm-dialog.confirm-discard-changes'),\n      },\n    [handleConfirm, isConfirmDialogOpen, onComplete, t],\n  )\n\n  if (!published || liveEdit) {\n    return null\n  }\n\n  if (!isPermissionsLoading && !permissions?.granted) {\n    return {\n      tone: 'critical',\n      icon: ResetIcon,\n      disabled: true,\n      label: t('action.discard-changes.label'),\n      title: <InsufficientPermissionsMessage context=\"discard-changes\" currentUser={currentUser} />,\n    }\n  }\n\n  return {\n    tone: 'critical',\n    icon: ResetIcon,\n    disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,\n    title: (discardChanges.disabled && DISABLED_REASON_KEY[discardChanges.disabled]) || '',\n    label: t('action.discard-changes.label'),\n    onHandle: handle,\n    dialog,\n  }\n}\n\nDiscardChangesAction.action = 'discardChanges'\n", "import {CopyIcon} from '@sanity/icons'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback, useState} from 'react'\nimport {filter, firstValueFrom} from 'rxjs'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOTHING_TO_DUPLICATE: 'action.duplicate.disabled.nothing-to-duplicate',\n  NOT_READY: 'action.duplicate.disabled.not-ready',\n}\n\n/** @internal */\nexport const DuplicateAction: DocumentActionComponent = ({id, type, onComplete}) => {\n  const documentStore = useDocumentStore()\n  const {duplicate} = useDocumentOperation(id, type)\n  const {navigateIntent} = useRouter()\n  const [isDuplicating, setDuplicating] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'duplicate',\n  })\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const currentUser = useCurrentUser()\n\n  const handle = useCallback(async () => {\n    const dupeId = uuid()\n\n    setDuplicating(true)\n\n    // set up the listener before executing\n    const duplicateSuccess = firstValueFrom(\n      documentStore.pair\n        .operationEvents(id, type)\n        .pipe(filter((e) => e.op === 'duplicate' && e.type === 'success')),\n    )\n    duplicate.execute(dupeId)\n\n    // only navigate to the duplicated document when the operation is successful\n    await duplicateSuccess\n    navigateIntent('edit', {id: dupeId, type})\n\n    onComplete()\n  }, [documentStore.pair, duplicate, id, navigateIntent, onComplete, type])\n\n  if (!isPermissionsLoading && !permissions?.granted) {\n    return {\n      icon: CopyIcon,\n      disabled: true,\n      label: t('action.duplicate.label'),\n      title: (\n        <InsufficientPermissionsMessage context=\"duplicate-document\" currentUser={currentUser} />\n      ),\n    }\n  }\n\n  return {\n    icon: CopyIcon,\n    disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,\n    label: isDuplicating ? t('action.duplicate.running.label') : t('action.duplicate.label'),\n    title: duplicate.disabled ? t(DISABLED_REASON_KEY[duplicate.disabled]) : '',\n    onHandle: handle,\n  }\n}\n\nDuplicateAction.action = 'duplicate'\n", "import {RestoreIcon} from '@sanity/icons'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  useDocumentOperation,\n  useDocumentOperationEvent,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\n/** @internal */\nexport const HistoryRestoreAction: DocumentActionComponent = ({id, type, revision, onComplete}) => {\n  const {restore} = useDocumentOperation(id, type)\n  const event = useDocumentOperationEvent(id, type)\n  const {navigateIntent} = useRouter()\n  const prevEvent = useRef(event)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    restore.execute(revision!)\n    onComplete()\n  }, [restore, revision, onComplete])\n\n  /**\n   * If the restore operation is successful, navigate to the document edit view\n   */\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'success' && event.op === 'restore') {\n      navigateIntent('edit', {id, type})\n    }\n\n    prevEvent.current = event\n  }, [event, id, navigateIntent, type])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.restore.confirm.message'),\n      }\n    }\n\n    return null\n  }, [handleConfirm, isConfirmDialogOpen, onComplete, t])\n\n  const isRevisionInitialVersion = revision === '@initial'\n  const isRevisionLatestVersion = revision === undefined // undefined means latest version\n\n  if (isRevisionLatestVersion) {\n    return null\n  }\n\n  return {\n    label: t('action.restore.label'),\n    color: 'primary',\n    onHandle: handle,\n    title: t(\n      isRevisionInitialVersion\n        ? 'action.restore.disabled.cannot-restore-initial'\n        : 'action.restore.tooltip',\n    ),\n    icon: RestoreIcon,\n    dialog,\n    disabled: isRevisionInitialVersion,\n  }\n}\n\nHistoryRestoreAction.action = 'restore'\n", "import {defineEvent} from '@sanity/telemetry'\n\ninterface DocumentPublishedInfo {\n  /**\n   * The document was created and published straight away\n   */\n  publishedImmediately: boolean\n\n  /**\n   * The document had a previously published version when it was published\n   */\n  previouslyPublished: boolean\n}\nexport const DocumentPublished = defineEvent<DocumentPublishedInfo>({\n  name: 'Document Published',\n  version: 1,\n  description: 'User clicked the \"Publish\" button in the document pane',\n})\n", "import {PublishIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport {useCallback, useEffect, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  type TFunction,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useEditState,\n  useRelativeTime,\n  useSyncState,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {structureLocaleNamespace, type StructureLocaleResourceKeys} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\nimport {DocumentPublished} from './__telemetry__/documentActions.telemetry'\n\nconst DISABLED_REASON_TITLE_KEY: Record<string, StructureLocaleResourceKeys> = {\n  LIVE_EDIT_ENABLED: 'action.publish.live-edit.publish-disabled',\n  ALREADY_PUBLISHED: 'action.publish.already-published.no-time-ago.tooltip',\n  NO_CHANGES: 'action.publish.no-changes.tooltip',\n  NOT_READY: 'action.publish.disabled.not-ready',\n} as const\n\nfunction getDisabledReason(\n  reason: keyof typeof DISABLED_REASON_TITLE_KEY,\n  publishedAt: string | undefined,\n  t: TFunction,\n) {\n  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {\n    return <AlreadyPublished publishedAt={publishedAt} />\n  }\n  return t(DISABLED_REASON_TITLE_KEY[reason])\n}\n\nfunction AlreadyPublished({publishedAt}: {publishedAt: string}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const timeSincePublished = useRelativeTime(publishedAt, {useTemporalPhrase: true})\n  return <span>{t('action.publish.already-published.tooltip', {timeSincePublished})}</span>\n}\n\n/** @internal */\n// eslint-disable-next-line complexity\nexport const PublishAction: DocumentActionComponent = (props) => {\n  const {id, type, liveEdit, draft, published} = props\n  const [publishState, setPublishState] = useState<'publishing' | 'published' | null>(null)\n  const {publish} = useDocumentOperation(id, type)\n  const validationStatus = useValidationStatus(id, type)\n  const syncState = useSyncState(id, type)\n  const {changesOpen, onHistoryOpen, documentId, documentType} = useDocumentPane()\n  const editState = useEditState(documentId, documentType)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const revision = (editState?.draft || editState?.published || {})._rev\n\n  const hasValidationErrors = validationStatus.validation.some(isValidationErrorMarker)\n  // we use this to \"schedule\" publish after pending tasks (e.g. validation and sync) has completed\n  const [publishScheduled, setPublishScheduled] = useState<boolean>(false)\n  const isSyncing = syncState.isSyncing\n  const isValidating = validationStatus.isValidating\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'publish',\n  })\n\n  const currentUser = useCurrentUser()\n\n  // eslint-disable-next-line no-nested-ternary\n  const title = publish.disabled\n    ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || ''\n    : hasValidationErrors\n      ? t('action.publish.validation-issues.tooltip')\n      : ''\n\n  const hasDraft = Boolean(draft)\n\n  const doPublish = useCallback(() => {\n    publish.execute()\n    setPublishState('publishing')\n  }, [publish])\n\n  useEffect(() => {\n    // make sure the validation status is about the current revision and not an earlier one\n    const validationComplete =\n      validationStatus.isValidating === false && validationStatus.revision !== revision\n\n    if (!publishScheduled || isSyncing || !validationComplete) {\n      return\n    }\n\n    if (!hasValidationErrors) {\n      doPublish()\n    }\n    setPublishScheduled(false)\n  }, [\n    isSyncing,\n    doPublish,\n    hasValidationErrors,\n    publishScheduled,\n    validationStatus.revision,\n    revision,\n    isValidating,\n    validationStatus.isValidating,\n  ])\n\n  useEffect(() => {\n    const didPublish = publishState === 'publishing' && !hasDraft\n    if (didPublish) {\n      if (changesOpen) {\n        // Re-open the panel\n        onHistoryOpen()\n      }\n    }\n    const nextState = didPublish ? 'published' : null\n    const delay = didPublish ? 200 : 4000\n    const timer = setTimeout(() => {\n      setPublishState(nextState)\n    }, delay)\n    return () => clearTimeout(timer)\n  }, [changesOpen, publishState, hasDraft, onHistoryOpen])\n\n  const telemetry = useTelemetry()\n\n  const handle = useCallback(() => {\n    telemetry.log(DocumentPublished, {\n      publishedImmediately: !draft?._createdAt,\n      previouslyPublished: Boolean(published),\n    })\n    if (\n      syncState.isSyncing ||\n      validationStatus.isValidating ||\n      validationStatus.revision !== revision\n    ) {\n      setPublishScheduled(true)\n    } else {\n      doPublish()\n    }\n  }, [\n    telemetry,\n    draft?._createdAt,\n    published,\n    syncState.isSyncing,\n    validationStatus.isValidating,\n    validationStatus.revision,\n    revision,\n    doPublish,\n  ])\n\n  if (liveEdit) {\n    return {\n      tone: 'default',\n      icon: PublishIcon,\n      label: t('action.publish.live-edit.label'),\n      title: t('action.publish.live-edit.tooltip'),\n      disabled: true,\n    }\n  }\n\n  if (!isPermissionsLoading && !permissions?.granted) {\n    return {\n      tone: 'default',\n      icon: PublishIcon,\n      label: 'Publish',\n      title: (\n        <InsufficientPermissionsMessage context=\"publish-document\" currentUser={currentUser} />\n      ),\n      disabled: true,\n    }\n  }\n\n  const disabled = Boolean(\n    publishScheduled ||\n      editState?.transactionSyncLock?.enabled ||\n      publishState === 'publishing' ||\n      publishState === 'published' ||\n      hasValidationErrors ||\n      publish.disabled,\n  )\n\n  return {\n    disabled: disabled || isPermissionsLoading,\n    tone: 'default',\n    label:\n      // eslint-disable-next-line no-nested-ternary\n      publishState === 'published'\n        ? t('action.publish.published.label')\n        : publishScheduled || publishState === 'publishing'\n          ? t('action.publish.running.label')\n          : t('action.publish.draft.label'),\n    // @todo: Implement loading state, to show a `<Button loading />` state\n    // loading: publishScheduled || publishState === 'publishing',\n    icon: PublishIcon,\n    // eslint-disable-next-line no-nested-ternary\n    title: publishScheduled\n      ? t('action.publish.waiting')\n      : publishState === 'published' || publishState === 'publishing'\n        ? null\n        : title,\n    shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',\n    onHandle: handle,\n  }\n}\n\nPublishAction.action = 'publish'\n", "import {UnpublishIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionModalDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOT_PUBLISHED: 'action.unpublish.disabled.not-published',\n  NOT_READY: 'action.unpublish.disabled.not-ready',\n  LIVE_EDIT_ENABLED: 'action.unpublish.disabled.live-edit-enabled',\n}\n\n/** @internal */\nexport const UnpublishAction: DocumentActionComponent = ({\n  id,\n  type,\n  draft,\n  onComplete,\n  liveEdit,\n}) => {\n  const {unpublish} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'unpublish',\n  })\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setConfirmDialogOpen(false)\n    unpublish.execute()\n    onComplete()\n  }, [onComplete, unpublish])\n\n  const dialog: DocumentActionModalDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'dialog',\n        onClose: onComplete,\n        content: (\n          <ConfirmDeleteDialog\n            id={draft?._id || id}\n            type={type}\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"unpublish\"\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      }\n    }\n\n    return null\n  }, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type])\n\n  if (liveEdit) {\n    return null\n  }\n\n  if (!isPermissionsLoading && !permissions?.granted) {\n    return {\n      tone: 'critical',\n      icon: UnpublishIcon,\n      label: 'Unpublish',\n      title: (\n        <InsufficientPermissionsMessage context=\"unpublish-document\" currentUser={currentUser} />\n      ),\n      disabled: true,\n    }\n  }\n\n  return {\n    tone: 'critical',\n    icon: UnpublishIcon,\n    disabled: Boolean(unpublish.disabled) || isPermissionsLoading,\n    label: t('action.unpublish.label'),\n    title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : '',\n    onHandle: () => setConfirmDialogOpen(true),\n    dialog,\n  }\n}\n\nUnpublishAction.action = 'unpublish'\n", "/* eslint-disable camelcase */\nimport {Flex, Hotkeys, LayerProvider, Stack, Text} from '@sanity/ui'\nimport {memo, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDescription,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {Button, Tooltip} from '../../../../ui-components'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nfunction DocumentStatusBarActionsInner(props: DocumentStatusBarActionsInnerProps) {\n  const {disabled, showMenu, states} = props\n  const {__internal_tasks} = useDocumentPane()\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  // TODO: This could be refactored to use the tooltip from the button if the firstAction.title was updated to a string.\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex style={{maxWidth: 300}} align=\"center\" gap={3}>\n        {firstActionState.title && <Text size={1}>{firstActionState.title}</Text>}\n        {firstActionState.shortcut && (\n          <Hotkeys\n            fontSize={1}\n            style={{marginTop: -4, marginBottom: -4}}\n            keys={String(firstActionState.shortcut)\n              .split('+')\n              .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n          />\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      {__internal_tasks && __internal_tasks.footerAction}\n      {firstActionState && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} placement=\"top\">\n            <Stack>\n              <Button\n                data-testid={`action-${firstActionState.label}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                size=\"large\"\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n      {showMenu && menuActionStates.length > 0 && (\n        <ActionMenuButton actionStates={menuActionStates} disabled={disabled} />\n      )}\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n}\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions: allActions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  // The restore action has a dedicated place in the UI; it's only visible when the user is viewing\n  // a different document revision. It must be omitted from this collection.\n  const actions = useMemo(\n    () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n    [allActions],\n  )\n\n  if (actions.length === 0 || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      actionProps={editState}\n      group=\"default\"\n    >\n      {({states}) => (\n        <DocumentStatusBarActionsInner\n          disabled={connectionState !== 'connected'}\n          // isMenuOpen={isMenuOpen}\n          // onMenuOpen={handleMenuOpen}\n          // onMenuClose={handleMenuClose}\n          showMenu={actions.length > 1}\n          states={states}\n          // Use document ID as key to make sure that the actions state is reset when the document changes\n          key={documentId}\n        />\n      )}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {actions, connectionState, editState, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n  const revision = revTime?.id || ''\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n\n  // If multiple `restore` actions are defined, ensure only the final one is used.\n  const historyActions = useMemo(() => (actions ?? []).filter(isRestoreAction).slice(-1), [actions])\n\n  return (\n    <RenderActionCollectionState\n      actions={historyActions}\n      actionProps={actionProps as any}\n      group=\"default\"\n    >\n      {({states}) => (\n        <DocumentStatusBarActionsInner\n          disabled={connectionState !== 'connected' || Boolean(disabled)}\n          showMenu={false}\n          states={states}\n        />\n      )}\n    </RenderActionCollectionState>\n  )\n})\n\nexport function isRestoreAction(\n  action: DocumentActionComponent,\n): action is DocumentActionComponent & {action: 'restore'} {\n  return action.action === HistoryRestoreAction.action\n}\n", "import {\n  AddCircleIcon,\n  CloseIcon,\n  EditIcon,\n  type IconComponent,\n  PublishIcon,\n  TrashIcon,\n  UnpublishIcon,\n} from '@sanity/icons'\n\nexport const TIMELINE_ICON_COMPONENTS: {[key: string]: IconComponent | undefined} = {\n  create: AddCircleIcon,\n  delete: TrashIcon,\n  discardDraft: CloseIcon,\n  initial: AddCircleIcon,\n  editDraft: EditIcon,\n  editLive: EditIcon,\n  publish: PublishIcon,\n  unpublish: UnpublishIcon,\n}\n", "import {type IconComponent} from '@sanity/icons'\nimport {type ChunkType} from 'sanity'\n\nimport {TIMELINE_ICON_COMPONENTS} from './constants'\n\nexport function getTimelineEventIconComponent(type: ChunkType): IconComponent | undefined {\n  return TIMELINE_ICON_COMPONENTS[type]\n}\n", "import {Box, Flex, Stack} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const StackWrapper = styled(Stack)`\n  max-width: 200px;\n`\n\nexport const ListWrapper = styled(Flex)`\n  max-height: calc(100vh - 198px);\n  min-width: 244px;\n`\n\nexport const Root = styled(Box)<{$visible?: boolean}>(({$visible}) => {\n  return css`\n    opacity: 0;\n    pointer-events: none;\n\n    ${$visible &&\n    css`\n      opacity: 1;\n      pointer-events: auto;\n    `}\n  `\n})\n", "import {type ChunkType, type StudioLocaleResourceKeys} from 'sanity'\n\n/**\n * Maps from a chunk type to an i18n key for the operation\n *\n * @internal\n */\nexport const TIMELINE_ITEM_I18N_KEY_MAPPING: Record<ChunkType, StudioLocaleResourceKeys> = {\n  initial: 'timeline.operation.created-initial',\n  create: 'timeline.operation.created',\n  publish: 'timeline.operation.published',\n  editLive: 'timeline.operation.edited-live',\n  editDraft: 'timeline.operation.edited-draft',\n  unpublish: 'timeline.operation.unpublished',\n  discardDraft: 'timeline.operation.draft-discarded',\n  delete: 'timeline.operation.deleted',\n}\n", "import {\n  Box,\n  // eslint-disable-next-line no-restricted-imports\n  Button, // Button with specific styling and children behavior.\n  Flex,\n  rem,\n} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const IconWrapper = styled(Flex)(({theme}) => {\n  const borderColor = theme.sanity.color.base.skeleton?.from\n\n  return css`\n    --timeline-hairline-width: 1px;\n    position: relative;\n    z-index: 2;\n    margin: 0;\n    padding: 0;\n\n    &::before {\n      position: absolute;\n      content: '';\n      height: 100%;\n      width: var(--timeline-hairline-width);\n      background: ${borderColor};\n      top: 0;\n      left: calc((100% - var(--timeline-hairline-width)) / 2);\n      z-index: 1;\n    }\n  `\n})\n\nexport const Root = styled(Button)<{\n  $selected: boolean\n  $disabled: boolean\n}>(({$selected, $disabled}) => {\n  return css`\n    position: relative;\n    width: 100%;\n\n    /* Line styling */\n    &[data-first] ${IconWrapper}::before {\n      height: 50%;\n      top: unset;\n      bottom: 0;\n    }\n\n    &[data-last] ${IconWrapper}::before {\n      height: 50%;\n    }\n\n    ${$selected &&\n    css`\n      ${IconWrapper}::before {\n        background: transparent;\n      }\n    `}\n\n    ${$disabled &&\n    css`\n      cursor: not-allowed;\n    `}\n  `\n})\n\nexport const IconBox = styled(Box)`\n  background: var(--card-bg-color);\n  border-radius: 50px;\n  position: relative;\n  z-index: 2;\n`\n\nexport const TimestampBox = styled(Box)`\n  min-width: 1rem;\n  margin-left: ${({theme}) => `-${rem(theme.sanity.space[1])}`};\n`\n", "import {AvatarStack} from '@sanity/ui'\nimport {UserAvatar} from 'sanity'\n\ninterface UserAvatarStackProps {\n  maxLength?: number\n  userIds: string[]\n}\n\nexport function UserAvatarStack({maxLength, userIds}: UserAvatarStackProps) {\n  return (\n    <AvatarStack maxLength={maxLength}>\n      {userIds.map((userId) => (\n        <UserAvatar key={userId} user={userId} withTooltip />\n      ))}\n    </AvatarStack>\n  )\n}\n", "import {Box, Card, Flex, Stack, Text} from '@sanity/ui'\nimport {createElement, type MouseEvent, useCallback, useMemo} from 'react'\nimport {type Chunk, type ChunkType, useDateTimeFormat, useTranslation} from 'sanity'\n\nimport {type ButtonProps} from '../../../../ui-components'\nimport {getTimelineEventIconComponent} from './helpers'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\nimport {IconBox, IconWrapper, Root, TimestampBox} from './timelineItem.styled'\nimport {UserAvatarStack} from './userAvatarStack'\n\nconst TIMELINE_ITEM_EVENT_TONE: Record<ChunkType | 'withinSelection', ButtonProps['tone']> = {\n  initial: 'primary',\n  create: 'primary',\n  publish: 'positive',\n  editLive: 'caution',\n  editDraft: 'caution',\n  unpublish: 'critical',\n  discardDraft: 'critical',\n  delete: 'critical',\n  withinSelection: 'primary',\n}\n\ninterface TimelineItemProps {\n  chunk: Chunk\n  isFirst: boolean\n  isLast: boolean\n  isLatest: boolean\n  isSelected: boolean\n  onSelect: (chunk: Chunk) => void\n  timestamp: string\n  type: ChunkType\n}\n\nexport function TimelineItem({\n  chunk,\n  isFirst,\n  isLast,\n  isLatest,\n  isSelected,\n  onSelect,\n  timestamp,\n  type,\n}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n\n  const iconComponent = getTimelineEventIconComponent(type)\n  const authorUserIds = Array.from(chunk.authors)\n  const isSelectable = type !== 'delete'\n  const dateFormat = useDateTimeFormat({dateStyle: 'medium', timeStyle: 'short'})\n  const formattedTimestamp = useMemo(() => {\n    const parsedDate = new Date(timestamp)\n    const formattedDate = dateFormat.format(parsedDate)\n\n    return formattedDate\n  }, [timestamp, dateFormat])\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLButtonElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(chunk)\n      }\n    },\n    [onSelect, chunk, isSelectable],\n  )\n\n  return (\n    <Root\n      $selected={isSelected}\n      $disabled={!isSelectable}\n      data-testid=\"timeline-item-button\"\n      data-chunk-id={chunk.id}\n      data-first={isFirst ? true : undefined}\n      data-last={isLast ? true : undefined}\n      data-ui=\"timelineItem\"\n      mode={isSelected ? 'default' : 'bleed'}\n      onClick={handleClick}\n      padding={0}\n      radius={2}\n      tone={isSelected ? 'primary' : TIMELINE_ITEM_EVENT_TONE[chunk.type]}\n    >\n      <Box paddingX={2}>\n        <Flex align=\"stretch\">\n          <IconWrapper align=\"center\">\n            <IconBox padding={2}>\n              <Text size={2}>{iconComponent && createElement(iconComponent)}</Text>\n            </IconBox>\n          </IconWrapper>\n\n          <Stack space={2} margin={2}>\n            {isLatest && (\n              <Flex>\n                <Card\n                  padding={1}\n                  radius={2}\n                  shadow={1}\n                  tone={isSelected ? 'primary' : TIMELINE_ITEM_EVENT_TONE[chunk.type]}\n                >\n                  <Text muted size={0} weight=\"medium\">\n                    {t('timeline.latest')}\n                  </Text>\n                </Card>\n              </Flex>\n            )}\n            <Box>\n              <Text size={1} weight=\"medium\">\n                {t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || <code>{type}</code>}\n              </Text>\n            </Box>\n            <TimestampBox paddingX={1}>\n              <Text as=\"time\" size={0} muted dateTime={timestamp}>\n                {formattedTimestamp}\n              </Text>\n            </TimestampBox>\n          </Stack>\n          <Flex flex={1} justify=\"flex-end\" align=\"center\">\n            <UserAvatarStack maxLength={3} userIds={authorUserIds} />\n          </Flex>\n        </Flex>\n      </Box>\n    </Root>\n  )\n}\n", "import {Box, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type Chunk,\n  CommandList,\n  type CommandListRenderItemCallback,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ListWrapper, Root, StackWrapper} from './timeline.styled'\nimport {TimelineItem} from './timelineItem'\n\ninterface TimelineProps {\n  chunks: Chunk[]\n  disabledBeforeFirstChunk?: boolean\n  firstChunk?: Chunk | null\n  hasMoreChunks: boolean | null\n  lastChunk?: Chunk | null\n  onLoadMore: () => void\n  onSelect: (chunk: Chunk) => void\n}\n\nexport const Timeline = ({\n  chunks,\n  disabledBeforeFirstChunk,\n  hasMoreChunks,\n  lastChunk,\n  onLoadMore,\n  onSelect,\n  firstChunk,\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n\n  const filteredChunks = useMemo(() => {\n    return chunks.filter((c) => {\n      if (disabledBeforeFirstChunk && firstChunk) {\n        return c.index < firstChunk.index\n      }\n      return true\n    })\n  }, [chunks, disabledBeforeFirstChunk, firstChunk])\n\n  const selectedIndex = useMemo(\n    () => (lastChunk?.id ? filteredChunks.findIndex((c) => c.id === lastChunk.id) : -1),\n    [lastChunk?.id, filteredChunks],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<Chunk>>(\n    (chunk, {activeIndex}) => {\n      const isFirst = activeIndex === 0\n      const isLast = (filteredChunks && activeIndex === filteredChunks.length - 1) || false\n      return (\n        <Box paddingBottom={isLast ? 1 : 0} paddingTop={isFirst ? 1 : 0} paddingX={1}>\n          <TimelineItem\n            chunk={chunk}\n            isFirst={isFirst}\n            isLast={isLast}\n            isLatest={activeIndex === 0 && !disabledBeforeFirstChunk}\n            isSelected={activeIndex === selectedIndex}\n            onSelect={onSelect}\n            timestamp={chunk.endTimestamp}\n            type={chunk.type}\n          />\n          {activeIndex === filteredChunks.length - 1 && hasMoreChunks && <LoadingBlock />}\n        </Box>\n      )\n    },\n    [disabledBeforeFirstChunk, filteredChunks, hasMoreChunks, onSelect, selectedIndex],\n  )\n\n  useEffect(() => setMounted(true), [])\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {filteredChunks.length === 0 && (\n        <StackWrapper padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </StackWrapper>\n      )}\n\n      {filteredChunks.length > 0 && (\n        <ListWrapper direction=\"column\">\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={40}\n            items={filteredChunks}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      )}\n    </Root>\n  )\n}\n\nTimeline.displayName = 'Timeline'\n", "import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Flex, Stack} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nexport function TimelineError() {\n  const {t} = useTranslation('studio')\n\n  return (\n    <Flex align=\"flex-start\" gap={3} padding={4}>\n      <TextWithTone tone=\"critical\">\n        <ErrorOutlineIcon />\n      </TextWithTone>\n      <Stack space={4}>\n        <TextWithTone size={1} tone=\"critical\" weight=\"medium\">\n          {t('timeline.error.load-document-changes-title')}\n        </TextWithTone>\n        <TextWithTone size={1} tone=\"critical\">\n          {t('timeline.error.load-document-changes-description')}\n        </TextWithTone>\n      </Stack>\n    </Flex>\n  )\n}\n", "import {ChevronDownIcon} from '@sanity/icons'\nimport {type Placement, useClickOutside, useGlobalKeyDown, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {type Chunk, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Timeline} from './timeline'\nimport {TimelineError} from './TimelineError'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\n\ninterface TimelineMenuProps {\n  chunk: Chunk | null\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport function TimelineMenu({chunk, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange, setTimelineMode, timelineError, ready, timelineStore} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popover, setPopover] = useState<HTMLElement | null>(null)\n  const toast = useToast()\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setTimelineMode(mode)\n    setOpen(true)\n  }, [mode, setTimelineMode])\n\n  const handleClose = useCallback(() => {\n    setTimelineMode('closed')\n    setOpen(false)\n  }, [setTimelineMode])\n\n  const handleClickOutside = useCallback(() => {\n    if (open) {\n      handleClose()\n    }\n  }, [handleClose, open])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (open && (event.key === 'Escape' || event.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useClickOutside(handleClickOutside, [button, popover])\n  useGlobalKeyDown(handleGlobalKeyDown)\n\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const selectSince = useCallback(\n    (sinceChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForSince(sinceChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  const content = timelineError ? (\n    <TimelineError />\n  ) : (\n    <>\n      {mode === 'rev' && (\n        <Timeline\n          chunks={chunks}\n          firstChunk={realRevChunk}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={realRevChunk}\n          onLoadMore={handleLoadMore}\n          onSelect={selectRev}\n        />\n      )}\n      {mode === 'since' && (\n        <Timeline\n          chunks={chunks}\n          disabledBeforeFirstChunk\n          firstChunk={realRevChunk}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={sinceTime}\n          onLoadMore={handleLoadMore}\n          onSelect={selectSince}\n        />\n      )}\n    </>\n  )\n\n  const formatParams = {\n    timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n  }\n\n  const revLabel = chunk\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {\n        context: 'timestamp',\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.latest-version')\n\n  const sinceLabel = chunk\n    ? t('timeline.since', {\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.since-version-missing')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <Root\n      data-testid=\"timeline-menu\"\n      constrainSize\n      content={open && content}\n      data-ui=\"versionMenu\"\n      open={open}\n      placement={placement}\n      portal\n      ref={setPopover}\n    >\n      <Button\n        data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n        disabled={!ready}\n        mode=\"bleed\"\n        iconRight={ChevronDownIcon}\n        onClick={open ? handleClose : handleOpen}\n        ref={setButton}\n        selected={open}\n        style={{maxWidth: '100%'}}\n        text={ready ? buttonLabel : t('timeline.loading-history')}\n      />\n    </Root>\n  )\n}\n", "import {TabList} from '@sanity/ui'\nimport {type ComponentType, type ReactNode, useCallback} from 'react'\n\nimport {Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={view.title}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : view.id ?? null}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId, ...rest} = props\n  const {ready} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...rest} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready}\n      icon={icon}\n      id={id}\n      label={label}\n      onClick={handleClick}\n      selected={isActive}\n    />\n  )\n}\n", "import {type ReactElement} from 'react'\nimport {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTitle(): ReactElement {\n  const {connectionState, schemaType, title, value: documentValue} = useDocumentPane()\n  const subscribed = Boolean(documentValue) && connectionState !== 'connecting'\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (connectionState === 'connecting') {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return (\n      <>\n        {t('panes.document-header-title.new.text', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })}\n      </>\n    )\n  }\n\n  if (error) {\n    return <>{t('panes.document-header-title.error.text', {error: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>\n          {t('panes.document-header-title.untitled.text')}\n        </span>\n      )}\n    </>\n  )\n}\n", "import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Flex} from '@sanity/ui'\nimport {createElement, type ForwardedRef, forwardRef, memo, useMemo, useState} from 'react'\nimport {useFieldActions, useTimelineSelector, useTranslation} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../../ui-components'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  RenderActionCollectionState,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {type PaneMenuItem} from '../../../../types'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {ActionDialogWrapper, ActionMenuListItem} from '../../statusBar/ActionMenuButton'\nimport {isRestoreAction} from '../../statusBar/DocumentStatusBarActions'\nimport {TimelineMenu} from '../../timeline'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {\n  menuItems: PaneMenuItem[]\n}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) {\n    const {menuItems} = _props\n    const {\n      actions: allActions,\n      editState,\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItemGroups,\n      schemaType,\n      timelineStore,\n      connectionState,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useStructureTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n\n    // The restore action has a dedicated place in the UI; it's only visible when the user is\n    // viewing a different document revision. It must be omitted from this collection.\n    const actions = useMemo(\n      () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n      [allActions],\n    )\n\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    // Subscribe to external timeline state changes\n    const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the back button if both the feature is enabled and the current pane\n    // is not the first\n    const showBackButton = features.backButton && index > 0\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button do the same thing and shouldn't be shown at the same time)\n    // and if a BackLink component was provided\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink\n\n    const {t} = useTranslation(structureLocaleNamespace)\n\n    return (\n      <TooltipDelayGroupProvider>\n        <PaneHeader\n          border\n          ref={ref}\n          loading={connectionState === 'connecting'}\n          title={<DocumentHeaderTitle />}\n          tabs={showTabs && <DocumentHeaderTabs />}\n          tabIndex={tabIndex}\n          backButton={\n            showBackButton && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: t('pane-header.back-button.text')}}\n              />\n            )\n          }\n          subActions={<TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />}\n          actions={\n            <Flex align=\"center\" gap={1}>\n              {unstable_languageFilter.length > 0 && (\n                <>\n                  {unstable_languageFilter.map((languageFilterComponent, idx) => {\n                    return createElement(languageFilterComponent, {\n                      // eslint-disable-next-line react/no-array-index-key\n                      key: `language-filter-${idx}`,\n                      schemaType,\n                    })\n                  })}\n                </>\n              )}\n\n              {menuButtonNodes.map((item) => (\n                <PaneHeaderActionButton key={item.key} node={item} />\n              ))}\n              {editState && (\n                <RenderActionCollectionState\n                  actions={actions}\n                  actionProps={editState}\n                  group=\"paneActions\"\n                >\n                  {({states}) => (\n                    <ActionDialogWrapper actionStates={states} referenceElement={referenceElement}>\n                      {({handleAction}) => (\n                        <div ref={setReferenceElement}>\n                          <PaneContextMenuButton\n                            nodes={contextMenuNodes}\n                            key=\"context-menu\"\n                            actionsNodes={\n                              states.length > 0\n                                ? states.map((actionState, actionIndex) => (\n                                    <ActionMenuListItem\n                                      key={actionState.label}\n                                      actionState={actionState}\n                                      disabled={Boolean(actionState.disabled)}\n                                      index={actionIndex}\n                                      onAction={handleAction}\n                                    />\n                                  ))\n                                : undefined\n                            }\n                          />\n                        </div>\n                      )}\n                    </ActionDialogWrapper>\n                  )}\n                </RenderActionCollectionState>\n              )}\n\n              {showSplitPaneButton && (\n                <Button\n                  aria-label={t('buttons.split-pane-button.aria-label')}\n                  icon={SplitVerticalIcon}\n                  key=\"split-pane-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneSplit}\n                  tooltipProps={{content: t('buttons.split-pane-button.tooltip')}}\n                />\n              )}\n\n              {showSplitPaneCloseButton && (\n                <Button\n                  icon={CloseIcon}\n                  key=\"close-view-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneClose}\n                  tooltipProps={{content: t('buttons.split-pane-close-button.title')}}\n                />\n              )}\n\n              {showPaneGroupCloseButton && (\n                <Button\n                  icon={CloseIcon}\n                  key=\"close-view-button\"\n                  mode=\"bleed\"\n                  tooltipProps={{content: t('buttons.split-pane-close-group-button.title')}}\n                  as={BackLink}\n                />\n              )}\n            </Flex>\n          }\n        />\n      </TooltipDelayGroupProvider>\n    )\n  }),\n)\n", "import {Badge, type BadgeTone, Inline} from '@sanity/ui'\nimport {type DocumentBadgeDescription} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {RenderBadgeCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nfunction DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  if (states.length === 0) {\n    return null\n  }\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={badge.title}\n          disabled={!badge.title}\n          key={String(index)}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n}\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState as any}>\n      {({states}) => <DocumentBadgesInner states={states} />}\n    </RenderBadgeCollectionState>\n  )\n}\n", "import {motion} from 'framer-motion'\nimport {type ComponentProps} from 'react'\nimport {keyframes, styled} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd' | 'ref'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"animated-status-icon\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n", "import {type ButtonTone, Flex, Text} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\n\ntype StatusType = 'saved' | 'syncing'\ninterface ReviewChangesButtonProps {\n  status?: StatusType\n}\n\nconst STATUS_DICTIONARY: Record<StatusType, {i18nKey: string; tone: ButtonTone}> = {\n  saved: {\n    i18nKey: 'status-bar.document-status-pulse.status.saved.text',\n    tone: 'positive',\n  },\n  syncing: {\n    i18nKey: 'status-bar.document-status-pulse.status.syncing.text',\n    tone: 'default',\n  },\n}\n\nexport const DocumentStatusPulse = (props: ReviewChangesButtonProps) => {\n  const {status} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (status !== 'saved' && status !== 'syncing') {\n    return null\n  }\n\n  const currentStatus = STATUS_DICTIONARY[status]\n\n  return (\n    <Flex align=\"center\" gap={2}>\n      <TextWithTone size={1} tone={currentStatus.tone}>\n        <AnimatedStatusIcon status={status} />\n      </TextWithTone>\n\n      <Text muted size={1}>\n        {t(currentStatus.i18nKey)}\n      </Text>\n    </Flex>\n  )\n}\n", "import {Flex} from '@sanity/ui'\nimport {useEffect, useLayoutEffect, useState} from 'react'\nimport {DocumentStatus, DocumentStatusIndicator, useSyncState} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusPulse} from './DocumentStatusPulse'\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\ninterface DocumentStatusLineProps {\n  singleLine?: boolean\n}\n\nexport function DocumentStatusLine({singleLine}: DocumentStatusLineProps) {\n  const {documentId, documentType, editState, value} = useDocumentPane()\n\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n\n  const syncState = useSyncState(documentId, documentType)\n\n  const lastUpdated = value?._updatedAt\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  if (status) {\n    return <DocumentStatusPulse status={status || undefined} />\n  }\n\n  return (\n    <Tooltip\n      content={\n        <DocumentStatus absoluteDate draft={editState?.draft} published={editState?.published} />\n      }\n      placement=\"top\"\n    >\n      <Flex align=\"center\" gap={3}>\n        <DocumentStatusIndicator draft={editState?.draft} published={editState?.published} />\n        <DocumentStatus\n          draft={editState?.draft}\n          published={editState?.published}\n          singleLine={singleLine}\n        />\n      </Flex>\n    </Tooltip>\n  )\n}\n", "import {useLayoutEffect} from 'react'\nimport {resizeObserver} from 'sanity'\n\nexport function useResizeObserver({\n  element,\n  onResize,\n}: {\n  element?: HTMLDivElement | null\n  onResize: (event: ResizeObserverEntry) => void\n}): void {\n  useLayoutEffect(() => {\n    if (element) {\n      resizeObserver.observe(element, onResize)\n    }\n\n    return () => {\n      if (element) {\n        resizeObserver.unobserve(element)\n      }\n    }\n  }, [element, onResize])\n}\n", "import {Flex} from '@sanity/ui'\nimport {type Ref, useCallback, useState} from 'react'\nimport {useTimelineSelector} from 'sanity'\n\nimport {SpacerButton} from '../../../components/spacerButton'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentBadges} from './DocumentBadges'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentStatusLine} from './DocumentStatusLine'\nimport {useResizeObserver} from './useResizeObserver'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: Ref<HTMLDivElement>\n}\n\nconst CONTAINER_BREAKPOINT = 480 // px\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef} = props\n  const {editState, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const showingRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n\n  const [collapsed, setCollapsed] = useState<boolean | null>(null)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n\n  const handleResize = useCallback((event: ResizeObserverEntry) => {\n    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT)\n  }, [])\n\n  useResizeObserver({element: rootElement, onResize: handleResize})\n\n  const shouldRender = editState?.ready && typeof collapsed === 'boolean'\n\n  return (\n    <Flex direction=\"column\" ref={setRootElement} sizing=\"border\">\n      {shouldRender && (\n        <Flex\n          align=\"stretch\"\n          gap={1}\n          justify=\"space-between\"\n          paddingY={2}\n          paddingLeft={4}\n          paddingRight={3}\n        >\n          <Flex align=\"center\" flex={1} gap={collapsed ? 2 : 3} wrap=\"wrap\" paddingRight={3}>\n            <Flex align=\"center\">\n              <DocumentStatusLine singleLine={!collapsed} />\n              <SpacerButton size=\"large\" />\n            </Flex>\n            <DocumentBadges />\n          </Flex>\n\n          <Flex\n            align=\"flex-start\"\n            justify=\"flex-end\"\n            ref={actionsBoxRef}\n            style={{flexShrink: 0, marginLeft: 'auto'}}\n          >\n            <SpacerButton size=\"large\" />\n            {showingRevision ? <HistoryStatusBarActions /> : <DocumentStatusBarActions />}\n          </Flex>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n", "import {isHotkey} from 'is-hotkey-esm'\nimport {\n  createElement,\n  type ElementType,\n  type HTMLProps,\n  memo,\n  type Ref,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, type DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nimport {RenderActionCollectionState} from '../../../components'\nimport {ActionStateDialog} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nfunction KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return createElement(\n    as,\n    {\n      id,\n      onKeyDown: handleKeyDown,\n      tabIndex: -1,\n      ...rest,\n      ref: rootRef,\n    },\n    [\n      children,\n      activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      ),\n    ],\n  )\n}\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = memo(\n  (props: DocumentActionShortcutsProps & Omit<HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {({states}) => (\n          <KeyboardShortcutResponder\n            {...rest}\n            activeIndex={activeIndex}\n            actionsBoxElement={actionsBoxElement}\n            as={as}\n            onActionStart={onActionStart}\n            states={states}\n          >\n            {children}\n          </KeyboardShortcutResponder>\n        )}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'DocumentActionShortcuts'\n", "import {EarthAmericasIcon, JsonIcon} from '@sanity/icons'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, type TFunction} from 'sanity'\n\nimport {type PaneMenuItem, type StructureToolFeatures} from '../../types'\nimport {INSPECT_ACTION_PREFIX} from './constants'\n\ninterface GetMenuItemsParams {\n  currentInspector?: DocumentInspector\n  features: StructureToolFeatures\n  hasValue: boolean\n  inspectors: DocumentInspector[]\n  previewUrl?: string | null\n  inspectorMenuItems: DocumentInspectorMenuItem[]\n  t: TFunction\n}\n\nfunction getInspectorItems({\n  currentInspector,\n  hasValue,\n  inspectors,\n  inspectorMenuItems,\n}: GetMenuItemsParams): PaneMenuItem[] {\n  return inspectors\n    .map((inspector, index) => {\n      const menuItem = inspectorMenuItems[index]\n\n      if (!menuItem || menuItem.hidden) return null\n\n      return {\n        action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,\n        group: menuItem.showAsAction ? undefined : 'inspectors',\n        icon: menuItem.icon,\n        isDisabled: !hasValue,\n        selected: currentInspector?.name === inspector.name,\n        shortcut: menuItem.hotkeys?.join('+'),\n        showAsAction: menuItem.showAsAction,\n        title: menuItem.title,\n        tone: menuItem.tone,\n      }\n    })\n    .filter(Boolean) as PaneMenuItem[]\n}\n\nfunction getInspectItem({hasValue, t}: GetMenuItemsParams): PaneMenuItem {\n  return {\n    action: 'inspect',\n    group: 'inspectors',\n    title: t('document-inspector.menu-item.title'),\n    icon: JsonIcon,\n    isDisabled: !hasValue,\n    shortcut: 'Ctrl+Alt+I',\n  }\n}\n\nexport function getProductionPreviewItem({previewUrl, t}: GetMenuItemsParams): PaneMenuItem | null {\n  if (!previewUrl) return null\n\n  return {\n    action: 'production-preview',\n    group: 'links',\n    title: t('production-preview.menu-item.title'),\n    icon: EarthAmericasIcon,\n    shortcut: 'Ctrl+Alt+O',\n  }\n}\n\nexport function getMenuItems(params: GetMenuItemsParams): PaneMenuItem[] {\n  const inspectorItems = getInspectorItems(params)\n  const items = [\n    // Get production preview item\n    getProductionPreviewItem(params),\n  ].filter(Boolean) as PaneMenuItem[]\n\n  return [\n    ...inspectorItems,\n\n    // TODO: convert to inspector or document view?\n    getInspectItem(params),\n\n    ...items,\n  ]\n}\n", "import {type SanityDocument} from '@sanity/types'\nimport {useEffect, useState} from 'react'\nimport {useAsObservable} from 'react-rx'\nimport {from, of} from 'rxjs'\nimport {catchError, debounceTime, switchMap} from 'rxjs/operators'\nimport {isRecord, useSource} from 'sanity'\n\nconst isSanityDocument = (value: unknown): value is SanityDocument =>\n  isRecord(value) && typeof value._id === 'string' && typeof value._type === 'string'\n\nexport function usePreviewUrl(value: Partial<SanityDocument> | undefined): string | undefined {\n  const [previewUrl, setPreviewUrl] = useState<string | undefined>(undefined)\n  const [error, setError] = useState<unknown>(null)\n  const {resolveProductionUrl} = useSource().document\n  // @todo refactor out of useAsObservable, and instead use `of() + useMemoObservable` like we did for `useLoadableFromCreateLoadable`\n  const value$ = useAsObservable(value)\n\n  if (error) throw error\n\n  useEffect(() => {\n    value$\n      .pipe(\n        // this so that the preview URL isn't fetched on every keystroke\n        debounceTime(500),\n        switchMap((document) =>\n          isSanityDocument(document) ? from(resolveProductionUrl({document})) : of(undefined),\n        ),\n        catchError((e) => {\n          const message = isRecord(e) && typeof e.message === 'string' ? e.message : 'Unknown error'\n          throw new Error(`An error was thrown while trying to get your preview url: ${message}`)\n        }),\n      )\n      .subscribe({\n        next: setPreviewUrl,\n        error: setError,\n      })\n  }, [resolveProductionUrl, value$])\n\n  return previewUrl\n}\n", "import {Card, Code, Stack, Text} from '@sanity/ui'\nimport {isDev, Translate, useTranslation} from 'sanity'\n\nimport {ErrorPane} from '../../error'\n\ninterface DocumentLayoutErrorProps {\n  currentMinWidth?: number\n  documentType?: string\n  minWidth?: number\n  paneKey: string\n  value?: Record<string, unknown>\n}\n\nexport function DocumentLayoutError(props: DocumentLayoutErrorProps) {\n  const {documentType, value, currentMinWidth, paneKey, minWidth} = props\n  const {t} = useTranslation()\n\n  return (\n    <ErrorPane\n      currentMinWidth={currentMinWidth}\n      flex={2.5}\n      minWidth={minWidth}\n      paneKey={paneKey}\n      title={\n        <Translate\n          t={t}\n          i18nKey=\"panes.document-pane.document-unknown-type.title\"\n          values={{documentType}}\n        />\n      }\n      tone=\"caution\"\n    >\n      <Stack space={4}>\n        {documentType && (\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-unknown-type.text\"\n              values={{documentType}}\n            />\n          </Text>\n        )}\n\n        {!documentType && (\n          <Text as=\"p\">{t('panes.document-pane.document-unknown-type.without-schema.text')}</Text>\n        )}\n\n        {isDev && value && (\n          /* eslint-disable i18next/no-literal-string */\n          <>\n            <Text as=\"p\">Here is the JSON representation of the document:</Text>\n\n            <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n              <Code language=\"json\" size={[1, 1, 2]}>\n                {JSON.stringify(value, null, 2)}\n              </Code>\n            </Card>\n          </>\n          /* eslint-enable i18next/no-literal-string */\n        )}\n      </Stack>\n    </ErrorPane>\n  )\n}\n", "import {\n  DialogProvider,\n  type DialogProviderProps,\n  Flex,\n  PortalProvider,\n  useElementRect,\n} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {useCallback, useMemo, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChangeConnectorRoot,\n  type DocumentFieldActionNode,\n  type DocumentInspectorMenuItem,\n  FieldActionsProvider,\n  FieldActionsResolver,\n  useZIndex,\n} from 'sanity'\nimport {type Path} from 'sanity-diff-patch'\nimport {styled} from 'styled-components'\n\nimport {TooltipDelayGroupProvider} from '../../../../ui-components'\nimport {Pane, PaneFooter, usePaneLayout} from '../../../components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from '../constants'\nimport {DocumentInspectorMenuItemsResolver} from '../DocumentInspectorMenuItemsResolver'\nimport {DocumentOperationResults} from '../DocumentOperationResults'\nimport {DocumentPanel} from '../documentPanel'\nimport {DocumentPanelHeader} from '../documentPanel/header'\nimport {DocumentActionShortcuts} from '../keyboardShortcuts'\nimport {getMenuItems} from '../menuItems'\nimport {DocumentStatusBar} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {usePreviewUrl} from '../usePreviewUrl'\nimport {DocumentLayoutError} from './DocumentLayoutError'\n\nconst EMPTY_ARRAY: [] = []\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport function DocumentLayout() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    fieldActions,\n    inspectOpen,\n    inspector,\n    inspectors,\n    onFocus,\n    onHistoryOpen,\n    onMenuAction,\n    onPathOpen,\n    paneKey,\n    schemaType,\n    value,\n  } = useDocumentPane()\n\n  const {features} = useStructureTool()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const zOffsets = useZIndex()\n  const previewUrl = usePreviewUrl(value)\n\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n\n  const [inspectorMenuItems, setInspectorMenuItems] = useState<DocumentInspectorMenuItem[]>([])\n  const [rootFieldActionNodes, setRootFieldActionNodes] = useState<DocumentFieldActionNode[]>([])\n\n  const footerRect = useElementRect(footerElement)\n  const headerRect = useElementRect(headerElement)\n  const footerHeight = footerRect?.height\n  const headerHeight = headerRect?.height\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspector?.name),\n    [inspectors, inspector?.name],\n  )\n\n  const hasValue = Boolean(value)\n\n  const menuItems = useMemo(\n    () =>\n      getMenuItems({\n        currentInspector,\n        features,\n        hasValue,\n        inspectorMenuItems,\n        inspectors,\n        previewUrl,\n        t,\n      }),\n    [currentInspector, features, hasValue, inspectorMenuItems, inspectors, previewUrl, t],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      for (const item of menuItems) {\n        if (item.shortcut) {\n          if (isHotkey(item.shortcut, event)) {\n            event.preventDefault()\n            event.stopPropagation()\n            onMenuAction(item)\n            return\n          }\n        }\n      }\n    },\n    [onMenuAction, menuItems],\n  )\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  if (!schemaType) {\n    return (\n      <DocumentLayoutError\n        currentMinWidth={currentMinWidth}\n        documentType={documentType}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        value={value}\n      />\n    )\n  }\n\n  return (\n    <>\n      {inspectors.length > 0 && (\n        <DocumentInspectorMenuItemsResolver\n          documentId={documentId}\n          documentType={documentType}\n          inspectors={inspectors}\n          onMenuItems={setInspectorMenuItems}\n        />\n      )}\n\n      {fieldActions.length > 0 && schemaType && (\n        <FieldActionsResolver\n          actions={fieldActions}\n          documentId={documentId}\n          documentType={documentType}\n          onActions={setRootFieldActionNodes}\n          path={EMPTY_ARRAY}\n          schemaType={schemaType}\n        />\n      )}\n\n      <FieldActionsProvider actions={rootFieldActionNodes} path={EMPTY_ARRAY}>\n        <DocumentActionShortcuts\n          actionsBoxElement={actionsBoxElement}\n          as={Pane}\n          currentMinWidth={currentMinWidth}\n          data-testid=\"document-pane\"\n          flex={2.5}\n          id={paneKey}\n          minWidth={minWidth}\n          onKeyUp={handleKeyUp}\n          rootRef={setRootElement}\n        >\n          <DocumentPanelHeader ref={setHeaderElement} menuItems={menuItems} />\n\n          <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.paneDialog}>\n            <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n              <StyledChangeConnectorRoot\n                data-testid=\"change-connector-root\"\n                isReviewChangesOpen={changesOpen}\n                onOpenReviewChanges={onHistoryOpen}\n                onSetFocus={onConnectorSetFocus}\n              >\n                <DocumentPanel\n                  footerHeight={footerHeight || null}\n                  headerHeight={headerHeight || null}\n                  isInspectOpen={inspectOpen}\n                  rootElement={rootElement}\n                  setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n                />\n              </StyledChangeConnectorRoot>\n            </Flex>\n          </DialogProvider>\n\n          {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n          {/* The portal element comes from `DocumentPanel`. */}\n          <PortalProvider\n            __unstable_elements={{[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}}\n          >\n            <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n              <PaneFooter ref={setFooterElement}>\n                <TooltipDelayGroupProvider>\n                  <DocumentStatusBar actionsBoxRef={setActionsBoxElement} />\n                </TooltipDelayGroupProvider>\n              </PaneFooter>\n            </DialogProvider>\n          </PortalProvider>\n          <DocumentOperationResults />\n        </DocumentActionShortcuts>\n      </FieldActionsProvider>\n    </>\n  )\n}\n", "import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, type PluginOptions, useMiddlewareComponents} from 'sanity'\n\nimport {DocumentLayout} from './DocumentLayout'\n\nfunction pick(plugin: PluginOptions) {\n  return plugin.document?.components?.unstable_layout as ComponentType<\n    Omit<DocumentLayoutProps, 'renderDefault'>\n  >\n}\n\n/**\n * A hook that returns the document layout composed\n * by the Components API (`document.components.layout`).\n */\nexport function useDocumentLayoutComponent(): ComponentType<\n  Omit<DocumentLayoutProps, 'renderDefault'>\n> {\n  return useMiddlewareComponents({\n    pick,\n    defaultComponent: DocumentLayout,\n  })\n}\n", "import {type Template} from 'sanity'\n\ninterface InitialValueOptions {\n  documentType: string\n  panePayload?: unknown\n  templateName?: string\n  templateParams?: Record<string, unknown>\n  urlTemplate?: string\n}\n\n/**\n * @internal\n */\nexport function getInitialValueTemplateOpts(\n  templates: Template[],\n  opts: InitialValueOptions,\n): {templateName: string; templateParams: Record<string, unknown>} {\n  const payload = opts.panePayload || {}\n  const structureNodeTemplate = opts.templateName\n\n  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Conflicting templates: URL says \"${opts.urlTemplate}\", structure node says \"${structureNodeTemplate}\". Using \"${structureNodeTemplate}\".`,\n    )\n  }\n\n  const template = structureNodeTemplate || opts.urlTemplate\n  const typeTemplates = templates.filter((t) => t.schemaType === opts.documentType)\n\n  const templateParams = {\n    ...opts.templateParams,\n    ...(typeof payload === 'object' ? payload || {} : {}),\n  }\n\n  let templateName = template\n\n  // If we have not specified a specific template, and we only have a single\n  // template available for a schema type, use it\n  if (!template && typeTemplates.length === 1) {\n    templateName = typeTemplates[0].id\n  }\n\n  return {templateName: templateName!, templateParams}\n}\n", "/* eslint-disable camelcase */\nimport {isActionEnabled} from '@sanity/schema/_internal'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SanityDocumentLike,\n} from '@sanity/types'\nimport {useToast} from '@sanity/ui'\nimport {fromString as pathFromString, resolveKeyedPath} from '@sanity/util/paths'\nimport {omit, throttle} from 'lodash'\nimport {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport deepEquals from 'react-fast-compare'\nimport {\n  type DocumentFieldAction,\n  type DocumentInspector,\n  type DocumentPresence,\n  EMPTY_ARRAY,\n  getDraftId,\n  getExpandOperations,\n  getPublishedId,\n  type OnPathFocusPayload,\n  type PatchEvent,\n  setAtPath,\n  type StateTree,\n  toMutationPatches,\n  useConnectionState,\n  useDocumentOperation,\n  useDocumentValuePermissions,\n  useEditState,\n  useFormState,\n  useInitialValue,\n  usePresenceStore,\n  useSchema,\n  useSource,\n  useTemplates,\n  useTimelineSelector,\n  useTimelineStore,\n  useTranslation,\n  useUnique,\n  useValidationStatus,\n} from 'sanity'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {\n  DEFAULT_MENU_ITEM_GROUPS,\n  EMPTY_PARAMS,\n  HISTORY_INSPECTOR_NAME,\n  INSPECT_ACTION_PREFIX,\n} from './constants'\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\nimport {getInitialValueTemplateOpts} from './getInitialValueTemplateOpts'\nimport {type DocumentPaneProviderProps} from './types'\nimport {usePreviewUrl} from './usePreviewUrl'\n\n/**\n * @internal\n */\n// eslint-disable-next-line complexity, max-statements\nexport const DocumentPaneProvider = memo((props: DocumentPaneProviderProps) => {\n  const {children, index, pane, paneKey, onFocusPath} = props\n  const schema = useSchema()\n  const templates = useTemplates()\n  const {\n    __internal_tasks,\n    document: {\n      actions: documentActions,\n      badges: documentBadges,\n      unstable_fieldActions: fieldActionsResolver,\n      unstable_languageFilter: languageFilterResolver,\n      inspectors: inspectorsResolver,\n    },\n  } = useSource()\n  const presenceStore = usePresenceStore()\n  const paneRouter = usePaneRouter()\n  const setPaneParams = paneRouter.setParams\n  const {features} = useStructureTool()\n  const {push: pushToast} = useToast()\n  const {\n    options,\n    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,\n    title = null,\n    views: viewsProp = [],\n  } = pane\n  const paneOptions = useUnique(options)\n  const documentIdRaw = paneOptions.id\n  const documentId = getPublishedId(documentIdRaw)\n  const documentType = options.type\n  const params = useUnique(paneRouter.params) || EMPTY_PARAMS\n  const panePayload = useUnique(paneRouter.payload)\n  const {templateName, templateParams} = useMemo(\n    () =>\n      getInitialValueTemplateOpts(templates, {\n        documentType,\n        templateName: paneOptions.template,\n        templateParams: paneOptions.templateParameters,\n        panePayload,\n        urlTemplate: params.template,\n      }),\n    [documentType, paneOptions, params, panePayload, templates],\n  )\n  const initialValueRaw = useInitialValue({\n    documentId,\n    documentType,\n    templateName,\n    templateParams,\n  })\n  const initialValue = useUnique(initialValueRaw)\n  const {patch} = useDocumentOperation(documentId, documentType)\n  const editState = useEditState(documentId, documentType)\n  const {validation: validationRaw} = useValidationStatus(documentId, documentType)\n  const connectionState = useConnectionState(documentId, documentType)\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n  const value: SanityDocumentLike = editState?.draft || editState?.published || initialValue.value\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  // Resolve document actions\n  const actions = useMemo(\n    () => documentActions({schemaType: documentType, documentId}),\n    [documentActions, documentId, documentType],\n  )\n\n  // Resolve document badges\n  const badges = useMemo(\n    () => documentBadges({schemaType: documentType, documentId}),\n    [documentBadges, documentId, documentType],\n  )\n\n  // Resolve document language filter\n  const languageFilter = useMemo(\n    () => languageFilterResolver({schemaType: documentType, documentId}),\n    [documentId, documentType, languageFilterResolver],\n  )\n\n  const validation = useUnique(validationRaw)\n  const views = useUnique(viewsProp)\n\n  const [focusPath, setFocusPath] = useState<Path>(() =>\n    params.path ? pathFromString(params.path) : EMPTY_ARRAY,\n  )\n  const focusPathRef = useRef<Path>([])\n  const activeViewId = params.view || (views[0] && views[0].id) || null\n  const [timelineMode, setTimelineMode] = useState<'since' | 'rev' | 'closed'>('closed')\n\n  const [timelineError, setTimelineError] = useState<Error | null>(null)\n\n  /**\n   * The `preferLatestPublished` parameter can be used to \"force\" viewing the revision\n   * of the last published document. This is not a permanent function, and will likely\n   * be removed when we move to a more robust way of viewing \"releases\".\n   */\n  useEffect(() => {\n    if (params.prefersLatestPublished && editState.published) {\n      setPaneParams({\n        //ensure we only run on first load\n        ...omit(params, 'prefersLatestPublished'),\n        rev: `${editState.published._updatedAt}/${editState.published._rev}`,\n      })\n    }\n  }, [editState, setPaneParams, params])\n\n  /**\n   * Create an intermediate store which handles document Timeline + TimelineController\n   * creation, and also fetches pre-requsite document snapshots. Compatible with `useSyncExternalStore`\n   * and made available to child components via DocumentPaneContext.\n   */\n  const timelineStore = useTimelineStore({\n    documentId,\n    documentType,\n    onError: setTimelineError,\n    rev: params.rev,\n    since: params.since,\n  })\n\n  // Subscribe to external timeline state changes\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const sinceAttributes = useTimelineSelector(timelineStore, (state) => state.sinceAttributes)\n  const timelineDisplayed = useTimelineSelector(timelineStore, (state) => state.timelineDisplayed)\n  const timelineReady = useTimelineSelector(timelineStore, (state) => state.timelineReady)\n  const isPristine = useTimelineSelector(timelineStore, (state) => state.isPristine)\n\n  /**\n   * Determine if the current document is deleted.\n   *\n   * When the timeline is available – we check for the absence of an editable document pair\n   * (both draft + published versions) as well as a non 'pristine' timeline (i.e. a timeline that consists\n   * of at least one chunk).\n   *\n   * In the _very rare_ case where the timeline cannot be loaded – we skip this check and always assume\n   * the document is NOT deleted. Since we can't accurately determine document deleted status without history,\n   * skipping this check means that in these cases, users will at least be able to create new documents\n   * without them being incorrectly marked as deleted.\n   */\n  const isDeleted = useMemo(() => {\n    if (!timelineReady) {\n      return false\n    }\n    return Boolean(!editState?.draft && !editState?.published) && !isPristine\n  }, [editState?.draft, editState?.published, isPristine, timelineReady])\n\n  // TODO: this may cause a lot of churn. May be a good idea to prevent these\n  // requests unless the menu is open somehow\n  const previewUrl = usePreviewUrl(value)\n\n  const [presence, setPresence] = useState<DocumentPresence[]>([])\n  useEffect(() => {\n    const subscription = presenceStore.documentPresence(documentId).subscribe((nextPresence) => {\n      setPresence(nextPresence)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [documentId, presenceStore])\n\n  const inspectors: DocumentInspector[] = useMemo(\n    () => inspectorsResolver({documentId, documentType}),\n    [documentId, documentType, inspectorsResolver],\n  )\n\n  const [inspectorName, setInspectorName] = useState<string | null>(() => params.inspect || null)\n\n  // Handle inspector name changes from URL\n  const inspectParamRef = useRef<string | undefined>(params.inspect)\n  useEffect(() => {\n    if (inspectParamRef.current !== params.inspect) {\n      inspectParamRef.current = params.inspect\n      setInspectorName(params.inspect || null)\n    }\n  }, [params.inspect])\n\n  const currentInspector = inspectors?.find((i) => i.name === inspectorName)\n  const resolvedChangesInspector = inspectors.find((i) => i.name === HISTORY_INSPECTOR_NAME)\n\n  const changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const inspectOpen = params.inspect === 'on'\n  const compareValue: Partial<SanityDocument> | null = changesOpen\n    ? sinceAttributes\n    : editState?.published || null\n\n  const fieldActions: DocumentFieldAction[] = useMemo(\n    () => (schemaType ? fieldActionsResolver({documentId, documentType, schemaType}) : []),\n    [documentId, documentType, fieldActionsResolver, schemaType],\n  )\n\n  /**\n   * Note that in addition to connection and edit state, we also wait for a valid document timeline\n   * range to be loaded. This means if we're loading an older revision, the full transaction range must\n   * be loaded in full prior to the document being displayed.\n   *\n   * Previously, visiting studio URLs with timeline params would display the 'current' document and then\n   * 'snap' in the older revision, which was disorienting and could happen mid-edit.\n   *\n   * In the event that the timeline cannot be loaded due to TimelineController errors or blocked requests,\n   * we skip this readiness check to ensure that users aren't locked out of editing. Trying to select\n   * a timeline revision in this instance will display an error localized to the popover itself.\n   */\n  const ready =\n    connectionState === 'connected' && editState.ready && (timelineReady || !!timelineError)\n\n  const displayed: Partial<SanityDocument> | undefined = useMemo(\n    () => (onOlderRevision ? timelineDisplayed || {_id: value._id, _type: value._type} : value),\n    [onOlderRevision, timelineDisplayed, value],\n  )\n\n  const setTimelineRange = useCallback(\n    (newSince: string, newRev: string | null) => {\n      setPaneParams({\n        ...params,\n        since: newSince,\n        rev: newRev || undefined,\n      })\n    },\n    [params, setPaneParams],\n  )\n\n  const handleBlur = useCallback(\n    (blurredPath: Path) => {\n      if (disableBlurRef.current) {\n        return\n      }\n\n      setFocusPath(EMPTY_ARRAY)\n\n      if (focusPathRef.current !== EMPTY_ARRAY) {\n        focusPathRef.current = EMPTY_ARRAY\n        onFocusPath?.(EMPTY_ARRAY)\n      }\n\n      // note: we're deliberately not syncing presence here since it would make the user avatar disappear when a\n      // user clicks outside a field without focusing another one\n    },\n    [onFocusPath, setFocusPath],\n  )\n\n  const patchRef = useRef<(event: PatchEvent) => void>(() => {\n    throw new Error('Nope')\n  })\n\n  patchRef.current = (event: PatchEvent) => {\n    patch.execute(toMutationPatches(event.patches), initialValue.value)\n  }\n\n  const handleChange = useCallback((event: PatchEvent) => patchRef.current(event), [])\n\n  const closeInspector = useCallback(\n    (closeInspectorName?: string) => {\n      // inspector?: DocumentInspector\n      const inspector = closeInspectorName && inspectors.find((i) => i.name === closeInspectorName)\n\n      if (closeInspectorName && !inspector) {\n        console.warn(`No inspector named \"${closeInspectorName}\"`)\n        return\n      }\n\n      if (!currentInspector) {\n        return\n      }\n\n      if (inspector) {\n        const result = inspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n\n        return\n      }\n\n      if (currentInspector) {\n        const result = currentInspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n      }\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const openInspector = useCallback(\n    (nextInspectorName: string, paneParams?: Record<string, string>) => {\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (!nextInspector) {\n        console.warn(`No inspector named \"${nextInspectorName}\"`)\n        return\n      }\n\n      // if the inspector is already open, only update params\n      if (currentInspector?.name === nextInspector.name) {\n        setPaneParams({...params, ...paneParams, inspect: nextInspector.name})\n        return\n      }\n\n      let currentParams = params\n\n      if (currentInspector) {\n        const closeResult = nextInspector.onClose?.({params: currentParams}) ?? {\n          params: currentParams,\n        }\n\n        currentParams = closeResult.params\n      }\n\n      const result = nextInspector.onOpen?.({params: currentParams}) ?? {params: currentParams}\n\n      setInspectorName(nextInspector.name)\n      inspectParamRef.current = nextInspector.name\n\n      setPaneParams({...result.params, ...paneParams, inspect: nextInspector.name})\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const handleHistoryClose = useCallback(() => {\n    if (resolvedChangesInspector) {\n      closeInspector(resolvedChangesInspector.name)\n    }\n  }, [closeInspector, resolvedChangesInspector])\n\n  const handleHistoryOpen = useCallback(() => {\n    if (!features.reviewChanges) {\n      return\n    }\n\n    if (resolvedChangesInspector) {\n      openInspector(resolvedChangesInspector.name)\n    }\n  }, [features.reviewChanges, openInspector, resolvedChangesInspector])\n\n  const handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter])\n\n  const handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter])\n\n  const toggleLegacyInspect = useCallback(\n    (toggle = !inspectOpen) => {\n      if (toggle) {\n        setPaneParams({...params, inspect: 'on'})\n      } else {\n        setPaneParams(omit(params, 'inspect'))\n      }\n    },\n    [inspectOpen, params, setPaneParams],\n  )\n\n  const handleMenuAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'production-preview' && previewUrl) {\n        window.open(previewUrl)\n        return true\n      }\n\n      if (item.action === 'inspect') {\n        toggleLegacyInspect(true)\n        return true\n      }\n\n      if (item.action === 'reviewChanges') {\n        handleHistoryOpen()\n        return true\n      }\n\n      if (typeof item.action === 'string' && item.action.startsWith(INSPECT_ACTION_PREFIX)) {\n        const nextInspectorName = item.action.slice(INSPECT_ACTION_PREFIX.length)\n        const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n        if (nextInspector) {\n          if (nextInspector.name === inspectorName) {\n            closeInspector(nextInspector.name)\n          } else {\n            openInspector(nextInspector.name)\n          }\n          return true\n        }\n      }\n\n      return false\n    },\n    [\n      closeInspector,\n      handleHistoryOpen,\n      inspectorName,\n      inspectors,\n      openInspector,\n      previewUrl,\n      toggleLegacyInspect,\n    ],\n  )\n\n  const handleLegacyInspectClose = useCallback(\n    () => toggleLegacyInspect(false),\n    [toggleLegacyInspect],\n  )\n\n  const [openPath, onSetOpenPath] = useState<Path>([])\n  const [fieldGroupState, onSetFieldGroupState] = useState<StateTree<string>>()\n  const [collapsedPaths, onSetCollapsedPath] = useState<StateTree<boolean>>()\n  const [collapsedFieldSets, onSetCollapsedFieldSets] = useState<StateTree<boolean>>()\n\n  const handleOnSetCollapsedPath = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedPath((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleOnSetCollapsedFieldSet = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedFieldSets((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleSetActiveFieldGroup = useCallback(\n    (path: Path, groupName: string) =>\n      onSetFieldGroupState((prevState) => setAtPath(prevState, path, groupName)),\n    [],\n  )\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n  const liveEdit = Boolean(schemaType?.liveEdit)\n  const docId = value._id ? value._id : 'dummy-id'\n  const docPermissionsInput = useMemo(() => {\n    return {\n      ...value,\n      _id: liveEdit ? getPublishedId(docId) : getDraftId(docId),\n    }\n  }, [liveEdit, value, docId])\n\n  const [permissions, isPermissionsLoading] = useDocumentValuePermissions({\n    document: docPermissionsInput,\n    permission: requiredPermission,\n  })\n\n  const isNonExistent = !value?._id\n\n  const readOnly = useMemo(() => {\n    const hasNoPermission = !isPermissionsLoading && !permissions?.granted\n    const updateActionDisabled = !isActionEnabled(schemaType!, 'update')\n    const createActionDisabled = isNonExistent && !isActionEnabled(schemaType!, 'create')\n    const reconnecting = connectionState === 'reconnecting'\n    const isLocked = editState.transactionSyncLock?.enabled\n\n    return (\n      !ready ||\n      revTime !== null ||\n      hasNoPermission ||\n      updateActionDisabled ||\n      createActionDisabled ||\n      reconnecting ||\n      isLocked ||\n      isDeleting ||\n      isDeleted\n    )\n  }, [\n    connectionState,\n    editState.transactionSyncLock,\n    isNonExistent,\n    isDeleted,\n    isDeleting,\n    isPermissionsLoading,\n    permissions?.granted,\n    ready,\n    revTime,\n    schemaType,\n  ])\n\n  const formState = useFormState(schemaType!, {\n    value: displayed,\n    readOnly,\n    comparisonValue: compareValue,\n    focusPath,\n    openPath,\n    collapsedPaths,\n    presence,\n    validation,\n    collapsedFieldSets,\n    fieldGroupState,\n    changesOpen,\n  })\n\n  const formStateRef = useRef(formState)\n  formStateRef.current = formState\n\n  const setOpenPath = useCallback(\n    (path: Path) => {\n      const ops = getExpandOperations(formStateRef.current!, path)\n      ops.forEach((op) => {\n        if (op.type === 'expandPath') {\n          onSetCollapsedPath((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'expandFieldSet') {\n          onSetCollapsedFieldSets((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'setSelectedGroup') {\n          onSetFieldGroupState((prevState) => setAtPath(prevState, op.path, op.groupName))\n        }\n      })\n      onSetOpenPath(path)\n    },\n    [formStateRef],\n  )\n\n  const updatePresence = useCallback(\n    (nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      presenceStore.setLocation([\n        {\n          type: 'document',\n          documentId,\n          path: nextFocusPath,\n          lastActiveAt: new Date().toISOString(),\n          selection: payload?.selection,\n        },\n      ])\n    },\n    [documentId, presenceStore],\n  )\n\n  const updatePresenceThrottled = useMemo(\n    () => throttle(updatePresence, 1000, {leading: true, trailing: true}),\n    [updatePresence],\n  )\n\n  const handleFocus = useCallback(\n    (nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      setFocusPath(nextFocusPath)\n      if (!deepEquals(focusPathRef.current, nextFocusPath)) {\n        setOpenPath(nextFocusPath.slice(0, -1))\n        focusPathRef.current = nextFocusPath\n        onFocusPath?.(nextFocusPath)\n      }\n      updatePresenceThrottled(nextFocusPath, payload)\n    },\n    [onFocusPath, setOpenPath, updatePresenceThrottled],\n  )\n\n  const documentPane: DocumentPaneContextValue = useMemo(\n    () => ({\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      inspector: currentInspector || null,\n      inspectors,\n      __internal_tasks,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      onFocus: handleFocus,\n      onPathOpen: setOpenPath,\n      onHistoryClose: handleHistoryClose,\n      onHistoryOpen: handleHistoryOpen,\n      onInspectClose: handleLegacyInspectClose,\n      onMenuAction: handleMenuAction,\n      onPaneClose: handlePaneClose,\n      onPaneSplit: handlePaneSplit,\n      onSetActiveFieldGroup: handleSetActiveFieldGroup,\n      onSetCollapsedPath: handleOnSetCollapsedPath,\n      onSetCollapsedFieldSet: handleOnSetCollapsedFieldSet,\n      openInspector,\n      index,\n      inspectOpen,\n      validation,\n      menuItemGroups: menuItemGroups || [],\n      paneKey,\n      previewUrl,\n      ready,\n      schemaType: schemaType!,\n      isPermissionsLoading,\n      permissions,\n      setTimelineMode,\n      setTimelineRange,\n      setIsDeleting,\n      isDeleting,\n      isDeleted,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      value,\n      views,\n      formState,\n      unstable_languageFilter: languageFilter,\n    }),\n    [\n      __internal_tasks,\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      currentInspector,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      formState,\n      handleBlur,\n      handleChange,\n      handleFocus,\n      handleHistoryClose,\n      handleHistoryOpen,\n      handleLegacyInspectClose,\n      handleMenuAction,\n      handleOnSetCollapsedFieldSet,\n      handleOnSetCollapsedPath,\n      handlePaneClose,\n      handlePaneSplit,\n      handleSetActiveFieldGroup,\n      index,\n      inspectOpen,\n      inspectors,\n      isDeleted,\n      isDeleting,\n      isPermissionsLoading,\n      languageFilter,\n      menuItemGroups,\n      openInspector,\n      paneKey,\n      permissions,\n      previewUrl,\n      ready,\n      schemaType,\n      setOpenPath,\n      setTimelineRange,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      validation,\n      value,\n      views,\n    ],\n  )\n\n  useEffect(() => {\n    if (connectionState === 'reconnecting') {\n      pushToast({\n        id: 'sanity/structure/reconnecting',\n        status: 'warning',\n        title: t('panes.document-pane-provider.reconnecting.title'),\n      })\n    }\n  }, [connectionState, pushToast, t])\n\n  const disableBlurRef = useRef(false)\n\n  // Reset `focusPath` when `documentId` or `params.path` changes\n  useEffect(() => {\n    if (ready && params.path) {\n      const {path, ...restParams} = params\n      const pathFromUrl = resolveKeyedPath(formStateRef.current?.value, pathFromString(path))\n\n      disableBlurRef.current = true\n\n      // Reset focus path when url params path changes\n      if (!deepEquals(focusPathRef.current, pathFromUrl)) {\n        setFocusPath(pathFromUrl)\n        setOpenPath(pathFromUrl)\n        focusPathRef.current = pathFromUrl\n        onFocusPath?.(pathFromUrl)\n      }\n\n      const timeout = setTimeout(() => {\n        disableBlurRef.current = false\n      }, 0)\n\n      // remove the `path`-param from url after we have consumed it as the initial focus path\n      paneRouter.setParams(restParams)\n\n      return () => clearTimeout(timeout)\n    }\n\n    return undefined\n  }, [params, documentId, onFocusPath, setOpenPath, ready, paneRouter])\n\n  return (\n    <DocumentPaneContext.Provider value={documentPane}>{children}</DocumentPaneContext.Provider>\n  )\n})\n\nDocumentPaneProvider.displayName = 'DocumentPaneProvider'\n", "import {type Path} from '@sanity/types'\nimport {Stack, Text} from '@sanity/ui'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {memo, useMemo} from 'react'\nimport {\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  Translate,\n  useDocumentType,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type DocumentPaneNode} from '../../types'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {CommentsWrapper} from './comments'\nimport {useDocumentLayoutComponent} from './document-layout'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\n/**\n * @internal\n */\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <DocumentPaneInner {...props} />\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n\n  const DocumentLayout = useDocumentLayoutComponent()\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n                ? 'selected'\n                : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (options.type === '*' && !isLoaded) {\n    return (\n      <LoadingPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.loading')}\n      />\n    )\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.title')}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-not-found.text\"\n              values={{id: options.id}}\n            />\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProvider\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <CommentsWrapper documentId={options.id} documentType={options.type}>\n          <DocumentLayout documentId={options.id} documentType={options.type} />\n        </CommentsWrapper>\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProvider>\n  )\n}\n\nfunction usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n", "import {type SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n", "import {SyncIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Container, Flex, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  LoadingBlock,\n  SanityDefaultPreview,\n  Translate,\n  useSchema,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../ui-components'\nimport {Delay, PaneContent, PaneItem, usePane, usePaneLayout} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {type DocumentListPaneItem, type LoadingVariant} from './types'\n\nconst RootBox = styled(Box)`\n  position: relative;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onListChange: () => void\n  onRetry?: (event: unknown) => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack paddingX={3} paddingY={2} paddingTop={0} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <SanityDefaultPreview isPlaceholder layout={layout} key={num} />\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onListChange,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleEndReached = useCallback(() => {\n    if (isLoading || isLazyLoading || !shouldRender) return\n\n    onListChange()\n  }, [isLazyLoading, isLoading, onListChange, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && <LoadingBlock />}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                {t('panes.document-list-pane.max-items.text', {limit: FULL_LIST_LIMIT})}\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                {t('panes.document-list-pane.no-documents.text')}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint\n                ? t('panes.document-list-pane.no-documents-of-type.text')\n                : t('panes.document-list-pane.no-matching-documents.text')}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery, t])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">{t('panes.document-list-pane.error.title')}</Heading>\n              <Text as=\"p\">\n                <Translate\n                  t={t}\n                  i18nKey=\"panes.document-list-pane.error.text\"\n                  values={{error: error.message}}\n                  components={{Code: ({children}) => <code>{children}</code>}}\n                />\n              </Text>\n\n              {onRetry && (\n                <Box>\n                  <Button\n                    icon={SyncIcon}\n                    onClick={onRetry}\n                    text={t('panes.document-list-pane.error.retry-button.text')}\n                    tone=\"primary\"\n                  />\n                </Box>\n              )}\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\">\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            paddingBottom={1}\n            paddingX={3}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n    // Explicitly don't include `noDocumentsContent` in the deps array, as it's\n    // causing a visual bug where the \"No documents\" message is shown for a split second\n    // when clearing a search query with no results\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    // noDocumentsContent,\n    onRetry,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n  ])\n\n  return (\n    <PaneContent\n      data-testid=\"document-list-pane\"\n      overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}\n    >\n      {mainContent}\n    </PaneContent>\n  )\n}\n", "import {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type SanityDocumentLike,\n  type SchemaType,\n} from '@sanity/types'\nimport * as PathUtils from '@sanity/util/paths'\nimport {type ExprNode, parse} from 'groq-js'\nimport {collate, getPublishedId} from 'sanity'\n\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocumentLike[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft: !!entry.draft,\n    }\n  }) as any\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n\n/**\n * Recursively extract static `_type`s from GROQ filter expressions. If the\n * types can't be statically determined then it will return `null`.\n */\n// eslint-disable-next-line complexity\nfunction findTypes(node: ExprNode): Set<string> | null {\n  switch (node.type) {\n    case 'OpCall': {\n      const {left, right} = node\n\n      switch (node.op) {\n        // e.g. `a == b`\n        case '==': {\n          // e.g. `_type == 'value'`\n          if (left.type === 'AccessAttribute' && left.name === '_type' && !left.base) {\n            if (right.type !== 'Value' || typeof right.value !== 'string') return null\n            return new Set([right.value])\n          }\n\n          // e.g. `'value' == _type`\n          if (right.type === 'AccessAttribute' && right.name === '_type' && !right.base) {\n            if (left.type !== 'Value' || typeof left.value !== 'string') return null\n            return new Set([left.value])\n          }\n\n          // otherwise, we can't determine the types statically\n          return null\n        }\n\n        // e.g. `a in b`\n        case 'in': {\n          // if `_type` is not on the left hand side of `in` then it can't be determined\n          if (left.type !== 'AccessAttribute' || left.name !== '_type' || left.base) return null\n          // if the right hand side is not an array then the types can't be determined\n          if (right.type !== 'Array') return null\n\n          const types = new Set<string>()\n          // iterate through all the types\n          for (const element of right.elements) {\n            // if we find a splat, then early return, we can't determine the types\n            if (element.isSplat) return null\n            // if the array element is not just a simple value, then early return\n            if (element.value.type !== 'Value') return null\n            // if the array element value is not a string, then early return\n            if (typeof element.value.value !== 'string') return null\n            // otherwise add the element value to the set of types\n            types.add(element.value.value)\n          }\n\n          // if there were any elements in the types set, return it\n          if (types.size) return types\n          // otherwise, the set of types cannot be determined\n          return null\n        }\n\n        default: {\n          return null\n        }\n      }\n    }\n\n    // groups can just be unwrapped, the AST preserves the order\n    case 'Group': {\n      return findTypes(node.base)\n    }\n\n    // e.g. `_type == 'a' || _type == 'b'`\n    // with Or nodes, if we can't determine the types for either the left or\n    // right hand side then we can't determine the types for any\n    // e.g. `_type == 'a' || isActive`\n    // — can't determine types because `isActive` could be true on another types\n    case 'Or': {\n      const left = findTypes(node.left)\n      if (!left) return null\n\n      const right = findTypes(node.right)\n      if (!right) return null\n\n      return new Set([...left, ...right])\n    }\n\n    // e.g. `_type == 'a' && isActive`\n    // with And nodes, we can determine the types as long as we can determine\n    // the types for one side. We can't determine the types if both are `null`.\n    case 'And': {\n      const left = findTypes(node.left)\n      const right = findTypes(node.right)\n\n      if (!left && !right) return null\n      return new Set([...(left || []), ...(right || [])])\n    }\n\n    default: {\n      return null\n    }\n  }\n}\n\nexport function findStaticTypesInFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] | null {\n  try {\n    const types = findTypes(parse(filter, {params}))\n    if (!types) return null\n\n    return Array.from(types).sort()\n  } catch {\n    // if we couldn't parse the filter, just return `null`\n    return null\n  }\n}\n", "import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n", "import {type SanityClient} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  map,\n  merge,\n  mergeMap,\n  type Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {createSearch, getSearchableTypes, type SanityDocumentLike, type Schema} from 'sanity'\n\nimport {getExtendedProjection} from '../../structureBuilder/util/getExtendedProjection'\n// FIXME\n// eslint-disable-next-line boundaries/element-types\nimport {type SortOrder} from './types'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  staticTypeNames?: string[] | null\n  maxFieldDepth?: number\n  enableLegacySearch?: boolean\n}\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SanityDocumentLike[]> {\n  const {\n    client,\n    schema,\n    sort,\n    limit,\n    params,\n    filter,\n    searchQuery,\n    staticTypeNames,\n    maxFieldDepth,\n    enableLegacySearch,\n  } = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeResult: false,\n      visibility: 'query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => {\n            if (typeNames.includes(type.name)) {\n              // make a call to getExtendedProjection in strict mode to verify that all fields are\n              // known. This method will throw an exception if there are any unknown fields specified\n              // in the sort by list\n              getExtendedProjection(type, sort.by, true)\n              return true\n            }\n            return false\n          })\n\n          const search = createSearch(types, client, {\n            filter,\n            params,\n            enableLegacySearch,\n            maxDepth: maxFieldDepth,\n          })\n\n          const doFetch = () => {\n            const searchTerms = {\n              query: searchQuery || '',\n              types,\n            }\n\n            const searchOptions = {\n              __unstable_extendedProjection: extendedProjection,\n              comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n              limit,\n              skipSortByScore: true,\n              sort: sortBy,\n            }\n\n            return search(searchTerms, searchOptions).pipe(\n              map((result) =>\n                // eslint-disable-next-line max-nested-callbacks\n                result.hits.map(({hit}) => hit),\n              ),\n            )\n          }\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n  )\n}\n", "import {useCallback, useEffect, useMemo, useState} from 'react'\nimport {concat, fromEvent, merge, of, Subject, throwError} from 'rxjs'\nimport {catchError, map, mergeMap, scan, startWith, take} from 'rxjs/operators'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useSchema,\n  useSearchMaxFieldDepth,\n  useWorkspace,\n} from 'sanity'\n\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {findStaticTypesInFilter, removePublishedWithDrafts} from './helpers'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {type DocumentListPaneItem, type QueryResult, type SortOrder} from './types'\n\nconst EMPTY_ARRAY: [] = []\n\nconst INITIAL_STATE: QueryResult = {\n  error: null,\n  onRetry: undefined,\n  result: null,\n}\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  hasMaxItems?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  isSearchReady: boolean\n  items: DocumentListPaneItem[]\n  onListChange: () => void\n  onRetry?: (event: unknown) => void\n}\n\nconst INITIAL_QUERY_RESULTS: QueryResult = {\n  result: null,\n  error: null,\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): DocumentListState {\n  const {filter, params: paramsProp, sortOrder, searchQuery, apiVersion} = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const {enableLegacySearch = false} = useWorkspace().search\n  const schema = useSchema()\n  const maxFieldDepth = useSearchMaxFieldDepth()\n\n  const [resultState, setResult] = useState<QueryResult>(INITIAL_STATE)\n  const {onRetry, error, result} = resultState\n\n  const documents = result?.documents\n\n  // Filter out published documents that have drafts to avoid duplicates in the list.\n  const items = useMemo(\n    () => (documents ? removePublishedWithDrafts(documents) : EMPTY_ARRAY),\n    [documents],\n  )\n\n  // A state variable to keep track of whether we are currently lazy loading the list.\n  // This is used to determine whether we should show the loading spinner at the bottom of the list.\n  const [isLazyLoading, setIsLazyLoading] = useState<boolean>(false)\n\n  // A state to keep track of whether we have fetched the full list of documents.\n  const [hasFullList, setHasFullList] = useState<boolean>(false)\n\n  // A state to keep track of whether we should fetch the full list of documents.\n  const [shouldFetchFullList, setShouldFetchFullList] = useState<boolean>(false)\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => findStaticTypesInFilter(filter, paramsProp),\n    [filter, paramsProp],\n  )\n\n  // We can't have the loading state as part of the result state, since the loading\n  // state would be updated whenever a mutation is performed in a document in the list.\n  // Instead, we determine if the list is loading by checking if the result is null.\n  // The result is null when:\n  // 1. We are making the initial request\n  // 2. The user has performed a search or changed the sort order\n  const isLoading = result === null && !error\n\n  // A flag to indicate whether we have reached the maximum number of documents.\n  const hasMaxItems = documents?.length === FULL_LIST_LIMIT\n\n  // This function is triggered when the user has scrolled to the bottom of the list\n  // and we need to fetch more items.\n  const onListChange = useCallback(() => {\n    if (isLoading || hasFullList || shouldFetchFullList) return\n\n    setShouldFetchFullList(true)\n  }, [isLoading, hasFullList, shouldFetchFullList])\n\n  const handleSetResult = useCallback(\n    (res: QueryResult) => {\n      if (res.error) {\n        setResult(res)\n        return\n      }\n\n      const documentsLength = res.result?.documents?.length || 0\n      const isLoadingMoreItems = !res.error && res?.result === null && shouldFetchFullList\n\n      // 1. When the result is null and shouldFetchFullList is true, we are loading _more_ items.\n      // In this case, we want to wait for the next result and set the isLazyLoading state to true.\n      if (isLoadingMoreItems) {\n        setIsLazyLoading(true)\n        return\n      }\n\n      // 2. If the result is not null, and less than the partial page limit, we know that\n      // we have fetched the full list of documents. In this case, we want to set the\n      // hasFullList state to true to prevent further requests.\n      if (documentsLength < PARTIAL_PAGE_LIMIT && documentsLength !== 0 && !shouldFetchFullList) {\n        setHasFullList(true)\n      }\n\n      // 3. If the result is null, we are loading items. In this case, we want to\n      // wait for the next result.\n      if (res?.result === null) {\n        setResult((prev) => ({...(prev.error ? res : prev)}))\n        return\n      }\n\n      // 4. Finally, set the result\n      setIsLazyLoading(false)\n      setResult(res)\n    },\n    [shouldFetchFullList],\n  )\n\n  const queryResults$ = useMemo(() => {\n    const onRetry$ = new Subject<void>()\n    const _onRetry = () => onRetry$.next()\n\n    const limit = shouldFetchFullList ? FULL_LIST_LIMIT : PARTIAL_PAGE_LIMIT\n    const sort = sortOrder || DEFAULT_ORDERING\n\n    return listenSearchQuery({\n      client,\n      filter,\n      limit,\n      params: paramsProp,\n      schema,\n      searchQuery: searchQuery || '',\n      sort,\n      staticTypeNames: typeNameFromFilter,\n      maxFieldDepth,\n      enableLegacySearch,\n    }).pipe(\n      map((results) => ({\n        result: {documents: results},\n        error: null,\n      })),\n      startWith(INITIAL_QUERY_RESULTS),\n      catchError((err) => {\n        if (err instanceof ProgressEvent) {\n          // todo: hack to work around issue with get-it (used by sanity/client) that propagates connection errors as ProgressEvent instances. This if-block can be removed once @sanity/client is par with a version of get-it that includes this fix: https://github.com/sanity-io/get-it/pull/127\n          return throwError(() => new Error(`Request error`))\n        }\n        return throwError(() => err)\n      }),\n      catchError((err, caught$) => {\n        return concat(\n          of({result: null, error: err}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, next) => ({...prev, ...next, onRetry: _onRetry})),\n    )\n  }, [\n    shouldFetchFullList,\n    sortOrder,\n    client,\n    filter,\n    paramsProp,\n    schema,\n    searchQuery,\n    typeNameFromFilter,\n    maxFieldDepth,\n    enableLegacySearch,\n  ])\n\n  useEffect(() => {\n    const sub = queryResults$.subscribe(handleSetResult)\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [handleSetResult, queryResults$])\n\n  const reset = useCallback(() => {\n    setHasFullList(false)\n    setIsLazyLoading(false)\n    setResult(INITIAL_STATE)\n    setShouldFetchFullList(false)\n  }, [])\n\n  useEffect(() => {\n    reset()\n  }, [reset, filter, paramsProp, sortOrder, searchQuery])\n\n  return {\n    error,\n    hasMaxItems,\n    isLazyLoading,\n    isLoading,\n    isSearchReady: !error,\n    items,\n    onListChange,\n    onRetry,\n  }\n}\n", "import {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport {Box, TextInput} from '@sanity/ui'\nimport {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {useObservableCallback} from 'react-rx'\nimport {debounce, map, type Observable, of, tap, timer} from 'rxjs'\nimport {\n  type GeneralPreviewLayoutKey,\n  useI18nText,\n  useSchema,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {keyframes, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {EMPTY_RECORD} from './constants'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {applyOrderingFunctions, findStaticTypesInFilter} from './helpers'\nimport {useShallowUnique} from './PaneContainer'\nimport {type LoadingVariant, type SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\n\n/**\n * @internal\n */\nexport type DocumentListPaneProps = BaseStructureToolPaneProps<'documentList'> & {\n  sortOrder?: SortOrder\n  layout?: Exclude<GeneralPreviewLayoutKey, 'sheetList'>\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\n/**\n * @internal\n */\n\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, isActive, pane, paneKey, sortOrder: sortOrderRaw, layout} = props\n  const schema = useSchema()\n\n  const {displayOptions, options} = pane\n  const {apiVersion, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const showIcons = displayOptions?.showIcons !== false\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {title} = useI18nText(pane)\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  // A ref to determine if we should show the loading spinner in the search input.\n  // This is used to avoid showing the spinner on initial load of the document list.\n  // We only wan't to show the spinner when the user interacts with the search input.\n  const showSearchLoadingRef = useRef<boolean>(false)\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n\n  const {\n    error,\n    hasMaxItems,\n    isLazyLoading,\n    isLoading,\n    isSearchReady,\n    items,\n    onListChange,\n    onRetry,\n  } = useDocumentList({\n    apiVersion,\n    filter,\n    params,\n    searchQuery: searchQuery?.trim(),\n    sortOrder,\n  })\n\n  const handleQueryChange = useObservableCallback(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n    [],\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  useEffect(() => {\n    if (showSearchLoadingRef.current === false && !isLoading) {\n      showSearchLoadingRef.current = true\n    }\n\n    return () => {\n      showSearchLoadingRef.current = false\n    }\n  }, [isLoading])\n\n  useEffect(() => {\n    // Clear search field and reset showSearchLoadingRef ref\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    showSearchLoadingRef.current = false\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    const showSpinner = isLoading && items.length === 0 && showSearchLoadingRef.current\n\n    if (showSpinner) return 'spinner'\n\n    return 'initial'\n  }, [isLoading, items.length])\n\n  return (\n    <>\n      <Box paddingX={3} paddingBottom={3}>\n        <TextInput\n          aria-label={t('panes.document-list-pane.search-input.aria-label')}\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={!isSearchReady}\n          fontSize={[2, 2, 1]}\n          icon={loadingVariant === 'spinner' ? AnimatedSpinnerIcon : SearchIcon}\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          padding={2}\n          placeholder={t('panes.document-list-pane.search-input.placeholder')}\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </Box>\n      <DocumentListPaneContent\n        childItemId={childItemId}\n        error={error}\n        filterIsSimpleTypeConstraint={!!typeName}\n        hasMaxItems={hasMaxItems}\n        hasSearchQuery={Boolean(searchQuery)}\n        isActive={isActive}\n        isLazyLoading={isLazyLoading}\n        isLoading={isLoading}\n        items={items}\n        key={paneKey}\n        layout={layout}\n        loadingVariant={loadingVariant}\n        onListChange={onListChange}\n        onRetry={onRetry}\n        paneTitle={title}\n        searchInputElement={searchInputElement}\n        showIcons={showIcons}\n      />\n    </>\n  )\n})\n", "import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, type ReactNode, useMemo} from 'react'\nimport {type GeneralPreviewLayoutKey, type InitialValueTemplateItem} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../ui-components'\nimport {\n  BackLink,\n  PaneHeader as StructurePaneHeader,\n  PaneHeaderActions,\n  usePane,\n} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {type SortOrder} from './types'\n\ninterface PaneHeaderProps {\n  contentAfter?: ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const PaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: PaneHeaderProps) => {\n    const {features} = useStructureTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, StructureToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <TooltipDelayGroupProvider>\n        <StructurePaneHeader\n          actions={\n            <PaneHeaderActions\n              initialValueTemplateItems={initialValueTemplates}\n              actionHandlers={actionHandlers}\n              menuItemGroups={menuItemGroups}\n              menuItems={menuItems}\n            />\n          }\n          backButton={\n            features.backButton &&\n            index > 0 && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: 'Back'}}\n              />\n            )\n          }\n          contentAfter={contentAfter}\n          tabIndex={tabIndex}\n          title={title}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  },\n)\n\nPaneHeader.displayName = 'PaneHeader'\n", "import {type SanityDocument} from '@sanity/client'\nimport {Checkbox} from '@sanity/ui'\nimport {type CellContext} from '@tanstack/react-table'\nimport {type MouseEvent, useCallback} from 'react'\n\nexport function DocumentSheetListSelect(props: CellContext<SanityDocument, unknown>) {\n  const {row, table} = props\n\n  const {selectedAnchor, setSelectedAnchor} = table.options.meta || {}\n\n  const handleOnClick = useCallback(\n    (e: MouseEvent<HTMLInputElement>) => {\n      if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== undefined) {\n        const shiftClickIndex = row.index\n        const lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor\n        const upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex\n\n        const additionalSelectedRows = Array.from(\n          {length: upperIndex - lowerIndex + 1},\n          (_, index) => lowerIndex + index,\n        )\n\n        const currentSelectedRows = table.getSelectedRowModel().rows.map(({index}) => index)\n        table.setRowSelection(() =>\n          [...additionalSelectedRows, ...currentSelectedRows].reduce(\n            (nextSelectedRows, rowIndex) => ({...nextSelectedRows, [rowIndex]: true}),\n            {},\n          ),\n        )\n      } else if (setSelectedAnchor) {\n        const isRowCurrentlySelected = row.getIsSelected()\n        if (isRowCurrentlySelected) {\n          // about to unselect so invalidate current anchor\n          setSelectedAnchor(null)\n        } else {\n          // override anchor with new selection index\n          setSelectedAnchor(row.index)\n        }\n\n        row.toggleSelected()\n      }\n    },\n    [selectedAnchor, row, setSelectedAnchor, table],\n  )\n\n  return (\n    <Checkbox\n      style={{paddingLeft: 4}}\n      checked={props.row.getIsSelected()}\n      disabled={!props.row.getCanSelect()}\n      // onChange doesn't have shiftKey in event, but want to control this checkbox\n      // need to define noop onChange to suppress the warning\n      // eslint-disable-next-line react/jsx-no-bind\n      onChange={() => null}\n      onClick={handleOnClick}\n    />\n  )\n}\n", "import {type SanityDocument} from '@sanity/types'\nimport {type Table} from '@tanstack/react-table'\nimport {type ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {DocumentSheetListContext} from 'sanity/_singletons'\n\ninterface DocumentSheetListProviderProps {\n  children?: ReactNode\n  table: Table<SanityDocument>\n}\n\ntype SelectedCellDetails = {\n  colId: string\n  rowIndex: number\n  state: 'focused' | 'selected'\n} | null\n\n/** @internal */\nexport interface DocumentSheetListContextValue {\n  focusAnchorCell: () => void\n  resetFocusSelection: () => void\n  setSelectedAnchorCell: (colId: string, rowIndex: number) => void\n  getStateByCellId: (\n    colId: string,\n    rowIndex: number,\n  ) => 'focused' | 'selectedAnchor' | 'selectedRange' | null\n  submitFocusedCell: () => void\n}\n\n/** @internal */\nexport const useDocumentSheetListContext = (): DocumentSheetListContextValue => {\n  const context = useContext(DocumentSheetListContext)\n\n  if (context === undefined) {\n    throw new Error('useDocumentSheetListContext must be used within an DocumentSheetListProvider')\n  }\n  return context\n}\n\n/** @internal */\nexport function DocumentSheetListProvider({\n  children,\n  table,\n}: DocumentSheetListProviderProps): ReactNode {\n  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] =\n    useState<SelectedCellDetails>(null)\n  const [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState<number[]>([])\n\n  const clearAndSetFocusSelection = useCallback(\n    (nextAnchorDetails: SelectedCellDetails = null) => {\n      if (\n        selectedAnchorCellDetails?.state === 'focused' &&\n        document.activeElement instanceof HTMLElement\n      ) {\n        document.activeElement.blur()\n      }\n\n      setSelectedAnchorCellDetails(nextAnchorDetails)\n      setSelectedRangeCellIndexes([])\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const resetFocusSelection = useCallback(\n    () => clearAndSetFocusSelection(),\n    [clearAndSetFocusSelection],\n  )\n\n  const changeSelectionColumn = useCallback(\n    (direction: 'left' | 'right') => {\n      if (!selectedAnchorCellDetails) return\n\n      const visibleColumns = table.getVisibleLeafColumns()\n      const columnIndexAfterMove =\n        visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) +\n        (direction === 'left' ? -1 : 1)\n\n      if (columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length) return\n\n      clearAndSetFocusSelection({\n        colId: visibleColumns[columnIndexAfterMove].id,\n        rowIndex: selectedAnchorCellDetails.rowIndex,\n        state: 'selected',\n      })\n    },\n    [clearAndSetFocusSelection, selectedAnchorCellDetails, table],\n  )\n\n  const changeSelectionRange = useCallback(\n    (direction: 'up' | 'down') => {\n      if (!selectedAnchorCellDetails) return\n\n      setSelectedRangeCellIndexes((previousSelection) => {\n        const {rowIndex: anchorIndex} = selectedAnchorCellDetails\n        const getNextIndex = (startingIndex: number) =>\n          startingIndex + (direction === 'down' ? 1 : -1)\n        // if no cells are selected, select the cell in the direction\n        if (!previousSelection.length) {\n          const firstSelectedIndex = getNextIndex(anchorIndex)\n          if (firstSelectedIndex < 0) return []\n          return [firstSelectedIndex]\n        }\n        const lastIndexSelected = previousSelection[previousSelection.length - 1]\n        const nextIndex = getNextIndex(lastIndexSelected)\n\n        // if the cell in the direction is out of bounds, return the previous selection\n        if (nextIndex < 0) return previousSelection\n\n        // if the cell in the direction is the same as the focused cell, deselect all cells\n        if (nextIndex === anchorIndex) return []\n\n        // if the cell in the direction is already selected, deselect the last selected cell\n        if (previousSelection.includes(nextIndex)) {\n          return previousSelection.slice(0, -1)\n        }\n\n        return [...previousSelection, nextIndex]\n      })\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const setSelectedAnchorCell = useCallback(\n    (colId: string, rowIndex: number) => {\n      clearAndSetFocusSelection({colId, rowIndex, state: 'selected'})\n    },\n    [clearAndSetFocusSelection],\n  )\n\n  const handleEscapePress = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n    if (selectedRangeCellIndexes.length) {\n      // only clear selected range if it exists\n      setSelectedRangeCellIndexes([])\n    } else {\n      const nextAnchorCellDetails: SelectedCellDetails =\n        selectedAnchorCellDetails.state === 'selected'\n          ? null\n          : {\n              ...selectedAnchorCellDetails,\n              state: 'selected',\n            }\n      clearAndSetFocusSelection(nextAnchorCellDetails)\n    }\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length])\n\n  const handleUpDownKey = useCallback(\n    (isShiftKey: boolean, key: string) => {\n      if (!selectedAnchorCellDetails) return\n\n      const direction = key === 'ArrowDown' ? 'down' : 'up'\n      const offset = direction === 'down' ? 1 : -1\n\n      if (isShiftKey) {\n        changeSelectionRange(direction)\n      } else {\n        const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset\n        if (newSelectedCellRowIndex < 0) return\n\n        setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex)\n      }\n    },\n    [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell],\n  )\n\n  const handleAnchorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!selectedAnchorCellDetails) return\n\n      const {key, shiftKey} = event\n\n      switch (key) {\n        case 'Shift':\n          break // shift allow should do nothing\n\n        case 'Escape':\n          handleEscapePress()\n          break\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault()\n          handleUpDownKey(shiftKey, key)\n          break\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          // when cell is focused, arrows should have default behavior\n          // only prevent default when cell is selected\n          if (selectedAnchorCellDetails.state === 'selected') {\n            event.preventDefault()\n            changeSelectionColumn(key === 'ArrowLeft' ? 'left' : 'right')\n          }\n          break\n\n        default:\n          break\n      }\n    },\n    [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn],\n  )\n\n  const handleAnchorClick = useCallback(\n    (event: MouseEvent) => {\n      if (!selectedAnchorCellDetails) return\n      const isClickInAnchorCell = document\n        .getElementById(\n          `cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`,\n        )\n        ?.contains(event.target as Node)\n\n      if (!isClickInAnchorCell) resetFocusSelection()\n    },\n    [resetFocusSelection, selectedAnchorCellDetails],\n  )\n\n  useEffect(() => {\n    if (selectedAnchorCellDetails) {\n      document.addEventListener('keydown', handleAnchorKeydown)\n      document.addEventListener('click', handleAnchorClick)\n    }\n\n    return () => {\n      if (selectedAnchorCellDetails) {\n        document.removeEventListener('keydown', handleAnchorKeydown)\n        document.removeEventListener('click', handleAnchorClick)\n      }\n    }\n  }, [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails])\n\n  const focusAnchorCell = useCallback(\n    () =>\n      setSelectedAnchorCellDetails((anchorCellDetails) => {\n        if (!anchorCellDetails) return null\n\n        return {...anchorCellDetails, state: 'focused'}\n      }),\n    [],\n  )\n\n  const getStateByCellId = useCallback(\n    (colId: string, rowIndex: number) => {\n      if (selectedAnchorCellDetails?.colId !== colId) return null\n\n      if (selectedAnchorCellDetails.rowIndex === rowIndex)\n        return selectedAnchorCellDetails.state === 'focused' ? 'focused' : 'selectedAnchor'\n\n      if (selectedRangeCellIndexes.includes(rowIndex)) return 'selectedRange'\n\n      return null\n    },\n    [selectedAnchorCellDetails, selectedRangeCellIndexes],\n  )\n\n  const submitFocusedCell = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n\n    clearAndSetFocusSelection({\n      colId: selectedAnchorCellDetails.colId,\n      rowIndex: selectedAnchorCellDetails.rowIndex + 1,\n      state: 'selected',\n    })\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails])\n\n  const value = useMemo<DocumentSheetListContextValue>(\n    () => ({\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    }),\n    [\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    ],\n  )\n\n  return (\n    <DocumentSheetListContext.Provider value={value}>{children}</DocumentSheetListContext.Provider>\n  )\n}\n", "/* eslint-disable i18next/no-literal-string */\nimport {type ObjectFieldType} from '@sanity/types'\nimport {Select, TextInput} from '@sanity/ui'\nimport {type Cell, type CellContext, flexRender} from '@tanstack/react-table'\nimport {type MouseEventHandler, useCallback, useEffect, useRef, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentSheetListContext} from './DocumentSheetListProvider'\n\nconst DataCell = styled.td<{width: number}>`\n  display: flex;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: ${({width}) => width}px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-bg-color);\n`\n\nconst PinnedDataCell = styled(DataCell)`\n  position: sticky;\n  z-index: 2;\n`\n\ninterface SheetListCellInnerProps extends CellContext<SanityDocument, unknown> {\n  fieldType: ObjectFieldType\n}\n\ntype CellInputElement = HTMLInputElement | HTMLSelectElement\ntype InputRef = CellInputElement | null\n\n/** @internal */\nexport function SheetListCellInner(props: SheetListCellInnerProps) {\n  const {getValue, column, row, fieldType} = props\n  const cellId = `cell-${column.id}-${row.index}`\n  const [renderValue, setRenderValue] = useState<string>(getValue() as string)\n  const [isDirty, setIsDirty] = useState(false)\n  const inputRef = useRef<InputRef>(null)\n  const {\n    focusAnchorCell,\n    resetFocusSelection,\n    setSelectedAnchorCell,\n    getStateByCellId,\n    submitFocusedCell,\n  } = useDocumentSheetListContext()\n  const cellState = getStateByCellId(column.id, row.index)\n\n  const handleOnFocus = useCallback(() => {\n    // reselect in cases where focus achieved without initial mousedown\n    setSelectedAnchorCell(column.id, row.index)\n    focusAnchorCell()\n  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell])\n  const {patchDocument} = props.table.options.meta || {}\n\n  const handleProgrammaticFocus = () => {\n    inputRef.current?.focus()\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.select()\n    }\n  }\n\n  const handleOnMouseDown: MouseEventHandler<CellInputElement> = (event) => {\n    if (event.detail === 2) {\n      handleProgrammaticFocus()\n    } else {\n      event.preventDefault()\n      setSelectedAnchorCell(column.id, row.index)\n    }\n  }\n\n  const handleOnEnterDown = useCallback(\n    (event: KeyboardEvent) => {\n      const {key} = event\n      if (key === 'Enter') {\n        if (cellState === 'selectedAnchor') handleProgrammaticFocus()\n        if (cellState === 'focused') submitFocusedCell()\n      }\n    },\n    [cellState, submitFocusedCell],\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n    setRenderValue(event.target.value)\n  }\n\n  const handleOnBlur = () => {\n    if (isDirty) {\n      patchDocument?.(row.id, column.id, renderValue)\n      setIsDirty(false)\n    }\n    resetFocusSelection()\n  }\n\n  const handlePaste = useCallback(\n    (event: ClipboardEvent) => {\n      const clipboardData = event.clipboardData?.getData('Text')\n\n      if (typeof clipboardData === 'string' || typeof clipboardData === 'number') {\n        setRenderValue(clipboardData)\n        // patch immediately when pasting\n        patchDocument?.(row.id, column.id, clipboardData)\n      }\n    },\n    [column.id, patchDocument, row.id],\n  )\n\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(renderValue.toString())\n  }, [renderValue])\n\n  useEffect(() => {\n    if (cellState === 'selectedAnchor' || cellState === 'focused')\n      // only listen for enter key when cell is focused or anchor\n      document.addEventListener('keydown', handleOnEnterDown)\n    if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n      // if cell is selected, paste events should be handled\n      document.addEventListener('paste', handlePaste)\n\n    if (cellState === 'selectedAnchor')\n      // only allow copying when cell is selected anchor\n      document.addEventListener('copy', handleCopy)\n\n    return () => {\n      if (cellState === 'selectedAnchor' || cellState === 'focused')\n        document.removeEventListener('keydown', handleOnEnterDown)\n      if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n        document.removeEventListener('paste', handlePaste)\n      if (cellState === 'selectedAnchor') document.removeEventListener('copy', handleCopy)\n    }\n  }, [\n    cellId,\n    cellState,\n    column.id,\n    getStateByCellId,\n    handleCopy,\n    handleOnEnterDown,\n    handlePaste,\n    row.index,\n  ])\n\n  const getBorderStyle = () => {\n    if (cellState === 'focused') return '2px solid blue'\n    if (cellState === 'selectedRange') return '1px solid green'\n    if (cellState === 'selectedAnchor') return '1px solid blue'\n\n    return '1px solid transparent'\n  }\n\n  const inputProps = {\n    'onFocus': handleOnFocus,\n    'onBlur': handleOnBlur,\n    'onMouseDown': handleOnMouseDown,\n    'aria-selected': !!cellState,\n    'data-testid': cellId,\n    'id': cellId,\n    'ref': (ref: InputRef) => (inputRef.current = ref),\n  }\n\n  if (fieldType.name === 'boolean') {\n    return (\n      <Select\n        {...inputProps}\n        onChange={() => null}\n        radius={0}\n        style={{\n          boxShadow: 'none',\n          border: getBorderStyle(),\n          padding: 0,\n        }}\n        value={JSON.stringify(renderValue)}\n      >\n        <option value=\"True\">True</option>\n        <option value=\"False\">False</option>\n      </Select>\n    )\n  }\n\n  return (\n    <TextInput\n      {...inputProps}\n      size={0}\n      radius={0}\n      border={false}\n      style={{\n        border: getBorderStyle(),\n        padding: '22px 16px',\n      }}\n      value={\n        typeof renderValue === 'string' || typeof renderValue === 'number'\n          ? renderValue\n          : JSON.stringify(renderValue)\n      }\n      onChange={handleOnChange}\n    />\n  )\n}\n\n/** @internal */\nexport function SheetListCell(cell: Cell<SanityDocument, unknown>) {\n  const isPinned = cell.column.getIsPinned()\n  const Cell = isPinned ? PinnedDataCell : DataCell\n  const borderWidth = isPinned && cell.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <Cell\n      key={cell.row.original._id + cell.id}\n      style={{\n        left: cell.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      width={cell.column.getSize()}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext?.())}\n    </Cell>\n  )\n}\n", "import {isObjectSchemaType, type ObjectSchemaType} from '@sanity/types'\nimport {Box, Checkbox, Flex, Text} from '@sanity/ui'\nimport {\n  type AccessorKeyColumnDef,\n  createColumnHelper,\n  type GroupColumnDef,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {useMemo} from 'react'\nimport {useMemoObservable} from 'react-rx'\nimport {\n  type DocumentPreviewStore,\n  DocumentStatusIndicator,\n  getPreviewStateObservable,\n  type SanityDocument,\n  type SchemaType,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {type PaneItemPreviewState} from '../../../components/paneItem/types'\nimport {DocumentSheetListSelect} from './DocumentSheetListSelect'\nimport {SheetListCellInner} from './SheetListCell'\n\nexport const VISIBLE_COLUMN_LIMIT = 5\n\nconst PreviewCell = (props: {\n  documentPreviewStore: DocumentPreviewStore\n  schemaType: SchemaType\n  row: {\n    original: SanityDocument\n  }\n}) => {\n  const {documentPreviewStore, row, schemaType} = props\n  const title = 'Document title'\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const {draft, published, isLoading} = useMemoObservable<PaneItemPreviewState>(\n    () => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id, title),\n    [documentPreviewStore, schemaType, row.original._id],\n  )!\n  if (isLoading) {\n    return (\n      <Text size={1} muted>\n        Loading...\n      </Text>\n    )\n  }\n  const displayValue = (draft?.title ?? published?.title ?? 'Untitled') as string\n  return (\n    <Flex align=\"center\" gap={3}>\n      <DocumentStatusIndicator draft={draft} published={published} />\n      <Text size={1}>{displayValue}</Text>\n    </Flex>\n  )\n}\n\nconst columnHelper = createColumnHelper<SanityDocument>()\nconst SUPPORTED_FIELDS = ['string', 'number', 'boolean']\n\ntype Columns = (\n  | AccessorKeyColumnDef<SanityDocument, unknown>\n  | GroupColumnDef<SanityDocument, unknown>\n)[]\n\nconst getColsFromSchemaType = (schemaType: ObjectSchemaType, parentalField?: string): Columns => {\n  return schemaType.fields.reduce<Columns>((tableColumns: Columns, field) => {\n    const {type, name} = field\n    if (SUPPORTED_FIELDS.includes(type.name)) {\n      const nextCol = columnHelper.accessor(\n        // accessor must use dot notation for internal tanstack method of reading cell data\n        parentalField ? `${parentalField}.${field.name}` : field.name,\n        {\n          id: parentalField ? `${parentalField}_${field.name}` : field.name,\n          header: field.type.title,\n          enableHiding: true,\n          cell: (info) => <SheetListCellInner {...info} fieldType={type} />,\n        },\n      )\n\n      return [...tableColumns, nextCol]\n    }\n\n    // if first layer nested object\n    if (type.name === 'object' && isObjectSchemaType(type) && !parentalField) {\n      return [\n        ...tableColumns,\n        columnHelper.group({header: name, columns: getColsFromSchemaType(type, field.name)}),\n      ]\n    }\n\n    return tableColumns\n  }, [])\n}\n\n// Type guard function to check if a column is of type GroupColumnDef\nfunction isAccessorKeyColumnDef(\n  column: Columns[number],\n): column is AccessorKeyColumnDef<SanityDocument, unknown> {\n  return 'accessorKey' in column\n}\nfunction isGroupColumnDef(\n  column: AccessorKeyColumnDef<SanityDocument, unknown> | GroupColumnDef<SanityDocument, unknown>,\n): column is GroupColumnDef<SanityDocument, unknown> {\n  return 'columns' in column\n}\n\nconst flatColumns = (cols: Columns): AccessorKeyColumnDef<SanityDocument, unknown>[] => {\n  return cols.flatMap((col) => {\n    if (isAccessorKeyColumnDef(col)) {\n      return col\n    }\n    if (isGroupColumnDef(col)) {\n      return col.columns ? flatColumns(col.columns) : []\n    }\n    return []\n  })\n}\n\nexport function useDocumentSheetColumns(documentSchemaType?: ObjectSchemaType) {\n  const documentPreviewStore = useDocumentPreviewStore()\n\n  const columns: Columns = useMemo(() => {\n    if (!documentSchemaType) {\n      return []\n    }\n    return [\n      columnHelper.display({\n        id: 'selected',\n        enableHiding: false,\n        header: (info) => (\n          <Box>\n            <Checkbox\n              style={{paddingLeft: 4}}\n              indeterminate={info.table.getIsSomeRowsSelected()}\n              onChange={info.table.getToggleAllPageRowsSelectedHandler()}\n            />\n            {/* eslint-disable-next-line i18next/no-literal-string */}\n            {info.table.getSelectedRowModel().rows.length} selected\n          </Box>\n        ),\n        cell: DocumentSheetListSelect,\n      }),\n      columnHelper.accessor('Preview', {\n        enableHiding: false,\n        id: 'Preview',\n        cell: (info) => {\n          return (\n            <PreviewCell\n              {...info}\n              documentPreviewStore={documentPreviewStore}\n              schemaType={documentSchemaType}\n            />\n          )\n        },\n      }),\n      ...getColsFromSchemaType(documentSchemaType),\n    ]\n  }, [documentPreviewStore, documentSchemaType])\n\n  const [initialColumnsVisibility]: [VisibilityState, number] = useMemo(\n    () =>\n      flatColumns(columns).reduce<[VisibilityState, number]>(\n        ([accCols, countAllowedVisible], column) => {\n          if (!column.id) throw new Error('Column must have an id')\n          const visibilityKey = column.id\n\n          // this column is always visible\n          if (!column.enableHiding) {\n            return [{...accCols, [visibilityKey]: true}, countAllowedVisible]\n          }\n\n          // have already reached column visibility limit, hide column by default\n          if (countAllowedVisible === VISIBLE_COLUMN_LIMIT) {\n            return [{...accCols, [visibilityKey]: false}, countAllowedVisible]\n          }\n\n          return [{...accCols, [visibilityKey]: true}, countAllowedVisible + 1]\n        },\n        [{}, 0],\n      ),\n    [columns],\n  )\n\n  return {columns, initialColumnsVisibility}\n}\n", "import {Box, Button, Checkbox, Flex, Menu, MenuButton, Stack, Text} from '@sanity/ui'\nimport {type Column, type Table} from '@tanstack/react-table'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useTranslation} from 'sanity'\n\nimport {VISIBLE_COLUMN_LIMIT} from './useDocumentSheetColumns'\n\ntype ColumnsControlProps = {\n  table: Table<SanityDocument>\n}\n\nexport function ColumnsControl({table}: ColumnsControlProps) {\n  const {t} = useTranslation()\n  const isVisibleLimitReached =\n    table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT\n\n  const setInitialColumns = useCallback(() => {\n    table.resetColumnVisibility()\n  }, [table])\n\n  const handleColumnOnChange = (column: Column<SanityDocument, unknown>) => () => {\n    column.toggleVisibility()\n  }\n\n  const getColumnVisibilityDisabled = (column: Column<SanityDocument, unknown>) => {\n    const isColumnVisible = column.getIsVisible()\n    const isSingleColumnVisible =\n      table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length === 1\n\n    return (isVisibleLimitReached && !isColumnVisible) || (isSingleColumnVisible && isColumnVisible)\n  }\n\n  return (\n    <MenuButton\n      button={<Button mode=\"bleed\" text={t('sheet-list.edit-columns')} size={1} />}\n      id=\"columns-control\"\n      menu={\n        <Menu padding={3} paddingTop={4} style={{width: 240}}>\n          <Flex direction=\"column\" height=\"fill\" gap={3}>\n            <Text weight=\"semibold\" size={1}>\n              {t('sheet-list.select-fields')}\n            </Text>\n            <Flex style={{flex: '1 1 auto', maxHeight: 320, overflowY: 'scroll'}}>\n              <Stack>\n                {table\n                  .getAllLeafColumns()\n                  .filter((column) => column.getCanHide())\n                  .map((column) => (\n                    <Flex key={column.id} marginY={2} align=\"center\">\n                      <Checkbox\n                        readOnly={getColumnVisibilityDisabled(column)}\n                        checked={column.getIsVisible()}\n                        onChange={handleColumnOnChange(column)}\n                        id={`col-visibility-${column.id}`}\n                        style={{display: 'block'}}\n                      />\n                      <Box flex={1} paddingLeft={3}>\n                        <Text size={1}>\n                          <label htmlFor={`col-visibility-${column.id}`}>\n                            {column.columnDef.header?.toString()}\n                          </label>\n                        </Text>\n                      </Box>\n                    </Flex>\n                  ))}\n              </Stack>\n            </Flex>\n            <Button\n              width=\"fill\"\n              mode=\"ghost\"\n              size={1}\n              text={t('sheet-list.reset-columns')}\n              onClick={setInitialColumns}\n            />\n          </Flex>\n        </Menu>\n      }\n      placement=\"bottom\"\n      popover={{portal: true}}\n    />\n  )\n}\n", "import {Flex} from '@sanity/ui'\nimport {Filters, SearchHeader, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nconst SearchContainer = styled(Flex)`\n  flex-shrink: 0;\n`\n\nexport function DocumentSheetListFilter() {\n  const {\n    state: {filtersVisible},\n  } = useSearchState()\n\n  return (\n    <SearchContainer>\n      <SearchHeader />\n      {filtersVisible && <Filters showTypeFilter={false} />}\n    </SearchContainer>\n  )\n}\n", "import {CloseIcon, EllipsisHorizontalIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Menu, MenuButton, Text} from '@sanity/ui'\nimport {flexRender, type Header as HeaderType, type HeaderGroup} from '@tanstack/react-table'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, MenuItem, Tooltip} from '../../../../ui-components'\n\nconst Header = styled.th<{width: number}>`\n  margin: 16px;\n  z-index: 1;\n  padding: 22px 0px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-badge-default-bg-color);\n  box-sizing: border-box;\n  text-align: left;\n  width: ${({width}) => width}px;\n  max-width: ${({width}) => width}px;\n`\n\nconst PinnedHeader = styled(Header)`\n  position: sticky;\n  z-index: 2;\n`\n\nconst HoverMenu = styled.div`\n  visibility: hidden;\n\n  ${Header}:hover & {\n    visibility: visible;\n  }\n`\n\ntype DocumentSheetListHeaderProps = {\n  header: HeaderType<SanityDocument, unknown>\n  headerGroup: HeaderGroup<SanityDocument>\n}\n\nexport function DocumentSheetListHeader(props: DocumentSheetListHeaderProps) {\n  const {header, headerGroup} = props\n  const {t} = useTranslation()\n\n  const isPinned = header.column.getIsPinned()\n\n  const headerTitle =\n    headerGroup.depth > 0 && !header.column.parent ? null : (\n      <Text size={1} weight=\"semibold\" textOverflow=\"ellipsis\">\n        {flexRender(header.column.columnDef.header, header.getContext())}\n      </Text>\n    )\n\n  const HeaderTag = isPinned ? PinnedHeader : Header\n\n  const canShowHeaderMenu =\n    header.column.getCanHide() &&\n    (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent)\n\n  const borderWidth = isPinned && header.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <HeaderTag\n      style={{\n        left: header.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      key={header.id}\n      data-testid={`header-${header.id}`}\n      width={header.getSize()}\n    >\n      <Flex justify=\"space-between\" marginX={2} align=\"baseline\">\n        <Tooltip delay={500} content={headerTitle}>\n          <Box style={{boxSizing: 'border-box'}} marginLeft={3} marginRight={3}>\n            {headerTitle}\n          </Box>\n        </Tooltip>\n        {canShowHeaderMenu && (\n          <HoverMenu>\n            <MenuButton\n              button={\n                <Button\n                  tooltipProps={{content: 'Open field menu'}}\n                  mode=\"bleed\"\n                  icon={EllipsisHorizontalIcon}\n                  data-testid=\"field-menu-button\"\n                />\n              }\n              id=\"field menu\"\n              popover={{placement: 'bottom-end'}}\n              menu={\n                <Menu>\n                  <MenuItem\n                    text={t('sheet-list.hide-field')}\n                    icon={CloseIcon}\n                    onClick={() => header.column.toggleVisibility()}\n                  />\n                </Menu>\n              }\n            />\n          </HoverMenu>\n        )}\n      </Flex>\n    </HeaderTag>\n  )\n}\n", "/* eslint-disable i18next/no-literal-string */\n/* eslint-disable @sanity/i18n/no-attribute-string-literals */\n/* eslint-disable react/jsx-no-bind */\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleChevronLeftIcon,\n  DoubleChevronRightIcon,\n} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {type Table} from '@tanstack/react-table'\nimport {type SanityDocument} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../ui-components'\n\nexport function DocumentSheetListPaginator({table}: {table: Table<SanityDocument>}) {\n  return (\n    <TooltipDelayGroupProvider>\n      <Flex gap={3} align={'center'}>\n        <Button\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n          icon={DoubleChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to first page',\n          }}\n        />\n        <Button\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n          icon={ChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to previous page',\n          }}\n        />\n        <Text style={{whiteSpace: 'nowrap'}}>\n          {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </Text>\n\n        <Button\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n          icon={ChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to next page',\n          }}\n        />\n        <Button\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n          icon={DoubleChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to last page',\n          }}\n        />\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={(e) => {\n            table.setPageSize(Number(e.target.value))\n          }}\n        >\n          {[25, 50, 100].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              {pageSize}\n            </option>\n          ))}\n        </select>\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n}\n", "import {type ListenEvent, type ListenOptions} from '@sanity/client'\nimport {useCallback, useEffect, useMemo, useReducer, useState} from 'react'\nimport {catchError, of} from 'rxjs'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getDraftId, type SanityDocument, useClient} from 'sanity'\n\ninterface DocumentDeletedAction {\n  id: string\n  type: 'DOCUMENT_DELETED'\n}\n\ninterface DocumentUpdatedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_UPDATED'\n}\n\ninterface DocumentsSetAction {\n  documents: SanityDocument[]\n  type: 'DOCUMENTS_SET'\n}\n\ninterface DocumentReceivedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_RECEIVED'\n}\n\nexport type DocumentsReducerAction =\n  | DocumentDeletedAction\n  | DocumentUpdatedAction\n  | DocumentsSetAction\n  | DocumentReceivedAction\n\nexport interface DocumentsReducerState {\n  documents: Record<string, SanityDocument>\n}\n\nfunction createDocumentsSet(documents: SanityDocument[]) {\n  const documentsById = documents.reduce((acc, doc) => ({...acc, [doc._id]: doc}), {})\n  return documentsById\n}\n\nfunction documentsReducer(\n  state: DocumentsReducerState,\n  action: DocumentsReducerAction,\n): DocumentsReducerState {\n  switch (action.type) {\n    case 'DOCUMENTS_SET': {\n      // Create an object with the documents id as key\n      const documents = createDocumentsSet(action.documents)\n\n      return {\n        ...state,\n        documents: documents,\n      }\n    }\n\n    case 'DOCUMENT_RECEIVED': {\n      const nextDocumentResult = action.payload as SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [nextDocumentResult._id]: nextDocumentResult,\n        },\n      }\n    }\n\n    case 'DOCUMENT_DELETED': {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: _, ...restDocuments} = state.documents\n\n      return {\n        ...state,\n        documents: restDocuments,\n      }\n    }\n\n    case 'DOCUMENT_UPDATED': {\n      const updatedDocument = action.payload\n      const id = updatedDocument._id as string\n      const document = state.documents[id]\n\n      const nextDocument = {\n        // Add existing document data\n        ...document,\n        // Add incoming document data\n        ...updatedDocument,\n      } satisfies SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [id]: nextDocument,\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst LISTEN_OPTIONS: ListenOptions = {\n  events: ['welcome', 'mutation', 'reconnect'],\n  includeResult: true,\n  visibility: 'query',\n}\n\n/**\n * TODO:\n * [] Lazy load more documents, reduce initial fetch.\n * [] Add support for sorting and filtering.\n * []  Make a projection of the query according to the schema. e.g. get only the primitive fields and the _id to reduce the data payload.\n */\nexport function useDocumentSheetListStore({\n  filter,\n  params,\n  apiVersion,\n}: {\n  filter: string\n  params?: Record<string, unknown>\n  apiVersion?: string\n}) {\n  const QUERY = `*[${filter}][0...2000]`\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const [state, dispatch] = useReducer(documentsReducer, {\n    documents: {},\n  })\n  const [isLoading, setIsLoading] = useState<boolean>(client !== null)\n  const [error, setError] = useState<Error | null>(null)\n\n  const initialFetch = useCallback(async () => {\n    if (!client) {\n      setIsLoading(false)\n      return\n    }\n    try {\n      const res = await client.fetch(QUERY, params)\n      dispatch({type: 'DOCUMENTS_SET', documents: res})\n      setIsLoading(false)\n    } catch (err) {\n      setError(err)\n    }\n  }, [client, params, QUERY])\n\n  const handleListenerEvent = useCallback(\n    async (event: ListenEvent<Record<string, SanityDocument>>) => {\n      // Fetch all documents on initial connection\n      if (event.type === 'welcome') {\n        setIsLoading(true)\n        await initialFetch()\n        setIsLoading(false)\n      }\n\n      // The reconnect event means that we are trying to reconnect to the realtime listener.\n      // In this case we set loading to true to indicate that we're trying to\n      // reconnect. Once a connection has been established, the welcome event\n      // will be received and we'll fetch all documents again (above).\n      if (event.type === 'reconnect') {\n        setIsLoading(true)\n      }\n\n      // Handle mutations (create, update, delete) from the realtime listener\n      // and update the documents store accordingly\n      if (event.type === 'mutation') {\n        if (event.transition === 'appear') {\n          const nextDocument = event.result as SanityDocument | undefined\n\n          if (nextDocument) {\n            dispatch({\n              type: 'DOCUMENT_RECEIVED',\n              payload: nextDocument,\n            })\n          }\n        }\n\n        if (event.transition === 'disappear') {\n          dispatch({type: 'DOCUMENT_DELETED', id: event.documentId})\n        }\n\n        if (event.transition === 'update') {\n          const updatedDocument = event.result as SanityDocument | undefined\n\n          if (updatedDocument) {\n            dispatch({\n              type: 'DOCUMENT_UPDATED',\n              payload: updatedDocument,\n            })\n          }\n        }\n      }\n    },\n    [initialFetch],\n  )\n\n  const listener$ = useMemo(() => {\n    if (!client) return of()\n\n    const events$ = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(\n      catchError((err) => {\n        setError(err)\n        return of(err)\n      }),\n    )\n\n    return events$\n  }, [client, params, QUERY])\n\n  useEffect(() => {\n    const sub = listener$.subscribe(handleListenerEvent)\n\n    return () => {\n      sub?.unsubscribe()\n    }\n  }, [handleListenerEvent, listener$])\n\n  // Contemplate that we could have drafts and live documents here, merge them.\n  const dataAsArray = useMemo(() => {\n    // Joins the drafts and the live documents\n    const uniques = Object.keys(state.documents).reduce(\n      (acc: {[key: string]: SanityDocument}, key) => {\n        const document = state.documents[key]\n        const isDraft = document._id === getDraftId(document._id)\n        const id = isDraft ? document._id : getDraftId(document._id)\n        // If we already have the document, and this document is not the draft one, it means\n        // the draft hast already been added to the list, so we skip it.\n        if (acc[id] && !isDraft) {\n          return acc\n        }\n        acc[id] = document\n        return acc\n      },\n      {},\n    )\n    return Object.values(uniques)\n  }, [state.documents])\n\n  return {\n    data: dataAsArray,\n    isLoading,\n    error,\n  }\n}\n", "import {useMemo} from 'react'\nimport {getPublishedId, useSearchState} from 'sanity'\n\nimport {useDocumentSheetListStore} from './useDocumentSheetListStore'\n\ninterface DocumentSheetListOptions {\n  /**The schemaType.name  */\n  typeName: string\n}\n\nexport function useDocumentSheetList({typeName}: DocumentSheetListOptions) {\n  const {state} = useSearchState()\n\n  const items = useMemo(() => {\n    const map = new Map()\n    state.result.hits.forEach((h) => map.set(getPublishedId(h.hit._id), h.hit))\n    return map\n  }, [state.result.hits])\n\n  // The store is listening to all the documents that match with the _type filter.\n  const {data, isLoading} = useDocumentSheetListStore({\n    filter: `_type == \"${typeName}\"`,\n  })\n\n  // Only return the documents that match with the serverSide filter items.\n  const documents = useMemo(() => {\n    return data.filter((doc) => items.has(getPublishedId(doc._id)))\n  }, [data, items])\n\n  return {data: documents, isLoading}\n}\n", "import {isDocumentSchemaType, type ObjectSchemaType, type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  type Row,\n  useReactTable,\n} from '@tanstack/react-table'\nimport {useCallback, useEffect, useState} from 'react'\nimport {SearchProvider, useSchema, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {type BaseStructureToolPaneProps} from '../../types'\nimport {ColumnsControl} from './ColumnsControl'\nimport {DocumentSheetListFilter} from './DocumentSheetListFilter'\nimport {DocumentSheetListHeader} from './DocumentSheetListHeader'\nimport {DocumentSheetListPaginator} from './DocumentSheetListPaginator'\nimport {DocumentSheetListProvider} from './DocumentSheetListProvider'\nimport {SheetListCell} from './SheetListCell'\nimport {useDocumentSheetColumns} from './useDocumentSheetColumns'\nimport {useDocumentSheetList} from './useDocumentSheetList'\n\ntype DocumentSheetListPaneProps = BaseStructureToolPaneProps<'documentList'>\n\nconst PaneContainer = styled(Flex)`\n  height: 100%;\n`\nconst TableContainer = styled.div`\n  overflow: auto; //our scrollable table container\n  position: relative; //needed for sticky header\n`\nconst Table = styled.table`\n  border-collapse: separate;\n  border-spacing: 0;\n  font-family: arial, sans-serif;\n  white-space: nowrap;\n  width: 100%;\n  border: 1px solid lightgray;\n\n  thead {\n    display: grid;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  tr {\n    padding: 0;\n  }\n  tr:last-child {\n    border-bottom: none;\n  }\n`\n\nfunction DocumentSheetListPaneInner({\n  documentSchemaType,\n}: DocumentSheetListPaneProps & {documentSchemaType: ObjectSchemaType}) {\n  const {dispatch, state} = useSearchState()\n  const {columns, initialColumnsVisibility} = useDocumentSheetColumns(documentSchemaType)\n  const {data} = useDocumentSheetList({\n    typeName: documentSchemaType.name,\n  })\n  const [selectedAnchor, setSelectedAnchor] = useState<number | null>(null)\n\n  const totalRows = state.result.hits.length\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    // Avoids resetting the page index when the data changes, e.g. a mutation is received\n    autoResetPageIndex: false,\n    initialState: {\n      columnPinning: {left: ['selected', 'Preview']},\n      pagination: {pageSize: 25},\n      columnVisibility: initialColumnsVisibility,\n    },\n    getRowId: (row) => row._id,\n    meta: {\n      selectedAnchor,\n      setSelectedAnchor,\n      patchDocument: (documentId, fieldId, value) => null,\n    },\n  })\n\n  const {rows} = table.getRowModel()\n\n  useEffect(() => {\n    dispatch({type: 'TERMS_TYPE_ADD', schemaType: documentSchemaType})\n    return () => {\n      dispatch({type: 'TERMS_TYPE_REMOVE', schemaType: documentSchemaType})\n    }\n  }, [documentSchemaType, dispatch])\n\n  const renderRow = useCallback((row: Row<SanityDocument>) => {\n    return (\n      <Box\n        as=\"tr\"\n        key={row.original._id + row.id}\n        paddingY={2}\n        style={{display: 'flex', width: '100%'}}\n      >\n        {row.getVisibleCells().map((cell) => (\n          <SheetListCell {...cell} key={row.original._id + cell.id} />\n        ))}\n      </Box>\n    )\n  }, [])\n\n  const rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`\n  return (\n    <PaneContainer direction=\"column\" paddingX={3} data-testid=\"document-sheet-list-pane\">\n      <Flex direction=\"row\" align=\"center\" paddingY={3} paddingX={1} justify=\"space-between\">\n        <Flex direction=\"row\" align=\"center\">\n          <DocumentSheetListFilter />\n          <Text size={0} muted>\n            {rowsCount}\n          </Text>\n        </Flex>\n        <ColumnsControl table={table} />\n      </Flex>\n      <TableContainer>\n        <DocumentSheetListProvider table={table}>\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <Box as=\"tr\" key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DocumentSheetListHeader\n                      key={header.id}\n                      header={header}\n                      headerGroup={headerGroup}\n                    />\n                  ))}\n                </Box>\n              ))}\n            </thead>\n            <tbody>{table.getRowModel().rows.map(renderRow)}</tbody>\n          </Table>\n        </DocumentSheetListProvider>\n      </TableContainer>\n      <Flex justify={'flex-end'} padding={3} gap={4} paddingY={5}>\n        <DocumentSheetListPaginator table={table} />\n      </Flex>\n    </PaneContainer>\n  )\n}\n\nexport function DocumentSheetListPane(props: DocumentSheetListPaneProps) {\n  const schema = useSchema()\n  const typeName = props.pane.schemaTypeName\n\n  const schemaType = schema.get(typeName)\n  if (!schemaType || !isDocumentSchemaType(schemaType)) {\n    throw new Error(`Schema type \"${typeName}\" not found or not a document schema`)\n  }\n  return (\n    <SearchProvider>\n      <DocumentSheetListPaneInner {...props} documentSchemaType={schemaType} />\n    </SearchProvider>\n  )\n}\n", "import {Card, Code} from '@sanity/ui'\nimport {isEqual} from 'lodash'\nimport {memo, useMemo, useRef} from 'react'\nimport {\n  EMPTY_ARRAY,\n  type GeneralDocumentListLayoutKey,\n  SourceProvider,\n  useI18nText,\n  useSource,\n} from 'sanity'\nimport shallowEquals from 'shallow-equals'\n\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureToolSetting} from '../../useStructureToolSetting'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {DocumentListPane} from './DocumentListPane'\nimport {findStaticTypesInFilter} from './helpers'\nimport {PaneHeader} from './PaneHeader'\nimport {DocumentSheetListPane} from './sheetList/DocumentSheetListPane'\nimport {type SortOrder} from './types'\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralDocumentListLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\nexport function useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const valueRef = useRef<ValueType>(value)\n  if (!shallowEquals(valueRef.current, value)) {\n    valueRef.current = value\n  }\n  return valueRef.current\n}\n\n/**\n * @internal\n */\nexport const PaneContainer = memo(function PaneContainer(\n  props: BaseStructureToolPaneProps<'documentList'>,\n) {\n  const {index, isSelected, pane, paneKey} = props\n  const {name: parentSourceName} = useSource()\n\n  const {\n    defaultLayout = 'default',\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n  } = pane\n  const {defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const [layout, setLayout] = useStructureToolSetting<GeneralDocumentListLayoutKey>(\n    'layout',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultLayout,\n  )\n\n  const {title} = useI18nText(pane)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useStructureToolSetting<SortOrder>(\n    'sort-order',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultSortOrder,\n  )\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const isSheetListLayout = layout === 'sheetList'\n  const paneLayout = isSheetListLayout ? (\n    <DocumentSheetListPane {...props} key={props.pane.id} />\n  ) : (\n    <DocumentListPane {...props} sortOrder={sortOrderRaw} layout={layout} />\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        minWidth={320}\n        {...(isSheetListLayout ? {} : {currentMaxWidth: 350, maxWidth: 640})}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <PaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n        {paneLayout}\n      </Pane>\n    </SourceProvider>\n  )\n})\n", "import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n", "import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n", "import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n", "import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n", "import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n", "import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n", "import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n", "import {type SanityClient} from '@sanity/client'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  getDraftId,\n  getPublishedId,\n  type SourceClientOptions,\n} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[_id in [$documentId, $draftId]]._type'\n  const documentId = getPublishedId(id)\n  const draftId = getDraftId(id)\n\n  const types = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {documentId, draftId},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return types[0]\n}\n", "import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n", "import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n", "import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n", "import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n", "import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n", "import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n", "import {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link router.BaseIntentParams} and {@link router.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n", "export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n", "import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n", "import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - filter\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n", "import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n", "import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n", "import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n", "import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n", "import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n", "import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n", "import {type DocumentBadgeComponent} from 'sanity'\n\n/** @internal */\nexport const LiveEditBadge: DocumentBadgeComponent = (props) => {\n  const {liveEdit} = props\n\n  if (liveEdit) {\n    return {\n      label: 'Live',\n      color: 'danger',\n    }\n  }\n\n  return null\n}\n", "import {uuid} from '@sanity/uuid'\n\nimport {EMPTY_PARAMS, type LOADING_PANE} from './constants'\nimport {type PaneNode, type RouterPanes} from './types'\n\nconst state: {\n  activePanes: Array<PaneNode | typeof LOADING_PANE>\n} = {activePanes: []}\n\nexport function setActivePanes(panes: Array<PaneNode | typeof LOADING_PANE>): void {\n  state.activePanes = panes\n}\n\n/**\n * This function looks at the _active panes_ to resolve an intent. this type of\n * intent resolution is faster and does not cause the panes to reset\n *\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: {panes?: RouterPanes} | undefined,\n  payload: unknown,\n): {panes: RouterPanes} | {intent: string; params: Record<string, string>; payload: unknown} {\n  const panes = routerState?.panes || []\n  const activePanes = state.activePanes || []\n  const editDocumentId = params.id || uuid()\n  const isTemplate = intent === 'create' && params.template\n\n  // Loop through open panes and see if any of them can handle the intent\n  for (let i = activePanes.length - 1; i >= 0; i--) {\n    const pane = activePanes[i]\n\n    if (typeof pane !== 'object') continue\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `resolveIntent.ts`\n    if (\n      pane.canHandleIntent?.(intent, params, {\n        pane,\n        index: i,\n      }) ||\n      // see `resolveIntent.ts` for more info\n      (pane.type === 'documentList' &&\n        pane.schemaTypeName === params.type &&\n        pane.options.filter === '_type == $type')\n    ) {\n      const paneParams = isTemplate ? {template: params.template} : EMPTY_PARAMS\n\n      return {\n        panes: panes\n          .slice(0, i)\n          .concat([[{id: editDocumentId, params: paneParams, payload}]]) as RouterPanes,\n      }\n    }\n  }\n\n  return {intent: intent, params, payload}\n}\n", "import {type AnnotationDetails, type Diff, visitDiff} from 'sanity'\n\nexport function collectLatestAuthorAnnotations(diff: Diff): AnnotationDetails[] {\n  const authorMap = new Map<string, AnnotationDetails>()\n  visitDiff(diff, (child) => {\n    if (child.action === 'unchanged' || !('annotation' in child) || !child.annotation) {\n      return true\n    }\n\n    const {author, timestamp} = child.annotation\n    const previous = authorMap.get(author)\n    if (!previous || previous.timestamp < timestamp) {\n      authorMap.set(author, child.annotation)\n    }\n\n    return true\n  })\n\n  return Array.from(authorMap.values()).sort((a, b) => (a.timestamp < b.timestamp ? 1 : -1))\n}\n", "import {type ObjectDiff} from '@sanity/diff'\nimport {AvatarStack, BoundaryElementProvider, Box, Card, Flex} from '@sanity/ui'\nimport {type ReactElement, useMemo, useRef} from 'react'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  DiffTooltip,\n  type DocumentChangeContextInstance,\n  type DocumentInspectorProps,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  UserAvatar,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {TimelineMenu} from '../../timeline'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {collectLatestAuthorAnnotations} from './helpers'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function ChangesInspector(props: DocumentInspectorProps): ReactElement {\n  const {onClose} = props\n  const {documentId, schemaType, timelineError, timelineStore, value} = useDocumentPane()\n  const scrollRef = useRef<HTMLDivElement | null>(null)\n\n  // Subscribe to external timeline state changes\n  const diff = useTimelineSelector(timelineStore, (state) => state.diff)\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const selectionState = useTimelineSelector(timelineStore, (state) => state.selectionState)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n  const loading = selectionState === 'loading'\n  const isComparingCurrent = !onOlderRevision\n\n  // Note that we are using the studio core namespace here, as changes theoretically should\n  // be part of Sanity core (needs to be moved from structure at some point)\n  const {t} = useTranslation('studio')\n\n  const documentContext: DocumentChangeContextInstance = useMemo(\n    () => ({\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent,\n      value,\n    }),\n    [documentId, diff, isComparingCurrent, schemaType, value],\n  )\n\n  const changeAnnotations = useMemo(\n    () => (diff ? collectLatestAuthorAnnotations(diff) : []),\n    [diff],\n  )\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('changes.action.close-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('changes.title')}\n      >\n        <Flex gap={1} padding={3} paddingTop={0} paddingBottom={2}>\n          <Box flex={1}>\n            <TimelineMenu mode=\"since\" chunk={sinceTime} placement=\"bottom-start\" />\n          </Box>\n\n          <Box flex=\"none\">\n            <DiffTooltip\n              annotations={changeAnnotations}\n              description={t('changes.changes-by-author')}\n              portal\n            >\n              <AvatarStack maxLength={4} aria-label={t('changes.changes-by-author')}>\n                {changeAnnotations.map(({author}) => (\n                  <UserAvatar key={author} user={author} />\n                ))}\n              </AvatarStack>\n            </DiffTooltip>\n          </Box>\n        </Flex>\n      </DocumentInspectorHeader>\n\n      <Card flex={1}>\n        <BoundaryElementProvider element={scrollRef.current}>\n          <Scroller data-ui=\"Scroller\" ref={scrollRef}>\n            <Box flex={1} padding={4}>\n              <Content\n                diff={diff}\n                documentContext={documentContext}\n                error={timelineError}\n                loading={loading}\n                schemaType={schemaType}\n              />\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  diff,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  diff: ObjectDiff<any> | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <NoChanges />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!diff) {\n    return <NoChanges />\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={diff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n", "import {RestoreIcon} from '@sanity/icons'\nimport {type DocumentInspector, useTranslation} from 'sanity'\n\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesInspector} from './ChangesInspector'\n\nexport const changesInspector: DocumentInspector = {\n  name: HISTORY_INSPECTOR_NAME,\n  useMenuItem: () => {\n    const {features} = useStructureTool()\n    const {t} = useTranslation()\n\n    return {\n      hidden: !features.reviewChanges,\n      icon: RestoreIcon,\n      title: t('changes.title'),\n    }\n  },\n  component: ChangesInspector,\n  onClose: ({params}) => ({params: {...params, since: undefined}}),\n  onOpen: ({params}) => ({params: {...params, since: '@lastPublished'}}),\n}\n", "/* eslint-disable no-loop-func */\n\nimport {type Path, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {isArray, isRecord} from 'sanity'\n\nexport function getPathTitles(options: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}): Array<{name: string; title?: string}> {\n  const {path, schemaType, value} = options\n  const result: Array<{name: string; title?: string}> = []\n\n  let s = schemaType\n  let v: unknown = value\n\n  for (const segment of path) {\n    // field name\n    if (typeof segment === 'string') {\n      if (!isRecord(v) && v !== undefined) {\n        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`)\n      }\n\n      if (s.jsonType !== 'object') {\n        throw new Error(\n          `Parent type is not an object schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const field = s.fields.find((f) => f.name === segment)\n\n      if (!field) {\n        result.push({name: segment})\n        return result\n      }\n\n      s = field.type\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item index\n    if (typeof segment === 'number') {\n      if (!isArray(v) && v !== undefined) {\n        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`)\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: [${segment}]`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const itemType = s.of.find((ofType) => {\n        if (typeof v === 'string') {\n          return ofType.jsonType === 'string'\n        }\n\n        if (typeof v === 'number') {\n          return ofType.jsonType === 'number'\n        }\n\n        if (typeof v === 'boolean') {\n          return ofType.jsonType === 'boolean'\n        }\n\n        if (isRecord(v)) {\n          return ofType.name === v?._type\n        }\n\n        return false\n      })\n\n      if (!itemType) {\n        throw new Error(`Item type not found: [${segment}]`)\n      }\n\n      s = itemType\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item key\n    if (isRecord(segment) && segment._key) {\n      if (!isArray(v)) {\n        throw new Error(\n          `Parent value is not an array, cannot get path segment: [_key == ${segment}]`,\n        )\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      const values = v ?? []\n\n      v = values.find((i) => isRecord(i) && i._key === segment._key)\n\n      if (!isRecord(v)) {\n        throw new Error(`Array item not found: [_key == ${segment._key}]`)\n      }\n\n      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type)\n\n      if (!ofType) {\n        throw new Error(`Array item type not found: .${v?._type}`)\n      }\n\n      s = ofType\n\n      result.push(s)\n\n      continue\n    }\n\n    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`)\n  }\n\n  return result\n}\n", "import {\n  ErrorOutlineIcon,\n  type IconComponent,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SchemaType,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {Box, Card, type CardTone, ErrorBoundary, Flex, Stack, Text} from '@sanity/ui'\nimport {createElement, type ErrorInfo, Fragment, useCallback, useMemo, useState} from 'react'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\n\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {getPathTitles} from './getPathTitles'\n\nconst MARKER_ICON: Record<'error' | 'warning' | 'info', IconComponent> = {\n  error: ErrorOutlineIcon,\n  warning: WarningOutlineIcon,\n  info: InfoOutlineIcon,\n}\n\nconst MARKER_TONE: Record<'error' | 'warning' | 'info', CardTone> = {\n  error: 'critical',\n  warning: 'caution',\n  info: 'primary',\n}\n\nexport function ValidationInspector(props: DocumentInspectorProps) {\n  const {onClose} = props\n  const {onFocus, onPathOpen, schemaType, validation, value} = useDocumentPane()\n  const {t} = useTranslation('validation')\n\n  const handleOpen = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onFocus, onPathOpen],\n  )\n\n  return (\n    <Flex direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('panel.close-button-aria-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('panel.title')}\n      />\n\n      <Card flex={1} overflow=\"auto\" padding={3}>\n        {validation.length === 0 && (\n          <Box padding={2}>\n            <Text muted size={1}>\n              {t('panel.no-errors-message')}\n            </Text>\n          </Box>\n        )}\n\n        {validation.length > 0 && (\n          <Stack space={2}>\n            {validation.map((marker, i) => (\n              <ValidationCard\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                marker={marker}\n                onOpen={handleOpen}\n                schemaType={schemaType}\n                value={value}\n              />\n            ))}\n          </Stack>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n\nfunction ValidationCard(props: {\n  marker: ValidationMarker\n  onOpen: (path: Path) => void\n  schemaType: ObjectSchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {marker, onOpen, schemaType, value} = props\n  const handleOpen = useCallback(() => onOpen(marker.path), [marker, onOpen])\n  const [errorInfo, setErrorInfo] = useState<{error: Error; info: ErrorInfo} | null>(null)\n\n  return (\n    <ErrorBoundary onCatch={setErrorInfo}>\n      {errorInfo && (\n        <Card padding={3} radius={2} tone=\"critical\">\n          <Text size={1}>{errorInfo.error.message}</Text>\n        </Card>\n      )}\n\n      {!errorInfo && (\n        <Card\n          __unstable_focusRing\n          as=\"button\"\n          onClick={handleOpen}\n          padding={3}\n          radius={2}\n          tone={MARKER_TONE[marker.level]}\n        >\n          <Flex align=\"flex-start\" gap={3}>\n            <Box flex=\"none\">\n              <Text size={1}>{createElement(MARKER_ICON[marker.level])}</Text>\n            </Box>\n\n            <Stack flex={1} space={2}>\n              <DocumentNodePathBreadcrumbs\n                path={marker.path}\n                schemaType={schemaType}\n                value={value}\n              />\n\n              <Text muted size={1}>\n                {marker.message}\n              </Text>\n            </Stack>\n          </Flex>\n        </Card>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nfunction DocumentNodePathBreadcrumbs(props: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {path, schemaType, value} = props\n\n  const pathTitles = useMemo(() => {\n    try {\n      return getPathTitles({path, schemaType, value})\n    } catch (e) {\n      console.error(e)\n    }\n    return null\n  }, [path, schemaType, value])\n\n  if (!pathTitles?.length) return null\n\n  return (\n    <Text size={1}>\n      {pathTitles.map((t, i) => (\n        <Fragment key={i}>\n          {i > 0 && <span style={{color: 'var(--card-muted-fg-color)', opacity: 0.5}}> / </span>}\n          <span style={{fontWeight: 500}}>{t.title || t.name}</span>\n        </Fragment>\n      ))}\n    </Text>\n  )\n}\n", "import {CheckmarkCircleIcon, ErrorOutlineIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {useMemo} from 'react'\nimport {\n  type DocumentInspector,\n  type DocumentInspectorMenuItem,\n  type DocumentInspectorUseMenuItemProps,\n  type FormNodeValidation,\n  isValidationError,\n  isValidationWarning,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {VALIDATION_INSPECTOR_NAME} from '../../constants'\nimport {ValidationInspector} from './ValidationInspector'\n\nfunction useMenuItem(props: DocumentInspectorUseMenuItemProps): DocumentInspectorMenuItem {\n  const {documentId, documentType} = props\n  const {t} = useTranslation('validation')\n  const {validation: validationMarkers} = useValidationStatus(documentId, documentType)\n\n  const validation: FormNodeValidation[] = useMemo(\n    () =>\n      validationMarkers.map((item) => ({\n        level: item.level,\n        message: item.message,\n        path: item.path,\n      })),\n    [validationMarkers],\n  )\n\n  const hasErrors = validation.some(isValidationError)\n  const hasWarnings = validation.some(isValidationWarning)\n\n  const icon = useMemo(() => {\n    if (hasErrors) return ErrorOutlineIcon\n    if (hasWarnings) return WarningOutlineIcon\n    return CheckmarkCircleIcon\n  }, [hasErrors, hasWarnings])\n\n  const tone = useMemo(() => {\n    if (hasErrors) return 'critical'\n    if (hasWarnings) return 'caution'\n    return 'positive'\n  }, [hasErrors, hasWarnings])\n\n  return {\n    hidden: validation.length === 0,\n    icon,\n    title: t('panel.title'),\n    tone,\n    showAsAction: true,\n  }\n}\n\nexport const validationInspector: DocumentInspector = {\n  name: VALIDATION_INSPECTOR_NAME,\n  component: ValidationInspector,\n  useMenuItem,\n}\n", "import {omit} from 'lodash'\nimport {decodeJsonParams, encodeJsonParams, route} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from './types'\n\nconst EMPTY_PARAMS = {}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToState(params: string): Record<string, unknown> {\n  try {\n    return JSON.parse(decodeURIComponent(params))\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to parse JSON parameters')\n    return {}\n  }\n}\n\nexport function encodePanesSegment(panes: RouterPanes): string {\n  return (panes || [])\n    .map((group) => group.map(encodeChunks).join('|'))\n    .map(encodeURIComponent)\n    .join(';')\n}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToPath(params: Record<string, unknown>): string {\n  return JSON.stringify(params)\n}\n\n// http://localhost:3333/intent/create/template=book-by-author;type=book/eyJhdXRob3JJZCI6Imdycm0ifQ==\n\n/**\n * @internal\n */\nexport function toState(pathSegment: string): RouterPaneGroup[] {\n  return parsePanesSegment(decodeURIComponent(pathSegment))\n}\n\n/**\n * @internal\n */\nexport function toPath(panes: RouterPaneGroup[]): string {\n  return encodePanesSegment(panes)\n}\n\nexport const router = route.create('/', [\n  // \"Asynchronous intent resolving\" route\n  route.intents('/intent'),\n\n  // Legacy fallback route, will be redirected to new format\n  route.create('/edit/:type/:editDocumentId', [\n    route.create({\n      path: '/:params',\n      transform: {params: {toState: legacyEditParamsToState, toPath: legacyEditParamsToPath}},\n    }),\n  ]),\n\n  // The regular path - when the intent can be resolved to a specific pane\n  route.create({\n    path: '/:panes',\n    // Legacy URLs, used to handle redirects\n    children: [route.create('/:action', route.create('/:legacyEditDocumentId'))],\n    transform: {\n      panes: {toState, toPath},\n    },\n  }),\n])\n\n// old: authors;knut,{\"template\":\"diaryEntry\"}\n// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts\n\nconst panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i\nconst isParam = (str: string) => /^[a-z0-9]+=[^=]+/i.test(str)\nconst isPayloadLike = (str: string) => /^[A-Za-z0-9\\-_]+(?:={0,2})$/.test(str)\nconst exclusiveParams = ['view', 'since', 'rev', 'inspect', 'comment']\n\ntype Truthy<T> = T extends false\n  ? never\n  : T extends ''\n    ? never\n    : T extends 0\n      ? never\n      : T extends 0n\n        ? never\n        : T extends null | undefined\n          ? NonNullable<T>\n          : T\nconst isTruthy = Boolean as (t: unknown) => boolean as <T>(t: T) => t is Truthy<T>\n\nfunction parseChunks(chunks: string[], initial: RouterPaneSibling): RouterPaneSibling {\n  const sibling: RouterPaneSibling = {...initial, params: EMPTY_PARAMS, payload: undefined}\n  return chunks.reduce((pane, chunk) => {\n    if (isParam(chunk)) {\n      const key = chunk.slice(0, chunk.indexOf('='))\n      const value = chunk.slice(key.length + 1)\n      pane.params = {...pane.params, [decodeURIComponent(key)]: decodeURIComponent(value)}\n    } else if (isPayloadLike(chunk)) {\n      pane.payload = tryParseBase64Payload(chunk)\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('Unknown pane segment: %s - skipping', chunk)\n    }\n\n    return pane\n  }, sibling)\n}\n\nfunction encodeChunks(pane: RouterPaneSibling, index: number, group: RouterPaneGroup): string {\n  const {payload, params = {}, id} = pane\n  const [firstSibling] = group\n  const paneIsFirstSibling = pane === firstSibling\n  const sameAsFirst = index !== 0 && id === firstSibling.id\n  const encodedPayload =\n    typeof payload === 'undefined' ? undefined : encodeJsonParams(payload as any)\n\n  const encodedParams = Object.entries(params)\n    .filter((entry): entry is [string, string] => {\n      const [key, value] = entry\n      if (!value) return false\n      if (paneIsFirstSibling) return true\n\n      // omit the value if it's the same as the value from the first sibling\n      const valueFromFirstSibling = firstSibling.params?.[key]\n      if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false\n      return true\n    })\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n\n  return (\n    [sameAsFirst ? '' : id]\n      .concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat())\n      .join(',') || ','\n  )\n}\n\nexport function parsePanesSegment(str: string): RouterPanes {\n  if (str.indexOf(',{') !== -1) {\n    return parseOldPanesSegment(str)\n  }\n\n  return str\n    .split(';')\n    .map((group) => {\n      const [firstSibling, ...restOfSiblings] = group.split('|').map((segment) => {\n        const [id, ...chunks] = segment.split(',')\n        return parseChunks(chunks, {id})\n      })\n\n      return [\n        firstSibling,\n        ...restOfSiblings.map((sibling) => ({\n          ...firstSibling,\n          ...sibling,\n          id: sibling.id || firstSibling.id,\n          params: {...omit(firstSibling.params, exclusiveParams), ...sibling.params},\n          payload: sibling.payload || firstSibling.payload,\n        })),\n      ]\n    })\n    .filter((group) => group.length > 0)\n}\n\nfunction parseOldPanesSegment(str: string): RouterPanes {\n  const chunks: RouterPaneGroup = []\n\n  let buffer = str\n  while (buffer.length) {\n    const [match, id, payloadChunk] = buffer.match(panePattern) || []\n    if (!match) {\n      buffer = buffer.slice(1)\n      continue\n    }\n\n    const payload = payloadChunk && tryParsePayload(payloadChunk)\n    chunks.push({id, payload})\n\n    buffer = buffer.slice(match.length)\n  }\n\n  return [chunks]\n}\n\nfunction tryParsePayload(json: string) {\n  try {\n    return JSON.parse(json)\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n\nfunction tryParseBase64Payload(data: string): unknown {\n  try {\n    return data ? decodeJsonParams(data) : undefined\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n", "import {MasterDetailIcon} from '@sanity/icons'\nimport {lazy} from 'react'\nimport {definePlugin} from 'sanity'\n\nimport {\n  DeleteAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  HistoryRestoreAction,\n  PublishAction,\n  UnpublishAction,\n} from './documentActions'\nimport {LiveEditBadge} from './documentBadges'\nimport {getIntentState} from './getIntentState'\nimport {structureUsEnglishLocaleBundle} from './i18n'\nimport {changesInspector} from './panes/document/inspectors/changes'\nimport {validationInspector} from './panes/document/inspectors/validation'\nimport {router} from './router'\nimport {type StructureToolOptions} from './types'\n\nconst documentActions = [\n  PublishAction,\n  UnpublishAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  DeleteAction,\n  HistoryRestoreAction,\n]\n\nconst documentBadges = [LiveEditBadge]\n\nconst inspectors = [validationInspector, changesInspector]\n\n/**\n * The structureTool is a studio plugin which adds the “structure tool” – a tool within\n * Sanity Studio in which content editors can drill down to specific documents to edit them.\n * You can configure your Studio's structure tool(s).\n *\n * @public\n * @param options - Options for the structure tool. See {@link StructureToolOptions}\n * @example Minimal example\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n *\n * export default defineConfig((\n *  // ...\n *  plugins: [\n *    structureTool() // use defaults\n *  ]\n * })\n * ```\n *\n * @example To customise your structure tool\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n * import { FaCar } from 'react-icons'\n\n * export default defineConfig((\n *\t // ...\n *   plugins: [\n *    structureTool({\n *      name: 'cars',\n *      title: 'Cars',\n *      icon: FaCar,\n *      structure: (S) => S.documentTypeList('car'),\n *      defaultDocumentNode: (S) =>\n *        S.document().views([\n *          S.view.form(),\n *          S.view.component(Preview).title('Preview')\n *        ])\n *    })\n *  ]\n * })\n * ```\n * */\nexport const structureTool = definePlugin<StructureToolOptions | void>((options) => {\n  const icon = options?.icon || MasterDetailIcon\n\n  return {\n    name: 'sanity/structure',\n    document: {\n      actions: (prevActions) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document actions already exist in the Studio config\n        return Array.from(new Set([...prevActions, ...documentActions]))\n      },\n      badges: (prevBadges) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document badges already exist in the Studio config\n        return Array.from(new Set([...prevBadges, ...documentBadges]))\n      },\n      inspectors: (prevInspectors) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the inspectors already exist in the Studio config\n        return Array.from(new Set([...prevInspectors, ...inspectors]))\n      },\n    },\n\n    tools: [\n      {\n        name: options?.name || 'structure',\n        title: options?.title || 'Structure',\n        icon,\n        component: lazy(() => import('./components/structureTool')),\n        canHandleIntent: (intent, params) => {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx\n        controlsDocumentTitle: true,\n        options,\n        router,\n      },\n    ],\n\n    i18n: {\n      bundles: [structureUsEnglishLocaleBundle],\n    },\n  }\n})\n\nfunction canHandleCreateIntent(params: Record<string, unknown>) {\n  // We can't handle create intents without a `type` parameter\n  if (!('type' in params)) {\n    return false\n  }\n\n  // We can handle any create intent as long as it has a `type` parameter,\n  // but we also know how to deal with templates, where other tools might not\n  return 'template' in params ? {template: true} : true\n}\n\nfunction canHandleEditIntent(params: Record<string, unknown>) {\n  // We can't handle edit intents without an `id` parameter\n  if (!('id' in params)) {\n    return false\n  }\n\n  // We can handle any edit intent with a document ID, but we're best at `structure` mode\n  // This ensures that other tools that can handle modes such as `presentation` or `batch`\n  // can take precedence over the structure tool\n  return 'mode' in params ? {mode: params.mode === 'structure'} : true\n}\n", "import {type ReactElement, type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): ReactElement {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],
  "mappings": "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",
  "names": ["camelCase", "kebabCase", "text", "debug", "format", "err", "obj", "_setPrototypeOf", "o", "p", "_getPrototypeOf", "CopyToClipboard", "text", "CopyToClipboard", "isNumber", "createColumnHelper", "accessor", "column", "accessorFn", "accessorKey", "display", "group", "functionalUpdate", "updater", "input", "makeStateUpdater", "key", "instance", "updater", "setState", "old", "functionalUpdate", "isFunction", "d", "Function", "isNumberArray", "Array", "isArray", "every", "val", "flattenBy", "arr", "getChildren", "flat", "recurse", "subArr", "forEach", "item", "push", "children", "length", "memo", "getDeps", "fn", "opts", "deps", "result", "depArgs", "depTime", "debug", "Date", "now", "newDeps", "depsChanged", "some", "dep", "index", "resultTime", "onChange", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "getMemoOptions", "tableOptions", "debugLevel", "_tableOptions$debugAl", "debugAll", "createCell", "table", "row", "column", "columnId", "getRenderValue", "_cell$getValue", "cell", "getValue", "options", "renderFallbackValue", "id", "renderValue", "getContext", "_features", "feature", "createColumn", "columnDef", "depth", "parent", "_ref", "_resolvedColumnDef$id", "defaultColumn", "_getDefaultColumnDef", "resolvedColumnDef", "accessorKey", "replace", "undefined", "header", "accessorFn", "includes", "originalRow", "split", "_result", "warn", "process", "Error", "columns", "getFlatColumns", "_column$columns", "flatMap", "getLeafColumns", "_getOrderColumnsFn", "orderColumns", "_column$columns2", "leafColumns", "createHeader", "_options$id", "isPlaceholder", "placeholderId", "subHeaders", "colSpan", "rowSpan", "headerGroup", "getLeafHeaders", "leafHeaders", "recurseHeader", "h", "map", "Headers", "createTable", "getHeaderGroups", "getAllColumns", "getVisibleLeafColumns", "getState", "columnPinning", "left", "right", "allColumns", "_left$map$filter", "_right$map$filter", "leftColumns", "find", "filter", "Boolean", "rightColumns", "centerColumns", "headerGroups", "buildHeaderGroups", "getCenterHeaderGroups", "getLeftHeaderGroups", "_left$map$filter2", "orderedLeafColumns", "getRightHeaderGroups", "_right$map$filter2", "getFooterGroups", "reverse", "getLeftFooterGroups", "getCenterFooterGroups", "getRightFooterGroups", "getFlatHeaders", "headers", "getLeftFlatHeaders", "getCenterFlatHeaders", "getRightFlatHeaders", "getCenterLeafHeaders", "flatHeaders", "_header$subHeaders", "getLeftLeafHeaders", "_header$subHeaders2", "getRightLeafHeaders", "_header$subHeaders3", "center", "_left$0$headers", "_left$", "_center$0$headers", "_center$", "_right$0$headers", "_right$", "columnsToGroup", "headerFamily", "_headerGroups$0$heade", "_headerGroups$", "maxDepth", "findMaxDepth", "getIsVisible", "createHeaderGroup", "headersToGroup", "join", "pendingParentHeaders", "headerToGroup", "latestPendingParentHeader", "isLeafHeader", "bottomHeaders", "recurseHeadersForSpans", "filteredHeaders", "childRowSpans", "childColSpan", "childRowSpan", "minChildRowSpan", "createRow", "original", "rowIndex", "subRows", "parentId", "_valuesCache", "_uniqueValuesCache", "hasOwnProperty", "getColumn", "getUniqueValues", "_row$getValue", "getLeafRows", "getParentRow", "getRow", "getParentRows", "parentRows", "currentRow", "parentRow", "getAllCells", "getAllLeafColumns", "_getAllCellsByColumnId", "allCells", "reduce", "acc", "i", "ColumnFaceting", "_getFacetedRowModel", "getFacetedRowModel", "getPreFilteredRowModel", "_getFacetedUniqueValues", "getFacetedUniqueValues", "Map", "_getFacetedMinMaxValues", "getFacetedMinMaxValues", "includesString", "filterValue", "search", "toLowerCase", "toString", "autoRemove", "testFalsey", "includesStringSensitive", "_row$getValue2", "equalsString", "_row$getValue3", "arrIncludes", "_row$getValue4", "arrIncludesAll", "_row$getValue5", "arrIncludesSome", "_row$getValue6", "equals", "weakEquals", "inNumberRange", "rowValue", "resolveFilterValue", "unsafeMin", "unsafeMax", "parsedMin", "parseFloat", "parsedMax", "Number", "isNaN", "Infinity", "temp", "filterFns", "ColumnFiltering", "getDefaultColumnDef", "filterFn", "getInitialState", "state", "columnFilters", "getDefaultOptions", "onColumnFiltersChange", "filterFromLeafRows", "maxLeafRowFilterDepth", "getAutoFilterFn", "firstRow", "getCoreRowModel", "flatRows", "value", "getFilterFn", "_table$options$filter", "_table$options$filter2", "getCanFilter", "_column$columnDef$ena", "_table$options$enable", "_table$options$enable2", "enableColumnFilter", "enableColumnFilters", "enableFilters", "getIsFiltered", "getFilterIndex", "getFilterValue", "_table$getState$colum", "_table$getState$colum2", "_table$getState$colum3", "findIndex", "setFilterValue", "setColumnFilters", "previousFilter", "newFilter", "shouldAutoRemoveFilter", "_old$filter", "newFilterObj", "_old$map", "_table", "columnFiltersMeta", "updateFn", "_functionalUpdate", "resetColumnFilters", "defaultState", "_table$initialState$c", "_table$initialState", "initialState", "getFilteredRowModel", "_getFilteredRowModel", "manualFiltering", "sum", "_leafRows", "childRows", "next", "nextValue", "extent", "mean", "leafRows", "count", "median", "values", "mid", "floor", "nums", "sort", "a", "b", "unique", "from", "Set", "uniqueCount", "size", "_columnId", "aggregationFns", "ColumnGrouping", "aggregatedCell", "props", "_toString", "_props$getValue", "aggregationFn", "grouping", "onGroupingChange", "groupedColumnMode", "toggleGrouping", "setGrouping", "getCanGroup", "enableGrouping", "getGroupingValue", "getIsGrouped", "_table$getState$group", "getGroupedIndex", "_table$getState$group2", "indexOf", "getToggleGroupingHandler", "canGroup", "getAutoAggregationFn", "Object", "prototype", "call", "getAggregationFn", "_table$options$aggreg", "_table$options$aggreg2", "resetGrouping", "_table$initialState$g", "getPreGroupedRowModel", "getGroupedRowModel", "_getGroupedRowModel", "manualGrouping", "groupingColumnId", "_groupingValuesCache", "getIsPlaceholder", "getIsAggregated", "_row$subRows", "nonGroupingColumns", "col", "groupingColumns", "g", "ColumnOrdering", "columnOrder", "onColumnOrderChange", "getIndex", "position", "_getVisibleLeafColumns", "getIsFirstColumn", "_columns$", "getIsLastColumn", "_columns", "setColumnOrder", "resetColumnOrder", "orderedColumns", "columnOrderCopy", "columnsCopy", "targetColumnId", "shift", "foundIndex", "splice", "getDefaultColumnPinningState", "ColumnPinning", "onColumnPinningChange", "pin", "columnIds", "setColumnPinning", "_old$left3", "_old$right3", "_old$left", "_old$right", "_old$left2", "_old$right2", "getCanPin", "_d$columnDef$enablePi", "enablePinning", "enableColumnPinning", "getIsPinned", "leafColumnIds", "isLeft", "isRight", "getPinnedIndex", "getCenterVisibleCells", "_getAllVisibleCells", "leftAndRight", "getLeftVisibleCells", "cells", "getRightVisibleCells", "resetColumnPinning", "getIsSomeColumnsPinned", "_pinningState$positio", "pinningState", "_pinningState$left", "_pinningState$right", "getLeftLeafColumns", "getRightLeafColumns", "getCenterLeafColumns", "defaultColumnSizing", "minSize", "maxSize", "MAX_SAFE_INTEGER", "getDefaultColumnSizingInfoState", "startOffset", "startSize", "deltaOffset", "deltaPercentage", "isResizingColumn", "columnSizingStart", "ColumnSizing", "columnSizing", "columnSizingInfo", "columnResizeMode", "columnResizeDirection", "onColumnSizingChange", "onColumnSizingInfoChange", "getSize", "_column$columnDef$min", "_column$columnDef$max", "columnSize", "getStart", "slice", "getAfter", "resetSize", "setColumnSizing", "_ref2", "_", "rest", "getCanResize", "enableResizing", "enableColumnResizing", "getIsResizing", "_header$column$getSiz", "prevSiblingHeader", "getResizeHandler", "_contextDocument", "canResize", "e", "persist", "isTouchStartEvent", "touches", "clientX", "newColumnSizing", "updateOffset", "eventType", "clientXPos", "setColumnSizingInfo", "_old$startOffset", "_old$startSize", "deltaDirection", "_ref3", "headerSize", "onMove", "onEnd", "contextDocument", "document", "mouseEvents", "moveHandler", "upHandler", "removeEventListener", "touchEvents", "cancelable", "preventDefault", "stopPropagation", "_e$touches$", "passiveIfSupported", "passiveEventSupported", "passive", "addEventListener", "resetColumnSizing", "resetHeaderSizeInfo", "_table$initialState$c2", "getTotalSize", "_table$getHeaderGroup", "_table$getHeaderGroup2", "getLeftTotalSize", "_table$getLeftHeaderG", "_table$getLeftHeaderG2", "getCenterTotalSize", "_table$getCenterHeade", "_table$getCenterHeade2", "getRightTotalSize", "_table$getRightHeader", "_table$getRightHeader2", "passiveSupported", "supported", "noop", "window", "err", "type", "ColumnVisibility", "columnVisibility", "onColumnVisibilityChange", "toggleVisibility", "getCanHide", "setColumnVisibility", "childColumns", "c", "enableHiding", "getToggleVisibilityHandler", "target", "checked", "getVisibleCells", "makeVisibleColumnsMethod", "getColumns", "getVisibleFlatColumns", "getAllFlatColumns", "getLeftVisibleLeafColumns", "getRightVisibleLeafColumns", "getCenterVisibleLeafColumns", "resetColumnVisibility", "toggleAllColumnsVisible", "_value", "getIsAllColumnsVisible", "obj", "getIsSomeColumnsVisible", "getToggleAllColumnsVisibilityHandler", "_target", "GlobalFaceting", "_getGlobalFacetedRowModel", "getGlobalFacetedRowModel", "_getGlobalFacetedUniqueValues", "getGlobalFacetedUniqueValues", "_getGlobalFacetedMinMaxValues", "getGlobalFacetedMinMaxValues", "GlobalFiltering", "globalFilter", "onGlobalFilterChange", "globalFilterFn", "getColumnCanGlobalFilter", "_table$getCoreRowMode", "getCanGlobalFilter", "_table$options$getCol", "enableGlobalFilter", "getGlobalAutoFilterFn", "getGlobalFilterFn", "setGlobalFilter", "resetGlobalFilter", "RowExpanding", "expanded", "onExpandedChange", "paginateExpandedRows", "registered", "queued", "_autoResetExpanded", "_table$options$autoRe", "_queue", "autoResetAll", "autoResetExpanded", "manualExpanding", "resetExpanded", "setExpanded", "toggleAllRowsExpanded", "getIsAllRowsExpanded", "_table$initialState$e", "getCanSomeRowsExpand", "getPrePaginationRowModel", "getCanExpand", "getToggleAllRowsExpandedHandler", "getIsSomeRowsExpanded", "keys", "getRowModel", "getIsExpanded", "getExpandedDepth", "rowIds", "rowsById", "splitId", "getPreExpandedRowModel", "getSortedRowModel", "getExpandedRowModel", "_getExpandedRowModel", "toggleExpanded", "_expanded", "exists", "oldExpanded", "rowId", "_table$options$getIsR", "getIsRowExpanded", "_table$options$getRow", "getRowCanExpand", "enableExpanding", "getIsAllParentsExpanded", "isFullyExpanded", "getToggleExpandedHandler", "canExpand", "defaultPageIndex", "defaultPageSize", "getDefaultPaginationState", "pageIndex", "pageSize", "RowPagination", "pagination", "onPaginationChange", "_autoResetPageIndex", "autoResetPageIndex", "manualPagination", "resetPageIndex", "setPagination", "safeUpdater", "newState", "resetPagination", "_table$initialState$p", "setPageIndex", "maxPageIndex", "pageCount", "_table$initialState$p2", "resetPageSize", "_table$initialState$p3", "_table$initialState2", "setPageSize", "topRowIndex", "setPageCount", "_table$options$pageCo", "newPageCount", "getPageOptions", "getPageCount", "pageOptions", "fill", "getCanPreviousPage", "getCanNextPage", "previousPage", "nextPage", "firstPage", "lastPage", "getPaginationRowModel", "_getPaginationRowModel", "_table$options$pageCo2", "ceil", "getRowCount", "_table$options$rowCou", "rowCount", "rows", "getDefaultRowPinningState", "top", "bottom", "RowPinning", "rowPinning", "onRowPinningChange", "includeLeafRows", "includeParentRows", "leafRowIds", "parentRowIds", "setRowPinning", "_old$top3", "_old$bottom3", "_old$top", "_old$bottom", "has", "_old$top2", "_old$bottom2", "enableRowPinning", "isTop", "isBottom", "_table$_getPinnedRows", "_visiblePinnedRowIds$", "visiblePinnedRowIds", "_getPinnedRows", "_ref4", "resetRowPinning", "_table$initialState$r", "getIsSomeRowsPinned", "_pinningState$top", "_pinningState$bottom", "visibleRows", "pinnedRowIds", "_table$options$keepPi", "keepPinnedRows", "getTopRows", "getBottomRows", "getCenterRows", "allRows", "topAndBottom", "RowSelection", "rowSelection", "onRowSelectionChange", "enableRowSelection", "enableMultiRowSelection", "enableSubRowSelection", "setRowSelection", "resetRowSelection", "toggleAllRowsSelected", "getIsAllRowsSelected", "preGroupedFlatRows", "getCanSelect", "toggleAllPageRowsSelected", "resolvedValue", "getIsAllPageRowsSelected", "mutateRowIsSelected", "getPreSelectedRowModel", "getSelectedRowModel", "rowModel", "selectRowsFn", "getFilteredSelectedRowModel", "getGroupedSelectedRowModel", "isAllRowsSelected", "paginationFlatRows", "isAllPageRowsSelected", "getIsSomeRowsSelected", "_table$getState$rowSe", "totalSelected", "getIsSomePageRowsSelected", "getIsSelected", "getIsSomeSelected", "getToggleAllRowsSelectedHandler", "getToggleAllPageRowsSelectedHandler", "toggleSelected", "isSelected", "_opts$selectChildren", "selectedRowIds", "selectChildren", "isRowSelected", "isSubRowSelected", "getIsAllSubRowsSelected", "getCanSelectSubRows", "getCanMultiSelect", "_table$options$enable3", "getToggleSelectedHandler", "canSelect", "includeChildren", "newSelectedFlatRows", "newSelectedRowsById", "recurseRows", "_row$subRows2", "selection", "_selection$row$id", "_row$subRows3", "allChildrenSelected", "someSelected", "subRow", "subRowChildrenSelected", "reSplitAlphaNumeric", "alphanumeric", "rowA", "rowB", "compareAlphanumeric", "alphanumericCaseSensitive", "text", "compareBasic", "textCaseSensitive", "datetime", "basic", "aStr", "bStr", "aa", "bb", "an", "parseInt", "bn", "combo", "sortingFns", "RowSorting", "sorting", "sortingFn", "sortUndefined", "onSortingChange", "isMultiSortEvent", "shiftKey", "getAutoSortingFn", "firstRows", "isString", "getAutoSortDir", "getSortingFn", "_table$options$sortin", "_table$options$sortin2", "toggleSorting", "desc", "multi", "nextSortingOrder", "getNextSortingOrder", "hasManualValue", "setSorting", "existingSorting", "existingIndex", "newSorting", "sortAction", "nextDesc", "getCanMultiSort", "_table$options$maxMul", "maxMultiSortColCount", "getFirstSortDir", "_column$columnDef$sor", "sortDescFirst", "firstSortDirection", "isSorted", "getIsSorted", "enableSortingRemoval", "enableMultiRemove", "getCanSort", "enableSorting", "_column$columnDef$ena2", "enableMultiSort", "_table$getState$sorti", "columnSort", "getSortIndex", "_table$getState$sorti2", "_table$getState$sorti3", "clearSorting", "getToggleSortingHandler", "canSort", "resetSorting", "_table$initialState$s", "getPreSortedRowModel", "_getSortedRowModel", "manualSorting", "builtInFeatures", "_options$_features", "_options$initialState", "debugTable", "defaultOptions", "assign", "mergeOptions", "coreInitialState", "_feature$getInitialSt", "queuedTimeout", "coreInstance", "cb", "Promise", "resolve", "then", "catch", "error", "setTimeout", "reset", "setOptions", "newOptions", "onStateChange", "_getRowId", "getRowId", "_getCoreRowModel", "searchAll", "_defaultColumn", "_props$renderValue$to", "_props$renderValue", "_getColumnDefs", "columnDefs", "recurseColumns", "groupingColumnDef", "_getAllFlatColumnsById", "flatColumns", "data", "accessRows", "originalRows", "getSubRows", "_row$originalSubRows", "originalSubRows", "expandRows", "rowModel", "expandedRows", "handleRow", "row", "_row$subRows", "push", "subRows", "length", "getIsExpanded", "forEach", "rows", "flatRows", "rowsById", "filterRows", "rows", "filterRowImpl", "table", "options", "filterFromLeafRows", "filterRowModelFromLeafs", "filterRowModelFromRoot", "rowsToFilter", "filterRow", "_table$options$maxLea", "newFilteredFlatRows", "newFilteredRowsById", "maxDepth", "maxLeafRowFilterDepth", "recurseFilterRows", "depth", "i", "length", "_row$subRows", "row", "newRow", "createRow", "id", "original", "index", "undefined", "parentId", "columnFilters", "subRows", "push", "flatRows", "rowsById", "_table$options$maxLea2", "pass", "_row$subRows2", "getFilteredRowModel", "table", "memo", "getPreFilteredRowModel", "getState", "columnFilters", "globalFilter", "rowModel", "rows", "length", "i", "flatRows", "columnFiltersMeta", "resolvedColumnFilters", "resolvedGlobalFilters", "forEach", "d", "_filterFn$resolveFilt", "column", "getColumn", "id", "filterFn", "getFilterFn", "process", "console", "warn", "push", "resolvedValue", "resolveFilterValue", "value", "filterableIds", "map", "globalFilterFn", "getGlobalFilterFn", "globallyFilterableColumns", "getAllLeafColumns", "filter", "getCanGlobalFilter", "_globalFilterFn$resol", "currentColumnFilter", "currentGlobalFilter", "j", "row", "filterMeta", "__global__", "filterRowsImpl", "filterRows", "getMemoOptions", "options", "_autoResetPageIndex", "getPaginationRowModel", "opts", "table", "memo", "getState", "pagination", "getPrePaginationRowModel", "options", "paginateExpandedRows", "undefined", "expanded", "rowModel", "rows", "length", "pageSize", "pageIndex", "flatRows", "rowsById", "pageStart", "pageEnd", "slice", "paginatedRowModel", "expandRows", "handleRow", "row", "push", "subRows", "forEach", "getMemoOptions", "flexRender", "Comp", "props", "isReactComponent", "createElement", "component", "isClassComponent", "isExoticComponent", "proto", "Object", "getPrototypeOf", "prototype", "$$typeof", "includes", "description", "useReactTable", "options", "resolvedOptions", "state", "onStateChange", "renderFallbackValue", "tableRef", "useState", "current", "createTable", "setState", "initialState", "setOptions", "prev", "updater", "useTranslation", "useValuePreview", "Table", "isString", "isNumber", "state", "pane", "pathToString", "EMPTY_ARRAY", "ReferenceChildLink", "CopyToClipboard", "Button", "Dialog", "Root", "MenuButton", "PaneHeader", "getDisabledReason", "_a", "sum", "map", "negate", "uniqBy", "ChildLink", "isSanityDocument", "Content", "delay", "EMPTY_PARAMS", "structureTool", "inspectors", "useMenuItem", "LRU", "JSONInspector", "BackLink", "pathFromString", "pathGet", "Scroller", "views", "DISABLED_REASON_TITLE_KEY", "ConfirmDeleteDialog", "DISABLED_REASON_KEY", "timer", "Popover", "document", "documentActions", "documentBadges", "omit", "throttle", "deepEquals", "DocumentLayout", "filter", "take", "mergeMap", "tap", "StructurePaneHeader", "catchError", "PaneContainer", "isEqual", "shallowEquals", "__publicField", "HELP_URL", "camelCase", "getSlug", "component", "kebabCase", "uniq", "find", "startCase", "uniqueId", "Fragment"]
}
