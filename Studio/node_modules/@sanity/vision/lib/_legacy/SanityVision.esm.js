import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { useTranslation, Translate, useClient } from "sanity";
import { Spinner, rem, useTheme, Box, useClickOutside, Popover, Stack, Inline, Text, Badge, Card, Button, Code, Tooltip, Flex, Label, Grid, Select, TextInput, Hotkeys, useToast, Container, Heading } from "@sanity/ui";
import { useState, useEffect, useMemo, useCallback, PureComponent, createRef, Component } from "react";
import SplitPane from "@rexxars/react-split-pane";
import { HelpCircleIcon, DocumentSheetIcon, CopyIcon, ErrorOutlineIcon, StopIcon, PlayIcon } from "@sanity/icons";
import { isHotkey } from "is-hotkey-esm";
import CodeMirror from "@uiw/react-codemirror";
import { closeBrackets } from "@codemirror/autocomplete";
import { history, defaultKeymap, historyKeymap } from "@codemirror/commands";
import { javascriptLanguage } from "@codemirror/lang-javascript";
import { indentOnInput, bracketMatching, syntaxHighlighting, defaultHighlightStyle, HighlightStyle } from "@codemirror/language";
import { highlightSelectionMatches } from "@codemirror/search";
import { lineNumbers, highlightActiveLine, highlightActiveLineGutter, highlightSpecialChars, drawSelection, keymap, EditorView } from "@codemirror/view";
import { tags } from "@lezer/highlight";
import { hues } from "@sanity/color";
import { styled, css } from "styled-components";
import { json2csv } from "json-2-csv";
import { ResizeObserver } from "@juggle/resize-observer";
import JSON5 from "json5";
import debounce from "lodash/debounce.js";
import { visionLocaleNamespace } from "./index.esm.js";
import JSONInspector from "@rexxars/react-json-inspector";
import LRU from "quick-lru";
const API_VERSIONS = ["v1", "vX", "v2021-03-25", "v2021-10-21", "v2022-03-07"], [DEFAULT_API_VERSION] = API_VERSIONS.slice(-1);
function DelayedSpinner(props) {
  const [show, setShow] = useState(!1);
  return useEffect(() => {
    const timer = setTimeout(() => setShow(!0), props.delay || 500);
    return () => clearTimeout(timer);
  }, [props.delay]), show ? /* @__PURE__ */ jsx(Spinner, { muted: !0, size: 4 }) : null;
}
const codemirrorExtensions = [
  [javascriptLanguage],
  lineNumbers(),
  highlightActiveLine(),
  highlightActiveLineGutter(),
  highlightSelectionMatches(),
  highlightSpecialChars(),
  indentOnInput(),
  bracketMatching(),
  closeBrackets(),
  history(),
  drawSelection(),
  syntaxHighlighting(defaultHighlightStyle, { fallback: !0 }),
  keymap.of(
    [
      // Override the default keymap for Mod-Enter to not insert a new line, we have a custom event handler for executing queries
      { key: "Mod-Enter", run: () => !0 },
      // Add the default keymap and history keymap
      defaultKeymap,
      historyKeymap
    ].flat().filter(Boolean)
  )
];
function useCodemirrorTheme(theme) {
  const cmTheme = useMemo(() => createTheme(theme), [theme]), cmHighlight = useMemo(() => syntaxHighlighting(createHighlight(theme)), [theme]);
  return [cmTheme, cmHighlight];
}
function createTheme(theme) {
  const { color, fonts } = theme.sanity, card = color.card.enabled, cursor = hues.blue[color.dark ? 400 : 500].hex, selection = hues.gray[theme.sanity.color.dark ? 900 : 100].hex;
  return EditorView.theme(
    {
      "&": {
        color: card.fg,
        backgroundColor: card.bg
      },
      ".cm-content": {
        caretColor: cursor
      },
      ".cm-editor": {
        fontFamily: fonts.code.family,
        fontSize: rem(fonts.code.sizes[1].fontSize),
        lineHeight: "inherit"
      },
      ".cm-cursor, .cm-dropCursor": { borderLeftColor: cursor },
      "&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": {
        backgroundColor: selection
      },
      ".cm-panels": { backgroundColor: card.bg, color: card.fg },
      ".cm-panels.cm-panels-top": { borderBottom: `2px solid ${card.border}` },
      ".cm-panels.cm-panels-bottom": { borderTop: `2px solid ${card.border}` }
    },
    { dark: color.dark }
  );
}
function createHighlight(theme) {
  const c = theme.sanity.color.base, s = theme.sanity.color.syntax;
  return HighlightStyle.define([
    { tag: tags.keyword, color: s.keyword },
    { tag: [tags.propertyName, tags.name, tags.deleted, tags.character, tags.macroName], color: s.property },
    { tag: [tags.function(tags.variableName), tags.labelName], color: s.function },
    { tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)], color: s.variable },
    { tag: [tags.definition(tags.name), tags.separator], color: s.constant },
    {
      tag: [
        tags.typeName,
        tags.className,
        tags.number,
        tags.changed,
        tags.annotation,
        tags.modifier,
        tags.self,
        tags.namespace
      ],
      color: s.number
    },
    {
      tag: [tags.operator, tags.operatorKeyword, tags.url, tags.escape, tags.regexp, tags.link, tags.special(tags.string)],
      color: s.operator
    },
    { tag: [tags.meta, tags.comment], color: s.comment },
    { tag: tags.strong, fontWeight: "bold" },
    { tag: tags.emphasis, fontStyle: "italic" },
    { tag: tags.strikethrough, textDecoration: "line-through" },
    { tag: tags.heading, fontWeight: "bold", color: s.property },
    { tag: [tags.atom, tags.bool, tags.special(tags.variableName)], color: s.boolean },
    { tag: [tags.processingInstruction, tags.string, tags.inserted], color: s.string },
    { tag: tags.invalid, color: c.fg }
  ]);
}
const EditorRoot = styled.div`
  width: 100%;
  box-sizing: border-box;
  height: 100%;
  overflow: hidden;
  overflow: clip;
  position: relative;
  display: flex;

  & .cm-theme {
    width: 100%;
  }

  & .cm-editor {
    height: 100%;

    font-size: 16px;
    line-height: 21px;
  }

  & .cm-line {
    padding-left: ${({ theme }) => rem(theme.sanity.space[3])};
  }

  & .cm-content {
    border-right-width: ${({ theme }) => rem(theme.sanity.space[4])} !important;
    padding-top: ${({ theme }) => rem(theme.sanity.space[5])};
  }
`;
function VisionCodeMirror(props) {
  const sanityTheme = useTheme(), theme = useCodemirrorTheme(sanityTheme);
  return /* @__PURE__ */ jsx(EditorRoot, { children: /* @__PURE__ */ jsx(CodeMirror, { basicSetup: !1, theme, extensions: codemirrorExtensions, ...props }) });
}
const PERSPECTIVES = ["raw", "previewDrafts", "published"], DEFAULT_PERSPECTIVE = PERSPECTIVES[0];
function isPerspective(p) {
  return PERSPECTIVES.includes(p);
}
function encodeQueryString(query, params = {}, options = {}) {
  const searchParams = new URLSearchParams();
  searchParams.set("query", query);
  for (const [key, value] of Object.entries(params))
    searchParams.set(`$${key}`, JSON.stringify(value));
  for (const [key, value] of Object.entries(options))
    value && searchParams.set(key, `${value}`);
  return `?${searchParams}`;
}
function getBlobUrl(content, mimeType) {
  return URL.createObjectURL(
    new Blob([content], {
      type: mimeType
    })
  );
}
function getMemoizedBlobUrlResolver(mimeType, stringEncoder) {
  return /* @__PURE__ */ (() => {
    let prevResult = "", prevContent = "";
    return (input) => {
      const content = stringEncoder(input);
      if (!(typeof content != "string" || content === ""))
        return content === prevContent || (prevContent = content, prevResult && URL.revokeObjectURL(prevResult), prevResult = getBlobUrl(content, mimeType)), prevResult;
    };
  })();
}
const getJsonBlobUrl = getMemoizedBlobUrlResolver(
  "application/json",
  (input) => JSON.stringify(input, null, 2)
), getCsvBlobUrl = getMemoizedBlobUrlResolver("text/csv", (input) => json2csv(Array.isArray(input) ? input : [input]).trim());
function isPlainObject(obj) {
  return !!obj && typeof obj == "object" && Object.prototype.toString.call(obj) === "[object Object]";
}
const hasLocalStorage = supportsLocalStorage(), keyPrefix = "sanityVision:";
function clearLocalStorage() {
  if (hasLocalStorage)
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      key != null && key.startsWith(keyPrefix) && localStorage.removeItem(key);
    }
}
function getLocalStorage(namespace) {
  const storageKey = `${keyPrefix}${namespace}`;
  let loadedState = null;
  return { get, set, merge };
  function get(key, defaultVal) {
    const state = ensureState();
    return typeof state[key] > "u" ? defaultVal : state[key];
  }
  function set(key, value) {
    const state = ensureState();
    return state[key] = value, localStorage.setItem(storageKey, JSON.stringify(loadedState)), value;
  }
  function merge(props) {
    const state = { ...ensureState(), ...props };
    return localStorage.setItem(storageKey, JSON.stringify(state)), state;
  }
  function ensureState() {
    return loadedState === null && (loadedState = loadState()), loadedState;
  }
  function loadState() {
    if (!hasLocalStorage)
      return {};
    try {
      const stored = JSON.parse(localStorage.getItem(storageKey) || "{}");
      return isPlainObject(stored) ? stored : {};
    } catch {
      return {};
    }
  }
}
function supportsLocalStorage() {
  const mod = "lsCheck";
  try {
    return localStorage.setItem(mod, mod), localStorage.removeItem(mod), !0;
  } catch {
    return !1;
  }
}
function parseApiQueryString(qs) {
  const params = {}, options = {};
  for (const [key, value] of qs.entries()) {
    if (key[0] === "$") {
      params[key.slice(1)] = JSON.parse(value);
      continue;
    }
    if (key === "perspective") {
      options[key] = value;
      continue;
    }
  }
  return { query: qs.get("query") || "", params, options };
}
function prefixApiVersion(version) {
  return version[0] !== "v" && version !== "other" ? `v${version}` : version;
}
const RO = typeof document > "u" ? ResizeObserver : window.ResizeObserver;
function tryParseParams(val, t) {
  try {
    const parsed = val ? JSON5.parse(val) : {};
    return typeof parsed == "object" && parsed && !Array.isArray(parsed) ? parsed : {};
  } catch (err) {
    return err.message = `${t("params.error.params-invalid-json")}:

${err.message.replace(
      "JSON5:",
      ""
    )}`, err;
  }
}
function validateApiVersion(apiVersion) {
  const parseableApiVersion = apiVersion.replace(/^v/, "").trim().toUpperCase();
  return parseableApiVersion.length > 0 && (parseableApiVersion === "X" || parseableApiVersion === "1" || /^\d{4}-\d{2}-\d{2}$/.test(parseableApiVersion) && !isNaN(Date.parse(parseableApiVersion)));
}
const defaultValue = `{
  
}`;
function ParamsEditor(props) {
  const { onChange } = props, { t } = useTranslation(visionLocaleNamespace), { raw: value, error, parsed, valid } = eventFromValue(props.value, t), [isValid, setValid] = useState(valid), [init, setInit] = useState(!1);
  useEffect(() => {
    init || (onChange({ parsed, raw: value, valid: isValid, error }), setInit(!0));
  }, [error, init, isValid, onChange, parsed, value]);
  const handleChangeRaw = useCallback(
    (newValue) => {
      const event = eventFromValue(newValue, t);
      setValid(event.valid), onChange(event);
    },
    [onChange, t]
  ), handleChange = useMemo(() => debounce(handleChangeRaw, 333), [handleChangeRaw]);
  return /* @__PURE__ */ jsx(VisionCodeMirror, { value: props.value || defaultValue, onChange: handleChange });
}
function eventFromValue(value, t) {
  const parsedParams = tryParseParams(value, t), params = parsedParams instanceof Error ? {} : parsedParams, validationError = parsedParams instanceof Error ? parsedParams.message : void 0;
  return {
    parsed: params,
    raw: value,
    valid: !validationError,
    error: validationError
  };
}
const PerspectivePopoverContent = styled(Box)`
  /* This limits the width of the popover content */
  max-width: 240px;
`, PerspectivePopoverLink = styled.a`
  cursor: pointer;
  margin-right: auto;
`;
function PerspectivePopover() {
  const [open, setOpen] = useState(!1), [buttonEl, setButtonEl] = useState(null), [popoverEl, setPopoverEl] = useState(null), handleClick = useCallback(() => setOpen((o) => !o), []), handleClickOutside = useCallback(() => setOpen(!1), []), { t } = useTranslation(visionLocaleNamespace);
  return useClickOutside(handleClickOutside, [buttonEl, popoverEl]), /* @__PURE__ */ jsx(
    Popover,
    {
      content: /* @__PURE__ */ jsx(PerspectivePopoverContent, { children: /* @__PURE__ */ jsxs(Stack, { space: 4, children: [
        /* @__PURE__ */ jsxs(Inline, { space: 2, children: [
          /* @__PURE__ */ jsx(Text, { weight: "medium", children: t("settings.perspectives.title") }),
          /* @__PURE__ */ jsx(Badge, { tone: "primary", children: t("label.new") })
        ] }),
        /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsx(Text, { muted: !0, children: t("settings.perspectives.description") }) }),
        /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsx(Text, { children: /* @__PURE__ */ jsxs(PerspectivePopoverLink, { href: "https://sanity.io/docs/perspectives", target: "_blank", children: [
          t("settings.perspectives.action.docs-link"),
          " \u2192"
        ] }) }) })
      ] }) }),
      placement: "bottom-start",
      portal: !0,
      padding: 3,
      ref: setPopoverEl,
      open,
      children: /* @__PURE__ */ jsx(
        Button,
        {
          icon: HelpCircleIcon,
          mode: "bleed",
          padding: 2,
          tone: "primary",
          fontSize: 1,
          ref: setButtonEl,
          onClick: handleClick,
          selected: open
        }
      )
    }
  );
}
const ErrorCode = styled(Code)`
  color: ${({ theme }) => theme.sanity.color.muted.critical.enabled.fg};
`;
function QueryErrorDetails({ error }) {
  const { t } = useTranslation(visionLocaleNamespace);
  if (!("details" in error))
    return null;
  const details = { ...error.details, ...mapToLegacyDetails(error.details) };
  return details.line ? /* @__PURE__ */ jsxs("div", { children: [
    /* @__PURE__ */ jsx(ErrorCode, { size: 1, children: `${details.line}
${dashLine(
      details.column,
      details.columnEnd
    )}` }),
    /* @__PURE__ */ jsx(Box, { marginTop: 4, children: /* @__PURE__ */ jsx(ErrorCode, { size: 1, children: `${t("query.error.line")}:   ${details.lineNumber}
${t(
      "query.error.column"
    )}: ${details.column}` }) })
  ] }) : null;
}
function mapToLegacyDetails(details) {
  if (!details || typeof details.query != "string" || typeof details.start != "number")
    return {};
  const { query, start, end } = details, lineStart = query.slice(0, start).lastIndexOf(`
`) + 1, lineNumber = (query.slice(0, lineStart).match(/\n/g) || []).length, line = query.slice(lineStart, query.indexOf(`
`, lineStart)), column = start - lineStart, columnEnd = typeof end == "number" ? end - lineStart : void 0;
  return { line, lineNumber, column, columnEnd };
}
function dashLine(column, columnEnd) {
  const line = "-".repeat(column), hats = "^".repeat(columnEnd ? columnEnd - column : 1);
  return `${line}${hats}`;
}
function QueryErrorDialog(props) {
  return /* @__PURE__ */ jsxs(Stack, { space: 5, marginTop: 2, children: [
    /* @__PURE__ */ jsx(ErrorCode, { size: 1, children: props.error.message }),
    /* @__PURE__ */ jsx(QueryErrorDetails, { error: props.error })
  ] });
}
const ResultViewWrapper = styled.div(({ theme }) => {
  const { color, fonts, space } = theme.sanity;
  return css`
    & .json-inspector,
    & .json-inspector .json-inspector__selection {
      font-family: ${fonts.code.family};
      font-size: ${fonts.code.sizes[2].fontSize}px;
      line-height: ${fonts.code.sizes[2].lineHeight}px;
      color: var(--card-code-fg-color);
    }

    & .json-inspector .json-inspector__leaf {
      padding-left: ${rem(space[4])};
    }

    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {
      padding-top: ${rem(space[0])};
      padding-left: 0;
    }

    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {
      display: none;
    }

    & .json-inspector .json-inspector__line {
      display: block;
      position: relative;
      cursor: default;
    }

    & .json-inspector .json-inspector__line::after {
      content: '';
      position: absolute;
      top: 0;
      left: -200px;
      right: -50px;
      bottom: 0;
      z-index: -1;
      pointer-events: none;
    }

    & .json-inspector .json-inspector__line:hover::after {
      background: var(--card-code-bg-color);
    }

    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {
      cursor: pointer;
    }

    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {
      content: '▸ ';
      margin-left: calc(0px - ${rem(space[4])});
      font-size: ${fonts.code.sizes[2].fontSize}px;
      line-height: ${fonts.code.sizes[2].lineHeight}px;
    }

    &
      .json-inspector
      .json-inspector__leaf_expanded.json-inspector__leaf_composite
      > .json-inspector__line::before {
      content: '▾ ';
      font-size: ${fonts.code.sizes[2].fontSize}px;
      line-height: ${fonts.code.sizes[2].lineHeight}px;
    }

    & .json-inspector .json-inspector__radio,
    & .json-inspector .json-inspector__flatpath {
      display: none;
    }

    & .json-inspector .json-inspector__value {
      margin-left: ${rem(space[4] / 2)};
    }

    &
      .json-inspector
      > .json-inspector__leaf_root
      > .json-inspector__line
      > .json-inspector__key
      + .json-inspector__value {
      margin: 0;
    }

    & .json-inspector .json-inspector__key {
      color: ${color.syntax.property};
    }

    & .json-inspector .json-inspector__value_helper,
    & .json-inspector .json-inspector__value_null {
      color: ${color.syntax.constant};
    }

    & .json-inspector .json-inspector__not-found {
      padding-top: ${rem(space[2])};
    }

    & .json-inspector .json-inspector__value_string {
      color: ${color.syntax.string};
      word-break: break-word;
    }

    & .json-inspector .json-inspector__value_boolean {
      color: ${color.syntax.boolean};
    }

    & .json-inspector .json-inspector__value_number {
      color: ${color.syntax.number};
    }

    & .json-inspector .json-inspector__show-original {
      display: inline-block;
      padding: 0 6px;
      cursor: pointer;
    }

    & .json-inspector .json-inspector__show-original:hover {
      color: inherit;
    }

    & .json-inspector .json-inspector__show-original::before {
      content: '↔';
    }

    & .json-inspector .json-inspector__show-original:hover::after {
      content: ' expand';
    }
  `;
}), lru = new LRU({ maxSize: 5e4 });
function ResultView(props) {
  const { data } = props;
  return isRecord(data) || Array.isArray(data) ? /* @__PURE__ */ jsx(ResultViewWrapper, { children: /* @__PURE__ */ jsx(
    JSONInspector,
    {
      data,
      search: !1,
      isExpanded,
      onClick: toggleExpanded
    }
  ) }) : /* @__PURE__ */ jsx(Code, { language: "json", children: JSON.stringify(data) });
}
function isExpanded(keyPath, value) {
  const cached = lru.get(keyPath);
  if (typeof cached == "boolean")
    return cached;
  const segments = keyPath.split(".", 4);
  return segments.length === 4 ? !1 : Array.isArray(value) ? !0 : isRecord(value) && !segments.some((key) => isArrayKeyOverLimit(key));
}
function toggleExpanded(event) {
  const { path } = event, current = lru.get(path);
  current !== void 0 && lru.set(path, !current);
}
function isRecord(value) {
  return value !== null && typeof value == "object" && !Array.isArray(value);
}
const numeric = /^\d+$/;
function isArrayKeyOverLimit(segment, limit = 10) {
  return numeric.test(segment) && parseInt(segment, 10) > limit;
}
function preventSave(evt) {
  return evt.preventDefault();
}
function SaveCsvButton({ blobUrl }) {
  const { t } = useTranslation(visionLocaleNamespace), isDisabled = !blobUrl, button = /* @__PURE__ */ jsx(
    Button,
    {
      as: "a",
      disabled: isDisabled,
      download: isDisabled ? void 0 : "query-result.csv",
      href: blobUrl,
      icon: DocumentSheetIcon,
      mode: "ghost",
      onClick: isDisabled ? preventSave : void 0,
      text: "CSV",
      tone: "default"
    }
  );
  return isDisabled ? /* @__PURE__ */ jsx(Tooltip, { content: t("result.save-result-as-csv.not-csv-encodable"), placement: "top", children: button }) : button;
}
function SaveJsonButton({ blobUrl }) {
  return /* @__PURE__ */ jsx(
    Button,
    {
      as: "a",
      download: "query-result.json",
      href: blobUrl,
      icon: DocumentSheetIcon,
      mode: "ghost",
      text: "JSON",
      tone: "default"
    }
  );
}
const Root = styled(Flex)`
  .sidebarPanes .Pane {
    overflow-y: auto;
    overflow-x: hidden;
  }

  & .Resizer {
    background: var(--card-border-color);
    opacity: 1;
    z-index: 1;
    box-sizing: border-box;
    background-clip: padding-box;
    border: solid transparent;
  }

  & .Resizer:hover {
    border-color: var(--card-shadow-ambient-color);
  }

  & .Resizer.horizontal {
    height: 11px;
    margin: -5px 0;
    border-width: 5px 0;
    cursor: row-resize;
    width: 100%;
    z-index: 4;
  }

  & .Resizer.vertical {
    width: 11px;
    margin: 0 -5px;
    border-width: 0 5px;
    cursor: col-resize;
    z-index: 2; /* To prevent the resizer from being hidden behind CodeMirror scroll area */
  }

  .Resizer.disabled {
    cursor: not-allowed;
  }

  .Resizer.disabled:hover {
    border-color: transparent;
  }
`;
Root.displayName = "Root";
const Header = styled(Card)`
  border-bottom: 1px solid var(--card-border-color);
`, StyledLabel = styled(Label)`
  flex: 1;
`, SplitpaneContainer = styled(Box)`
  position: relative;
`, QueryCopyLink = styled.a`
  cursor: pointer;
  margin-right: auto;
`, InputBackgroundContainer = styled(Box)`
  position: absolute;
  top: 1rem;
  left: 0;
  padding: 0;
  margin: 0;
  z-index: 10;
  right: 0;

  ${StyledLabel} {
    user-select: none;
  }
`, InputBackgroundContainerLeft = styled(InputBackgroundContainer)`
  // This is so its aligned with the gutters of CodeMirror
  left: 33px;
`, InputContainer = styled(Card)`
  width: 100%;
  height: 100%;
  position: relative;
  flex-direction: column;
`, ResultOuterContainer = styled(Flex)`
  height: 100%;
`, ResultInnerContainer = styled(Box)`
  position: relative;
`, ResultContainer = styled(Card)`
  height: 100%;
  width: 100%;
  position: absolute;
  max-width: 100%;

  ${({ $isInvalid }) => $isInvalid && css`
      &:after {
        background-color: var(--card-bg-color);
        content: '';
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        width: 100%;
      }
    `}
`, Result = styled(Box)`
  position: relative;
  width: 100%;
  height: 100%;
  z-index: 20;
`, ResultFooter = styled(Flex)`
  border-top: 1px solid var(--card-border-color);
`, TimingsCard = styled(Card)`
  position: relative;
`;
styled(Box)`
  width: 100%;
  height: 100%;
`;
const TimingsTextContainer = styled(Flex)`
  height: 100%;
  min-height: ${({ theme }) => rem(
  theme.sanity.space[3] * 2 + theme.sanity.fonts.text.sizes[2].lineHeight - theme.sanity.fonts.text.sizes[2].ascenderHeight - theme.sanity.fonts.text.sizes[2].descenderHeight
)};
`, DownloadsCard = styled(Card)`
  position: relative;
`, SaveResultLabel = styled(Text)`
  transform: initial;
  &:before,
  &:after {
    content: none;
  }
  > span {
    display: flex !important;
    gap: ${({ theme }) => rem(theme.sanity.space[3])};
    align-items: center;
  }
`, ControlsContainer = styled(Box)`
  border-top: 1px solid var(--card-border-color);
`;
var __defProp$1 = Object.defineProperty, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __publicField$1 = (obj, key, value) => __defNormalProp$1(obj, typeof key != "symbol" ? key + "" : key, value);
function nodeContains(node, other) {
  return !node || !other ? !1 : node === other || !!(node.compareDocumentPosition(other) & 16);
}
const sanityUrl = /\.(?:api|apicdn)\.sanity\.io\/(vX|v1|v\d{4}-\d\d-\d\d)\/.*?(?:query|listen)\/(.*?)\?(.*)/, isRunHotkey = (event) => isHotkey("ctrl+enter", event) || isHotkey("mod+enter", event);
function narrowBreakpoint() {
  return typeof window < "u" && window.innerWidth > 600;
}
function calculatePaneSizeOptions(rootHeight) {
  return {
    defaultSize: rootHeight / (narrowBreakpoint() ? 2 : 1),
    size: rootHeight > 550 ? void 0 : rootHeight * 0.4,
    allowResize: rootHeight > 550,
    minSize: Math.min(170, Math.max(170, rootHeight / 2)),
    maxSize: rootHeight > 650 ? rootHeight * 0.7 : rootHeight * 0.6
  };
}
class VisionGui extends PureComponent {
  constructor(props) {
    super(props), __publicField$1(this, "_visionRoot"), __publicField$1(this, "_queryEditorContainer"), __publicField$1(this, "_paramsEditorContainer"), __publicField$1(this, "_operationUrlElement"), __publicField$1(this, "_customApiVersionElement"), __publicField$1(this, "_resizeListener"), __publicField$1(this, "_querySubscription"), __publicField$1(this, "_listenSubscription"), __publicField$1(this, "_client"), __publicField$1(this, "_localStorage");
    const { client, datasets, config } = props;
    this._localStorage = getLocalStorage(client.config().projectId || "default");
    const defaultDataset = config.defaultDataset || client.config().dataset || datasets[0], defaultApiVersion = prefixApiVersion(`${config.defaultApiVersion}`), defaultPerspective = DEFAULT_PERSPECTIVE;
    let dataset = this._localStorage.get("dataset", defaultDataset), apiVersion = this._localStorage.get("apiVersion", defaultApiVersion), lastQuery = this._localStorage.get("query", ""), lastParams = this._localStorage.get("params", `{
  
}`);
    const customApiVersion = API_VERSIONS.includes(apiVersion) ? !1 : apiVersion;
    let perspective = this._localStorage.get("perspective", defaultPerspective);
    datasets.includes(dataset) || (dataset = datasets.includes(defaultDataset) ? defaultDataset : datasets[0]), API_VERSIONS.includes(apiVersion) || (apiVersion = DEFAULT_API_VERSION), PERSPECTIVES.includes(perspective) || (perspective = DEFAULT_PERSPECTIVE), typeof lastQuery != "string" && (lastQuery = ""), typeof lastParams != "string" && (lastParams = `{
  
}`), this._visionRoot = createRef(), this._operationUrlElement = createRef(), this._queryEditorContainer = createRef(), this._paramsEditorContainer = createRef(), this._customApiVersionElement = createRef(), this._client = props.client.withConfig({
      apiVersion: customApiVersion || apiVersion,
      dataset,
      perspective,
      allowReconfigure: !0
    });
    const bodyHeight = typeof window < "u" && typeof document < "u" ? document.body.getBoundingClientRect().height - 60 : 0, params = lastParams ? tryParseParams(lastParams, this.props.t) : void 0;
    this.state = {
      // Selected options
      dataset,
      apiVersion,
      customApiVersion,
      perspective,
      // Selected options validation state
      isValidApiVersion: customApiVersion ? validateApiVersion(customApiVersion) : !1,
      // Inputs
      query: lastQuery,
      rawParams: lastParams,
      // Parsed input
      params,
      hasValidParams: !(params instanceof Error),
      // Query/listen results
      listenMutations: [],
      // Operation state
      queryInProgress: !1,
      listenInProgress: !1,
      // UI drawing state
      paneSizeOptions: calculatePaneSizeOptions(bodyHeight)
    }, this.handleChangeDataset = this.handleChangeDataset.bind(this), this.handleChangeApiVersion = this.handleChangeApiVersion.bind(this), this.handleCustomApiVersionChange = this.handleCustomApiVersionChange.bind(this), this.handleChangePerspective = this.handleChangePerspective.bind(this), this.handleListenExecution = this.handleListenExecution.bind(this), this.handleListenerEvent = this.handleListenerEvent.bind(this), this.handleQueryExecution = this.handleQueryExecution.bind(this), this.handleQueryChange = this.handleQueryChange.bind(this), this.handleParamsChange = this.handleParamsChange.bind(this), this.handleCopyUrl = this.handleCopyUrl.bind(this), this.handlePaste = this.handlePaste.bind(this), this.handleKeyDown = this.handleKeyDown.bind(this), this.handleResize = this.handleResize.bind(this);
  }
  componentDidMount() {
    window.document.addEventListener("paste", this.handlePaste), window.document.addEventListener("keydown", this.handleKeyDown), this.handleResizeListen();
  }
  componentWillUnmount() {
    this.cancelQuery(), this.cancelListener(), this.cancelEventListener(), this.cancelResizeListener();
  }
  handleResizeListen() {
    this._visionRoot.current && (this._resizeListener = new RO(this.handleResize), this._resizeListener.observe(this._visionRoot.current));
  }
  handleResize(entries) {
    const entry = entries == null ? void 0 : entries[0];
    this.setState((prevState) => ({
      ...prevState,
      paneSizeOptions: calculatePaneSizeOptions(entry.contentRect.height)
    }));
  }
  cancelResizeListener() {
    this._resizeListener && this._resizeListener.disconnect();
  }
  handlePaste(evt) {
    if (!evt.clipboardData)
      return;
    const match = evt.clipboardData.getData("text/plain").match(sanityUrl);
    if (!match)
      return;
    const [, usedApiVersion, usedDataset, urlQuery] = match;
    let parts;
    try {
      const qs = new URLSearchParams(urlQuery);
      parts = parseApiQueryString(qs);
    } catch (err) {
      console.warn("Error while trying to parse API URL: ", err.message);
      return;
    }
    let apiVersion, customApiVersion;
    validateApiVersion(usedApiVersion) && (API_VERSIONS.includes(usedApiVersion) ? (apiVersion = usedApiVersion, customApiVersion = !1) : customApiVersion = usedApiVersion);
    const perspective = PERSPECTIVES.includes(parts.options.perspective) ? parts.options.perspective : void 0;
    evt.preventDefault(), this.setState(
      (prevState) => ({
        dataset: this.props.datasets.includes(usedDataset) ? usedDataset : prevState.dataset,
        query: parts.query,
        params: parts.params,
        rawParams: JSON.stringify(parts.params, null, 2),
        apiVersion: typeof apiVersion > "u" ? prevState.apiVersion : apiVersion,
        customApiVersion: typeof customApiVersion > "u" ? prevState.customApiVersion : customApiVersion,
        perspective: typeof perspective > "u" ? prevState.perspective : perspective
      }),
      () => {
        this._localStorage.merge({
          query: this.state.query,
          params: this.state.rawParams,
          dataset: this.state.dataset,
          apiVersion: customApiVersion || apiVersion,
          perspective: this.state.perspective
        }), this._client.config({
          dataset: this.state.dataset,
          apiVersion: customApiVersion || apiVersion,
          perspective: this.state.perspective
        }), this.handleQueryExecution(), this.props.toast.push({
          closable: !0,
          id: "vision-paste",
          status: "info",
          title: "Parsed URL to query"
        });
      }
    );
  }
  cancelQuery() {
    this._querySubscription && (this._querySubscription.unsubscribe(), this._querySubscription = void 0);
  }
  cancelListener() {
    this._listenSubscription && (this._listenSubscription.unsubscribe(), this._listenSubscription = void 0);
  }
  cancelEventListener() {
    window.removeEventListener("keydown", this.handleKeyDown);
  }
  handleChangeDataset(evt) {
    const dataset = evt.target.value;
    this._localStorage.set("dataset", dataset), this.setState({ dataset }), this._client.config({ dataset }), this.handleQueryExecution();
  }
  handleChangeApiVersion(evt) {
    const apiVersion = evt.target.value;
    if ((apiVersion == null ? void 0 : apiVersion.toLowerCase()) === "other") {
      this.setState({ customApiVersion: "v" }, () => {
        var _a;
        (_a = this._customApiVersionElement.current) == null || _a.focus();
      });
      return;
    }
    this.setState({ apiVersion, customApiVersion: !1 }, () => {
      this._localStorage.set("apiVersion", this.state.apiVersion), this._client.config({
        apiVersion: this.state.apiVersion
      }), this.handleQueryExecution();
    });
  }
  handleCustomApiVersionChange(evt) {
    const customApiVersion = evt.target.value || "", isValidApiVersion = validateApiVersion(customApiVersion);
    this.setState(
      (prevState) => ({
        apiVersion: isValidApiVersion ? customApiVersion : prevState.apiVersion,
        customApiVersion: customApiVersion || "v",
        isValidApiVersion
      }),
      () => {
        !this.state.isValidApiVersion || typeof this.state.customApiVersion != "string" || (this._localStorage.set("apiVersion", this.state.customApiVersion), this._client.config({ apiVersion: this.state.customApiVersion }));
      }
    );
  }
  handleChangePerspective(evt) {
    const perspective = evt.target.value;
    isPerspective(perspective) && this.setState({ perspective }, () => {
      this._localStorage.set("perspective", this.state.perspective), this._client.config({
        perspective: this.state.perspective
      }), this.handleQueryExecution();
    });
  }
  handleListenerEvent(evt) {
    if (evt.type !== "mutation") {
      this.props.toast.push({
        closable: !0,
        id: "vision-listen",
        status: "success",
        title: "Listening for mutations\u2026"
      });
      return;
    }
    this.setState(({ listenMutations }) => ({
      listenMutations: listenMutations.length === 50 ? [evt, ...listenMutations.slice(0, 49)] : [evt, ...listenMutations]
    }));
  }
  handleKeyDown(event) {
    const { hasValidParams } = this.state, isWithinRoot = this._visionRoot.current && nodeContains(this._visionRoot.current, event.target);
    isRunHotkey(event) && isWithinRoot && hasValidParams && (this.handleQueryExecution(), event.preventDefault(), event.stopPropagation());
  }
  ensureSelectedApiVersion() {
    const { apiVersion, customApiVersion } = this.state, wantedApiVersion = customApiVersion || apiVersion;
    this._client.config().apiVersion !== wantedApiVersion && this._client.config({ apiVersion: wantedApiVersion });
  }
  handleListenExecution() {
    const { query, params, rawParams, listenInProgress } = this.state;
    if (listenInProgress) {
      this.cancelListener(), this.setState({ listenInProgress: !1 });
      return;
    }
    this.ensureSelectedApiVersion();
    const paramsError = params instanceof Error ? params : void 0, encodeParams = params instanceof Error ? {} : params || {}, url = this._client.getDataUrl("listen", encodeQueryString(query, encodeParams, {})), shouldExecute = !paramsError && query.trim().length > 0;
    this._localStorage.set("query", query), this._localStorage.set("params", rawParams), this.cancelQuery(), this.setState({
      url,
      listenMutations: [],
      queryInProgress: !1,
      queryResult: void 0,
      listenInProgress: shouldExecute,
      error: paramsError,
      queryTime: void 0,
      e2eTime: void 0
    }), shouldExecute && (this._listenSubscription = this._client.listen(query, params, { events: ["mutation", "welcome"] }).subscribe({
      next: this.handleListenerEvent,
      error: (error) => this.setState({
        error,
        query,
        listenInProgress: !1
      })
    }));
  }
  handleQueryExecution() {
    const { query, params, rawParams, queryInProgress } = this.state;
    if (queryInProgress)
      return this.cancelQuery(), this.cancelListener(), this.setState({ queryInProgress: !1 }), !0;
    const paramsError = params instanceof Error && params;
    if (this._localStorage.set("query", query), this._localStorage.set("params", rawParams), this.cancelListener(), this.setState({
      queryInProgress: !paramsError && !!query,
      listenInProgress: !1,
      listenMutations: [],
      error: paramsError || void 0,
      queryResult: void 0,
      queryTime: void 0,
      e2eTime: void 0
    }), !query || paramsError)
      return !0;
    this.ensureSelectedApiVersion();
    const urlQueryOpts = {};
    this.state.perspective !== "raw" && (urlQueryOpts.perspective = this.state.perspective);
    const url = this._client.getUrl(
      this._client.getDataUrl("query", encodeQueryString(query, params, urlQueryOpts))
    );
    this.setState({ url });
    const queryStart = Date.now();
    return this._querySubscription = this._client.observable.fetch(query, params, { filterResponse: !1, tag: "vision" }).subscribe({
      next: (res) => this.setState({
        queryTime: res.ms,
        e2eTime: Date.now() - queryStart,
        queryResult: res.result,
        queryInProgress: !1,
        error: void 0
      }),
      error: (error) => this.setState({
        error,
        query,
        queryInProgress: !1
      })
    }), !0;
  }
  handleQueryChange(query) {
    this.setState({ query });
  }
  handleParamsChange({ raw, parsed, valid, error }) {
    this.setState(
      {
        rawParams: raw,
        params: parsed,
        hasValidParams: valid,
        paramsError: error
      },
      () => this._localStorage.set("params", raw)
    );
  }
  handleCopyUrl() {
    const el = this._operationUrlElement.current;
    if (el)
      try {
        el.select(), document.execCommand("copy"), this.props.toast.push({
          closable: !0,
          title: "Copied to clipboard",
          status: "info",
          id: "vision-copy"
        });
      } catch {
        console.error("Unable to copy to clipboard :(");
      }
  }
  render() {
    const { datasets, t } = this.props, {
      apiVersion,
      customApiVersion,
      dataset,
      e2eTime,
      error,
      hasValidParams,
      isValidApiVersion,
      listenInProgress,
      listenMutations,
      paneSizeOptions,
      paramsError,
      perspective,
      query,
      queryInProgress,
      queryResult,
      queryTime,
      rawParams,
      url
    } = this.state, hasResult = !error && !queryInProgress && typeof queryResult < "u", jsonUrl = hasResult ? getJsonBlobUrl(queryResult) : "", csvUrl = hasResult ? getCsvBlobUrl(queryResult) : "";
    return /* @__PURE__ */ jsxs(
      Root,
      {
        direction: "column",
        height: "fill",
        ref: this._visionRoot,
        sizing: "border",
        overflow: "hidden",
        children: [
          /* @__PURE__ */ jsx(Header, { paddingX: 3, paddingY: 2, children: /* @__PURE__ */ jsxs(Grid, { columns: [1, 4, 8, 12], children: [
            /* @__PURE__ */ jsx(Box, { padding: 1, column: 2, children: /* @__PURE__ */ jsxs(Stack, { children: [
              /* @__PURE__ */ jsx(Card, { paddingTop: 2, paddingBottom: 3, children: /* @__PURE__ */ jsx(StyledLabel, { children: t("settings.dataset-label") }) }),
              /* @__PURE__ */ jsx(Select, { value: dataset, onChange: this.handleChangeDataset, children: datasets.map((ds) => /* @__PURE__ */ jsx("option", { children: ds }, ds)) })
            ] }) }),
            /* @__PURE__ */ jsx(Box, { padding: 1, column: 2, children: /* @__PURE__ */ jsxs(Stack, { children: [
              /* @__PURE__ */ jsx(Card, { paddingTop: 2, paddingBottom: 3, children: /* @__PURE__ */ jsx(StyledLabel, { children: t("settings.api-version-label") }) }),
              /* @__PURE__ */ jsxs(
                Select,
                {
                  value: customApiVersion === !1 ? apiVersion : "other",
                  onChange: this.handleChangeApiVersion,
                  children: [
                    API_VERSIONS.map((version) => /* @__PURE__ */ jsx("option", { children: version }, version)),
                    /* @__PURE__ */ jsx("option", { value: "other", children: t("settings.other-api-version-label") }, "other")
                  ]
                }
              )
            ] }) }),
            customApiVersion !== !1 && /* @__PURE__ */ jsx(Box, { padding: 1, column: 2, children: /* @__PURE__ */ jsxs(Stack, { children: [
              /* @__PURE__ */ jsx(Card, { paddingTop: 2, paddingBottom: 3, children: /* @__PURE__ */ jsx(StyledLabel, { textOverflow: "ellipsis", children: t("settings.custom-api-version-label") }) }),
              /* @__PURE__ */ jsx(
                TextInput,
                {
                  ref: this._customApiVersionElement,
                  value: customApiVersion,
                  onChange: this.handleCustomApiVersionChange,
                  customValidity: isValidApiVersion ? void 0 : t("settings.error.invalid-api-version"),
                  maxLength: 11
                }
              )
            ] }) }),
            /* @__PURE__ */ jsx(Box, { padding: 1, column: 2, children: /* @__PURE__ */ jsxs(Stack, { children: [
              /* @__PURE__ */ jsx(Card, { paddingBottom: 1, children: /* @__PURE__ */ jsxs(Inline, { space: 1, children: [
                /* @__PURE__ */ jsx(Box, { children: /* @__PURE__ */ jsx(StyledLabel, { children: t("settings.perspective-label") }) }),
                /* @__PURE__ */ jsx(Box, { children: /* @__PURE__ */ jsx(PerspectivePopover, {}) })
              ] }) }),
              /* @__PURE__ */ jsx(Select, { value: perspective, onChange: this.handleChangePerspective, children: PERSPECTIVES.map((p) => /* @__PURE__ */ jsx("option", { children: p }, p)) })
            ] }) }),
            typeof url == "string" ? /* @__PURE__ */ jsx(Box, { padding: 1, flex: 1, column: customApiVersion === !1 ? 6 : 4, children: /* @__PURE__ */ jsxs(Stack, { children: [
              /* @__PURE__ */ jsx(Card, { paddingTop: 2, paddingBottom: 3, children: /* @__PURE__ */ jsxs(StyledLabel, { children: [
                t("query.url"),
                "\xA0",
                /* @__PURE__ */ jsxs(QueryCopyLink, { onClick: this.handleCopyUrl, children: [
                  "[",
                  t("action.copy-url-to-clipboard"),
                  "]"
                ] })
              ] }) }),
              /* @__PURE__ */ jsxs(Flex, { flex: 1, gap: 1, children: [
                /* @__PURE__ */ jsx(Box, { flex: 1, children: /* @__PURE__ */ jsx(TextInput, { readOnly: !0, type: "url", ref: this._operationUrlElement, value: url }) }),
                /* @__PURE__ */ jsx(Tooltip, { content: t("action.copy-url-to-clipboard"), children: /* @__PURE__ */ jsx(
                  Button,
                  {
                    "aria-label": t("action.copy-url-to-clipboard"),
                    type: "button",
                    mode: "ghost",
                    icon: CopyIcon,
                    onClick: this.handleCopyUrl
                  }
                ) })
              ] })
            ] }) }) : /* @__PURE__ */ jsx(Box, { flex: 1 })
          ] }) }),
          /* @__PURE__ */ jsx(SplitpaneContainer, { flex: "auto", children: /* @__PURE__ */ jsxs(
            SplitPane,
            {
              split: narrowBreakpoint() ? "vertical" : "horizontal",
              minSize: 280,
              defaultSize: 400,
              maxSize: -400,
              children: [
                /* @__PURE__ */ jsx(Box, { height: "stretch", flex: 1, children: /* @__PURE__ */ jsxs(
                  SplitPane,
                  {
                    className: "sidebarPanes",
                    split: "horizontal",
                    defaultSize: narrowBreakpoint() ? paneSizeOptions.defaultSize : paneSizeOptions.minSize,
                    size: paneSizeOptions.size,
                    allowResize: paneSizeOptions.allowResize,
                    minSize: narrowBreakpoint() ? paneSizeOptions.minSize : 100,
                    maxSize: paneSizeOptions.maxSize,
                    primary: "first",
                    children: [
                      /* @__PURE__ */ jsx(InputContainer, { display: "flex", ref: this._queryEditorContainer, children: /* @__PURE__ */ jsxs(Box, { flex: 1, children: [
                        /* @__PURE__ */ jsx(InputBackgroundContainerLeft, { children: /* @__PURE__ */ jsx(Flex, { children: /* @__PURE__ */ jsx(StyledLabel, { muted: !0, children: t("query.label") }) }) }),
                        /* @__PURE__ */ jsx(VisionCodeMirror, { value: query, onChange: this.handleQueryChange })
                      ] }) }),
                      /* @__PURE__ */ jsxs(InputContainer, { display: "flex", ref: this._paramsEditorContainer, children: [
                        /* @__PURE__ */ jsxs(Card, { flex: 1, tone: hasValidParams ? "default" : "critical", children: [
                          /* @__PURE__ */ jsx(InputBackgroundContainerLeft, { children: /* @__PURE__ */ jsxs(Flex, { children: [
                            /* @__PURE__ */ jsx(StyledLabel, { muted: !0, children: t("params.label") }),
                            paramsError && /* @__PURE__ */ jsx(Tooltip, { placement: "top-end", portal: !0, content: paramsError, children: /* @__PURE__ */ jsx(Box, { padding: 1, marginX: 2, children: /* @__PURE__ */ jsx(Text, { children: /* @__PURE__ */ jsx(ErrorOutlineIcon, {}) }) }) })
                          ] }) }),
                          /* @__PURE__ */ jsx(ParamsEditor, { value: rawParams, onChange: this.handleParamsChange })
                        ] }),
                        /* @__PURE__ */ jsx(ControlsContainer, { children: /* @__PURE__ */ jsx(Card, { padding: 3, paddingX: 3, children: /* @__PURE__ */ jsx(
                          Tooltip,
                          {
                            content: /* @__PURE__ */ jsx(Card, { radius: 4, children: /* @__PURE__ */ jsx(Text, { size: 1, muted: !0, children: t("params.error.params-invalid-json") }) }),
                            placement: "top",
                            disabled: hasValidParams,
                            portal: !0,
                            children: /* @__PURE__ */ jsxs(Flex, { justify: "space-evenly", children: [
                              /* @__PURE__ */ jsx(Box, { flex: 1, children: /* @__PURE__ */ jsx(
                                Tooltip,
                                {
                                  content: /* @__PURE__ */ jsx(Card, { radius: 4, children: /* @__PURE__ */ jsx(Hotkeys, { keys: ["Ctrl", "Enter"] }) }),
                                  placement: "top",
                                  portal: !0,
                                  children: /* @__PURE__ */ jsx(
                                    Button,
                                    {
                                      width: "fill",
                                      onClick: this.handleQueryExecution,
                                      type: "button",
                                      icon: queryInProgress ? StopIcon : PlayIcon,
                                      disabled: listenInProgress || !hasValidParams,
                                      tone: queryInProgress ? "positive" : "primary",
                                      text: t(queryInProgress ? "action.query-cancel" : "action.query-execute")
                                    }
                                  )
                                }
                              ) }),
                              /* @__PURE__ */ jsx(Box, { flex: 1, marginLeft: 3, children: /* @__PURE__ */ jsx(
                                Button,
                                {
                                  width: "fill",
                                  onClick: this.handleListenExecution,
                                  type: "button",
                                  icon: listenInProgress ? StopIcon : PlayIcon,
                                  text: t(listenInProgress ? "action.listen-cancel" : "action.listen-execute"),
                                  mode: "ghost",
                                  disabled: !hasValidParams,
                                  tone: listenInProgress ? "positive" : "default"
                                }
                              ) })
                            ] })
                          }
                        ) }) })
                      ] })
                    ]
                  }
                ) }),
                /* @__PURE__ */ jsxs(ResultOuterContainer, { direction: "column", children: [
                  /* @__PURE__ */ jsx(ResultInnerContainer, { flex: 1, children: /* @__PURE__ */ jsx(
                    ResultContainer,
                    {
                      flex: 1,
                      overflow: "hidden",
                      tone: error ? "critical" : "default",
                      $isInvalid: !!error,
                      children: /* @__PURE__ */ jsxs(Result, { overflow: "auto", children: [
                        /* @__PURE__ */ jsx(InputBackgroundContainer, { children: /* @__PURE__ */ jsx(Box, { marginLeft: 3, children: /* @__PURE__ */ jsx(StyledLabel, { muted: !0, children: t("result.label") }) }) }),
                        /* @__PURE__ */ jsxs(Box, { padding: 3, paddingTop: 5, children: [
                          (queryInProgress || listenInProgress && listenMutations.length === 0) && /* @__PURE__ */ jsx(Box, { marginTop: 3, children: /* @__PURE__ */ jsx(DelayedSpinner, {}) }),
                          error && /* @__PURE__ */ jsx(QueryErrorDialog, { error }),
                          hasResult && /* @__PURE__ */ jsx(ResultView, { data: queryResult }),
                          listenInProgress && listenMutations.length > 0 && /* @__PURE__ */ jsx(ResultView, { data: listenMutations })
                        ] })
                      ] })
                    }
                  ) }),
                  /* @__PURE__ */ jsxs(ResultFooter, { justify: "space-between", direction: ["column", "column", "row"], children: [
                    /* @__PURE__ */ jsx(TimingsCard, { paddingX: 4, paddingY: 3, sizing: "border", children: /* @__PURE__ */ jsxs(TimingsTextContainer, { align: "center", children: [
                      /* @__PURE__ */ jsx(Box, { children: /* @__PURE__ */ jsxs(Text, { muted: !0, children: [
                        t("result.execution-time-label"),
                        ":",
                        " ",
                        typeof queryTime == "number" ? `${queryTime}ms` : t("result.timing-not-applicable")
                      ] }) }),
                      /* @__PURE__ */ jsx(Box, { marginLeft: 4, children: /* @__PURE__ */ jsxs(Text, { muted: !0, children: [
                        t("result.end-to-end-time-label"),
                        ":",
                        " ",
                        typeof e2eTime == "number" ? `${e2eTime}ms` : t("result.timing-not-applicable")
                      ] }) })
                    ] }) }),
                    hasResult && /* @__PURE__ */ jsx(DownloadsCard, { paddingX: 4, paddingY: 3, sizing: "border", children: /* @__PURE__ */ jsx(SaveResultLabel, { muted: !0, children: /* @__PURE__ */ jsx(
                      Translate,
                      {
                        components: {
                          SaveResultButtons: () => /* @__PURE__ */ jsxs(Fragment, { children: [
                            /* @__PURE__ */ jsx(SaveJsonButton, { blobUrl: jsonUrl }),
                            /* @__PURE__ */ jsx(SaveCsvButton, { blobUrl: csvUrl })
                          ] })
                        },
                        i18nKey: "result.save-result-as-format",
                        t
                      }
                    ) }) })
                  ] })
                ] })
              ]
            }
          ) })
        ]
      }
    );
  }
}
function useDatasets(client) {
  const projectId = client.config().projectId, [datasets, setDatasets] = useState();
  return useEffect(() => {
    const datasets$ = client.observable.datasets.list().subscribe({
      next: (result) => setDatasets(result.map((ds) => ds.name)),
      error: (err) => setDatasets(err)
    });
    return () => datasets$.unsubscribe();
  }, [client, projectId]), datasets || void 0;
}
function VisionContainer(props) {
  const toast = useToast(), loadedDatasets = useDatasets(props.client), { t } = useTranslation(visionLocaleNamespace);
  if (!loadedDatasets)
    return /* @__PURE__ */ jsx(DelayedSpinner, {});
  const datasets = loadedDatasets instanceof Error ? (
    // On error, use the clients configured dataset
    [props.client.config().dataset || "production"]
  ) : (
    // Otherwise use the loaded list, obviously
    loadedDatasets
  );
  return /* @__PURE__ */ jsx(VisionGui, { ...props, datasets, toast, t });
}
var __defProp = Object.defineProperty, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __publicField = (obj, key, value) => __defNormalProp(obj, typeof key != "symbol" ? key + "" : key, value);
class VisionErrorBoundary extends Component {
  constructor(props) {
    super(props), __publicField(this, "handleRetryRender", () => this.setState((prev) => ({ error: null, numRetries: prev.numRetries + 1 }))), __publicField(this, "handleRetryWithCacheClear", () => {
      clearLocalStorage(), this.handleRetryRender();
    }), this.state = { error: null, numRetries: 0 };
  }
  static getDerivedStateFromError(error) {
    return { error: error instanceof Error ? error.message : `${error}` };
  }
  render() {
    if (!this.state.error)
      return this.props.children;
    const message = this.state.error, withCacheClear = this.state.numRetries > 0;
    return /* @__PURE__ */ jsx(
      Card,
      {
        height: "fill",
        overflow: "auto",
        paddingY: [4, 5, 6, 7],
        paddingX: 4,
        sizing: "border",
        tone: "critical",
        children: /* @__PURE__ */ jsx(Container, { width: 3, children: /* @__PURE__ */ jsxs(Stack, { space: 4, children: [
          /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(
            Button,
            {
              onClick: withCacheClear ? this.handleRetryWithCacheClear : this.handleRetryRender,
              text: withCacheClear ? "Clear cache and retry" : "Retry",
              tone: "default"
            }
          ) }),
          /* @__PURE__ */ jsx(Heading, { children: "An error occured" }),
          /* @__PURE__ */ jsx(Card, { border: !0, radius: 2, overflow: "auto", padding: 4, tone: "inherit", children: /* @__PURE__ */ jsx(Stack, { space: 4, children: message && /* @__PURE__ */ jsx(Code, { size: 1, children: /* @__PURE__ */ jsxs("strong", { children: [
            "Error: ",
            message
          ] }) }) }) })
        ] }) })
      }
    );
  }
}
function SanityVision(props) {
  const client = useClient({ apiVersion: "1" }), config = {
    defaultApiVersion: DEFAULT_API_VERSION,
    ...props.tool.options
  };
  return /* @__PURE__ */ jsx(VisionErrorBoundary, { children: /* @__PURE__ */ jsx(VisionContainer, { client, config }) });
}
export {
  SanityVision as default
};
//# sourceMappingURL=SanityVision.esm.js.map
